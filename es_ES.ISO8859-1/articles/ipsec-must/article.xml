<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//FreeBSD//DTD DocBook XML V5.0-Based Extension//EN" "http://www.FreeBSD.org/XML/share/xml/freebsd50.dtd">
<!--
    The FreeBSD Documentation Project

    $FreeBSD$
-->
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:its="http://www.w3.org/2005/11/its" version="5.0" xml:lang="es_ES">
  <info><title>Verificación independiente de la funcionalidad de IPsec en FreeBSD</title>
    

    <author><personname><firstname>David</firstname><surname>Honig</surname></personname><affiliation> <address><email>honig@sprynet.com</email></address> </affiliation></author>

    <pubdate>1999-05-03</pubdate>

    <legalnotice xml:id="trademarks" role="trademarks">
      <para>FreeBSD is a registered trademark of the FreeBSD Foundation.</para>
      <para>Motif, OSF/1, and UNIX are registered trademarks and IT DialTone and The Open Group are trademarks of The Open Group in the United States and other countries.</para>
      <para>Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations appear in this document, and the FreeBSD Project was aware of the trademark claim, the designations have been followed by the <quote>™</quote> or the <quote>®</quote> symbol.</para>
    </legalnotice>

    <releaseinfo xml:lang="en">$FreeBSD$</releaseinfo>

    <abstract>
      <para>Instaló IPsec y parece estar funcionando. ¿Cómo lo sabe? Describo un método para verificar de forma experimental que IPsec está funcionando.</para>
    </abstract>
  </info>

  <sect1 xml:id="problem">
    <title>El problema</title>

    <para>Primero, asumamos que ha <link linkend="ipsec-install">instalado <emphasis>IPsec</emphasis></link>. ¿Cómo sabe que está <link linkend="caveat">funcionando</link>? Claro, su conexión no funcionará si está mal configurada, y funcionará cuando finalmente lo haga bien. <citerefentry><refentrytitle>netstat</refentrytitle><manvolnum>1</manvolnum></citerefentry> la listará. ¿Pero puede confirmarlo de forma independiente?</para>
  </sect1>

  <sect1 xml:id="solution">
    <title>La solución</title>

    <para>Primero, alguna información teórica relevante sobre criptografía:</para>

    <orderedlist>
      <listitem>
	<para>Los datos cifrados se distribuyen uniformemente, es decir, tienen una entropía máxima por símbolo;</para>
      </listitem>

      <listitem>
	<para>Los datos sin procesar y sin comprimir suelen ser redundantes, es decir, tienen una entropía submáxima.</para>
      </listitem>
    </orderedlist>

    <para>Suponga que usted pudiera medir la entropía de los datos que van hacia -y desde- su interfaz de red. Entonces podría ver la diferencia entre los datos no cifrados y los cifrados. Esto sería verdad incluso si algunos de los datos en <quote>modo cifrado</quote> no lo estuvieran---ya que el encabezado IP más externo debe estarlo para que el paquete sea enrutable.</para>

    <sect2 xml:id="MUST">
      <title>MUST</title>

      <para>El <quote>Universal Statistical Test for Random Bit Generators</quote> (<link xlink:href="https://web.archive.org/web/20011115002319/http://www.geocities.com/SiliconValley/Code/4704/universal.pdf"><acronym>MUST</acronym></link>) de Ueli Maurer mide rápidamente la entropía de una muestra. Utiliza un algoritmo de compresión. <link linkend="code">El código se proporciona a continuación</link> para una variante que mide partes sucesivas (~cuarto de megabyte) de un archivo</para>
    </sect2>

    <sect2 xml:id="tcpdump">
      <title>Tcpdump</title>

      <para>También necesitamos una forma de capturar los datos de red sin procesar. Un programa llamado <citerefentry><refentrytitle>tcpdump</refentrytitle><manvolnum>1</manvolnum></citerefentry> le permite hacerlo, si tiene habilitada la interfaz de <emphasis>Berkeley Packet Filter</emphasis> en el <link linkend="kernel">archivo de configuración de su kernel</link>.</para>

      <para>El comando:</para>

      <screen><userinput>tcpdump -c 4000 -s 10000 -w <replaceable>dumpfile.bin</replaceable></userinput></screen>

      <para>capturará 4000 paquetes sin procesar en el fichero <replaceable>dumpfile.bin</replaceable>. En este ejemplo se capturarán hasta 10.000 bytes por paquete.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="experiment">
    <title>El experimento</title>

    <para>Aquí está el experimento:</para>

    <procedure>
      <step>
	<para>Abra una ventana a un host IPsec y otra ventana a un host inseguro.</para>
      </step>

      <step>
	<para>Ahora empiece a <link linkend="tcpdump">capturar paquetes</link>.</para>
      </step>

      <step>
	<para>En la ventana <quote>segura</quote>, ejecute el comando <trademark class="registered">UNIX</trademark> <citerefentry><refentrytitle>yes</refentrytitle><manvolnum>1</manvolnum></citerefentry>, que transmitirá el carácter <literal>y</literal>. Después de un rato, detenga el comando. Cambie a la ventana insegura, y repita. Espere un poco, detenga el comando.</para>
      </step>

      <step>
	<para>Ahora ejecute <link linkend="code">MUST</link> en los paquetes capturados. Debería ver algo como lo siguiente. Lo importante a tener en cuenta es que la conexión segura tiene un 93% (6,7) del valor esperado (7,18), y la conexión <quote>normal</quote> tiene un 29% (2,1) del valor esperado.</para>

    <screen><prompt>%</prompt> <userinput>tcpdump -c 4000 -s 10000 -w <replaceable>ipsecdemo.bin</replaceable></userinput>
<prompt>%</prompt> <userinput>uliscan <replaceable>ipsecdemo.bin</replaceable></userinput>

Uliscan 21 Dec 98
L=8 256 258560
Measuring file ipsecdemo.bin
Init done
Expected value for L=8 is 7.1836656
6.9396 --------------------------------------------------------
6.6177 -----------------------------------------------------
6.4100 ---------------------------------------------------
2.1101 -----------------
2.0838 -----------------
2.0983 -----------------</screen>
      </step>
    </procedure>
  </sect1>

    <sect1 xml:id="caveat">
      <title>Advertencia</title>

    <para>Este experimento muestra que IPsec <emphasis>parece</emphasis> estar distribuyendo los datos de la carga útil <emphasis>uniformemente</emphasis>, como debe hacerlo el cifrado. Sin embargo, el experimento aquí descrito <emphasis>puede no</emphasis> detectar muchas de las posibles fallas del sistema (para las cuales no tengo evidencias). Esto incluye la generación o intercambio de claves deficientes, datos o claves visibles para otros, uso de algoritmos débiles, subversión del kernel, etc. Estudie el código; conozca el código.</para>
  </sect1>

  <sect1 xml:id="IPsec">
    <title>IPsec---Definición</title>

    <para>Extensiones de seguridad del Protocolo de Internet para IPv4; requerido para IPv6. Un protocolo para negociar el cifrado y la autenticación a nivel de IP (host a host). SSL solo protege un socket de aplicación. <application>SSH</application> protege solo el login. <application>PGP</application> protege un archivo o mensaje específico. IPsec encripta todo entre dos hosts.</para>
  </sect1>

  <sect1 xml:id="ipsec-install">
    <title>Instalando IPsec</title>

    <para>La mayoría de las versiones modernas de FreeBSD soportan IPsec en su código base. Por lo tanto, deberá incluir la opción <option>IPSEC</option> en la configuración de su kernel y, después de recompilar y reinstalar el kernel, configure las conexiones de IPsec usando el comando <citerefentry><refentrytitle>setkey</refentrytitle><manvolnum>8</manvolnum></citerefentry>.</para>

    <para>En el <link xlink:href="@@URL_RELPREFIX@@/doc/es_ES.ISO8859-1/books/handbook/ipsec.html">Manual de FreeBSD</link> se proporciona una guía completa sobre cómo ejecutar IPsec en FreeBSD.</para>
  </sect1>

  <sect1 xml:id="kernel">
    <title>src/sys/i386/conf/KERNELNAME</title>

    <para>Esto debe estar presente en el archivo de configuración del kernel para capturar datos de red con <citerefentry><refentrytitle>tcpdump</refentrytitle><manvolnum>1</manvolnum></citerefentry>. Asegúrese de ejecutar <citerefentry><refentrytitle>config</refentrytitle><manvolnum>8</manvolnum></citerefentry> después de agregar esto, recompilar y reinstalar.</para>

    <programlisting>device	bpf</programlisting>
  </sect1>

    <sect1 xml:id="code">
      <title>Maurer's Universal Statistical Test (tamaño de bloque=8 bits)</title>

        <para>Puede encontrar el mismo código fuente en <link xlink:href="https://web.archive.org/web/20031204230654/http://www.geocities.com:80/SiliconValley/Code/4704/uliscanc.txt">este enlace</link>.</para>

<programlisting>/*
  ULISCAN.c   ---blocksize of 8

  1 Oct 98
  1 Dec 98
  21 Dec 98       uliscan.c derived from ueli8.c

  This version has // comments removed for Sun cc

  This implements Ueli M Maurer's "Universal Statistical Test for Random
  Bit Generators" using L=8

  Accepts a filename on the command line; writes its results, with other
  info, to stdout.

  Handles input file exhaustion gracefully.

  Ref: J. Cryptology v 5 no 2, 1992 pp 89-105
  also on the web somewhere, which is where I found it.

  -David Honig
  honig@sprynet.com

  Usage:
  ULISCAN filename
  outputs to stdout
*/

#define L 8
#define V (1&lt;&lt;L)
#define Q (10*V)
#define K (100   *Q)
#define MAXSAMP (Q + K)

#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

int main(argc, argv)
int argc;
char **argv;
{
  FILE *fptr;
  int i,j;
  int b, c;
  int table[V];
  double sum = 0.0;
  int iproduct = 1;
  int run;

  extern double   log(/* double x */);

  printf("Uliscan 21 Dec 98 \nL=%d %d %d \n", L, V, MAXSAMP);

  if (argc &lt; 2) {
    printf("Usage: Uliscan filename\n");
    exit(-1);
  } else {
    printf("Measuring file %s\n", argv[1]);
  }

  fptr = fopen(argv[1],"rb");

  if (fptr == NULL) {
    printf("Can't find %s\n", argv[1]);
    exit(-1);
  }

  for (i = 0; i &lt; V; i++) {
    table[i] = 0;
  }

  for (i = 0; i &lt; Q; i++) {
    b = fgetc(fptr);
    table[b] = i;
  }

  printf("Init done\n");

  printf("Expected value for L=8 is 7.1836656\n");

  run = 1;

  while (run) {
    sum = 0.0;
    iproduct = 1;

    if (run)
      for (i = Q; run &amp;&amp; i &lt; Q + K; i++) {
        j = i;
        b = fgetc(fptr);

        if (b &lt; 0)
          run = 0;

        if (run) {
          if (table[b] &gt; j)
            j += K;

          sum += log((double)(j-table[b]));

          table[b] = i;
        }
      }

    if (!run)
      printf("Premature end of file; read %d blocks.\n", i - Q);

    sum = (sum/((double)(i - Q))) /  log(2.0);
    printf("%4.4f ", sum);

    for (i = 0; i &lt; (int)(sum*8.0 + 0.50); i++)
      printf("-");

    printf("\n");

    /* refill initial table */
    if (0) {
      for (i = 0; i &lt; Q; i++) {
        b = fgetc(fptr);
        if (b &lt; 0) {
          run = 0;
        } else {
          table[b] = i;
        }
      }
    }
  }
}</programlisting>
  </sect1>
</article>
