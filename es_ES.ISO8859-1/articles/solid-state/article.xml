<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//FreeBSD//DTD DocBook XML V5.0-Based Extension//EN" "http://www.FreeBSD.org/XML/share/xml/freebsd50.dtd">
<!-- Copyright (c) 2001 The FreeBSD Documentation Project

     Redistribution and use in source (SGML DocBook) and 'compiled' forms
     (SGML, HTML, PDF, PostScript, RTF and so forth) with or without
     modification, are permitted provided that the following conditions
     are met:

      1. Redistributions of source code (SGML DocBook) must retain the above
         copyright notice, this list of conditions and the following
         disclaimer as the first lines of this file unmodified.

      2. Redistributions in compiled form (transformed to other DTDs,
         converted to PDF, PostScript, RTF and other formats) must reproduce
         the above copyright notice, this list of conditions and the
         following disclaimer in the documentation and/or other materials
         provided with the distribution.

     THIS DOCUMENTATION IS PROVIDED BY THE FREEBSD DOCUMENTATION PROJECT "AS
     IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
     THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NIK CLAYTON BE LIABLE FOR ANY
     DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
     ANY WAY OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF ADVISED OF THE
     POSSIBILITY OF SUCH DAMAGE.

     $FreeBSD$
-->
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:its="http://www.w3.org/2005/11/its" version="5.0" xml:lang="es_ES"> <info>
    <title>FreeBSD y las unidades de estado sólido (SSD)</title>

    <authorgroup>
      <author><personname> <firstname>John</firstname> <surname>Kozubik</surname> </personname> <affiliation> <address>
	    <email>john@kozubik.com</email>
	  </address> </affiliation></author>
    </authorgroup>

    <copyright><year>2001</year> <year>2009</year> <holder>The FreeBSD Documentation Project</holder></copyright>

    <legalnotice xml:id="trademarks" role="trademarks">
      <para>FreeBSD is a registered trademark of the FreeBSD Foundation.</para>
      <para>Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations appear in this document, and the FreeBSD Project was aware of the trademark claim, the designations have been followed by the <quote>™</quote> or the <quote>®</quote> symbol.</para>
    </legalnotice>

    
<legalnotice xml:id="legalnotice">
  <title>Copyright</title>

  <para>Redistribution and use in source (XML DocBook) and 'compiled' forms (XML, HTML, PDF, PostScript, RTF and so forth) with or without modification, are permitted provided that the following conditions are met:</para>

  <orderedlist>
    <listitem>
      <para>Redistributions of source code (XML DocBook) must retain the above copyright notice, this list of conditions and the following disclaimer as the first lines of this file unmodified.</para>
    </listitem>

    <listitem>
      <para>Redistributions in compiled form (transformed to other DTDs, converted to PDF, PostScript, RTF and other formats) must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
    </listitem>
  </orderedlist>

  <important>
    <para>THIS DOCUMENTATION IS PROVIDED BY THE FREEBSD DOCUMENTATION PROJECT "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE FREEBSD DOCUMENTATION PROJECT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para>
  </important>
</legalnotice>


    <pubdate xml:lang="en">$FreeBSD$</pubdate>

    <releaseinfo xml:lang="en">$FreeBSD$</releaseinfo>

    <abstract>
      <para>Este artículo trata sobre el uso de discos de estado sólido en FreeBSD para crear sistemas embebidos.</para>

      <para>Los sistemas embebidos tienen la ventaja de una mayor estabilidad por la falta de partes móviles (discos duros). Sin embargo, se debe tener en cuenta que generalmente el espacio disponible para el sistema y la durabilidad del medio de almacenamiento son menores.</para>

      <para>Los temas específicos que se abordarán incluyen los tipos y atributos de los dispositivos de estado sólido adecuados para su uso como disco en FreeBSD, las opciones del kernel que son interesantes para dicho entorno, los mecanismos de <filename>rc.initdiskless</filename> que automatizan el inicio de dichos sistemas, la necesidad de sistemas  de archivos de solo lectura y hacer sistemas de archivos desde cero. El artículo concluirá con algunas estrategias generales para entornos pequeños y de solo lectura de FreeBSD.</para>
    </abstract>
  </info>

  <sect1 xml:id="intro">
    <title>Dispositivos de disco de estado sólido</title>

    <para>El alcance de este artículo se limitará a dispositivos de estado sólido basados en memoria flash. La memoria flash es una memoria de estado sólido (sin partes móviles) que no es volátil (la memoria mantiene los datos incluso después de que se hayan desconectado todas las fuentes de alimentación). La memoria flash puede soportar un enorme impacto físico y es bastante rápida (las soluciones de memoria flash que se tratan en este artículo son un poco más lentas que un disco duro EIDE en operaciones de escritura y mucho más rápidos en operaciones de lectura). Un aspecto muy importante de la memoria flash, cuyas repercusiones se tratarán más adelante, es que cada sector tiene una capacidad de reescritura limitada. Solo puede escribir, borrar y volver a escribir en un sector de la memoria flash varias veces antes de que quede permanentemente inutilizable. Aunque muchos productos de memoria flash mapean automáticamente los bloques defectuosos y algunos incluso distribuyen las operaciones de escritura de manera uniforme en toda la unidad, la verdad es que hay un límite en la cantidad de escrituras que se pueden hacer al dispositivo. Las unidades más competitivas tienen entre 1.000.000 y 10.000.000 millones de escrituras por sector en sus especificaciones. Esta cifra varía debido a la temperatura del ambiente.</para>

    <para>Específicamente, discutiremos las unidades flash compactas compatibles con ATA, las cuales son bastante populares como medios de almacenamiento para cámaras digitales. Es de particular interés el hecho de que se conecten directamente al bus IDE y sean compatibles con el conjunto de comandos ATA. Por lo tanto, con un adaptador muy simple y de bajo coste, estos dispositivos se pueden conectar directamente al bus IDE en un ordenador. Una vez implementado de esta forma, los sistemas operativos como FreeBSD ven el dispositivo como un disco duro normal (aunque sea pequeño).</para>

    <para>Existen otras soluciones de disco de estado sólido, pero su coste, opacidad y su relativa dificultad de uso los colocan más allá del alcance de este artículo.</para>
  </sect1>

  <sect1 xml:id="kernel">
    <title>Opciones del kernel</title>

    <para>Algunas opciones del kernel son de especial interés para aquellos que crean un sistema FreeBSD embebido.</para>

    <para>Todos los sistemas FreeBSD embebidos que utilizan memorias flash como disco para el sistema estarán interesados en utilizar discos y sistemas de archivos cargados en memoria. Debido al número limitado de escrituras que se pueden hacer en la memoria flash, el disco y los sistemas de archivos probablemente se montarán como de solo lectura. En este entorno, los sistemas de archivos como <filename>/tmp</filename> y <filename>/var</filename> se montan como sistemas de archivos en memoria
para permitir que el sistema cree registros y actualice los contadores y los archivos temporales. Los sistemas de archivos en memoria son un componente crítico para una implementación exitosa de FreeBSD en dispositivos de estado sólido.</para>

    <para>Asegúrese de que existen las siguientes líneas en el archivo de configuración del kernel:</para>

    <programlisting>options         MFS             # sistema de archivos de memoria
options         MD_ROOT         # el dispositivo md puede ser usado potencialmente como dispositivo root
pseudo-device   md              # disco de memoria</programlisting>
  </sect1>

  <sect1 xml:id="ro-fs">
    <title>El subsistema <literal>rc</literal> y los sistemas de archivos de solo lectura</title>

    <para>La inicialización posterior al arranque de un sistema FreeBSD embebido es controlada por <filename>/etc/rc.initdiskless</filename>.</para>

    <para><filename>/etc/rc.d/var</filename> monta <filename>/var</filename> como sistema de archivos en memoria, crea una listado configurable de directorios en <filename>/var</filename> con el comando <citerefentry><refentrytitle>mkdir</refentrytitle><manvolnum>1</manvolnum></citerefentry> y cambia los modos en algunos de esos directorios. En la ejecución de <filename>/etc/rc.d/var</filename>, otra variable de <filename>rc.conf</filename> entra en juego: <literal>varsize</literal>. <filename>/etc/rc.d/var</filename> crea una partición <filename>/var</filename> basándose en el valor de la variable en <filename>rc.conf</filename>:</para>

    <programlisting>varsize=8192</programlisting>

    <para>Recuerde que por defecto este valor está en sectores.</para>

    <para>El hecho de que <filename>/var</filename> sea un sistema de archivos de lectura y escritura es una distinción importante, ya que la partición <filename>/</filename> (y cualquier otra partición que pueda tener en su medio flash) se debe montar como solo lectura. Recuerde que en la <xref linkend="intro"/> detallamos las limitaciones de la memoria flash, específicamente, la capacidad de escritura limitada. La importancia de no montar sistemas de archivos en medios flash de lectura-escritura, y la importancia de no usar swap, no es exagerada. Un archivo swap en un sistema concurrido puede deteriorar un medio flash en menos de un año. Un logging intenso o la creación y destrucción de archivos temporales puede hacer lo mismo. Por lo tanto, además de quitar la entrada <literal>swap</literal> de su <filename>/etc/fstab</filename>, también debe cambiar el campo Options para cada sistema de archivos a <literal>ro</literal> de la siguiente forma:</para>

    <programlisting># Device                Mountpoint      FStype  Options         Dump    Pass#
/dev/ad0s1a             /               ufs     ro              1       1</programlisting>

    <para>Algunas aplicaciones en el sistema comenzarán a fallar inmediatamente como resultado de este cambio. Por ejemplo, cron no se ejecutará correctamente al faltar las cron tabs en <filename>/var</filename> creadas por <filename>/etc/rc.d/var</filename>, además, syslog y dhcp encontrarán problemas como resultado de montar el sistema de archivos como solo lectura y la falta de elementos en <filename>/var</filename> que ha creado <filename>/etc/rc.d/var</filename>. Sin embargo, esto son solo problemas temporales y se tratan, junto con las soluciones para la ejecución de otros programas de uso común en la <xref linkend="strategies"/>.</para>

    <para>Una cosa importante a recordar es que un sistema de archivos que fue montado como solo lectura con <filename>/etc/fstab</filename> puede ser montado como lectura-escrita en cualquier momento ejecutando el comando:</para>

    <screen><prompt>#</prompt> <userinput>/sbin/mount -uw <replaceable>partition</replaceable></userinput></screen>

    <para>y se puede cambiar de nuevo a solo lectura con el comando:</para>

    <screen><prompt>#</prompt> <userinput>/sbin/mount -ur <replaceable>partition</replaceable></userinput></screen>
  </sect1>

  <sect1>
    <title>Construyendo un sistema de archivos desde cero</title>

    <para>Como las tarjetas compact-flash compatibles con ATA son vistas por FreeBSD como discos duros IDE estándar, en teoría se podría instalar FreeBSD desde la red usando floppies kern y mfsroot o desde un CD.</para>

    <para>Sin embargo, incluso una pequeña instalación de FreeBSD que utilice procedimientos normales de instalación puede producir un sistema con un tamaño superior a 200 megabytes. Como la mayoría de la gente utilizará dispositivos de memoria flash más pequeños (128 megabytes se consideran razonablemente grandes - 32 o incluso 16 megabytes son comunes), una instalación utilizando mecanismos normales no será posible - simplemente no hay suficiente espacio en el disco incluso para las instalaciones convencionales más pequeñas.</para>

    <para>La forma más fácil de superar esta limitación de espacio es instalar FreeBSD utilizando medios convencionales en un disco duro normal. Una vez finalizada la instalación, reduzca el sistema operativo a un tamaño que se ajuste a su medio flash,
y comprima el sistema de archivos completo en un fichero tar. Los siguientes pasos le guiarán en el proceso de preparación de una memoria flash para su sistema de archivos comprimido en un fichero tar. Recuerde que no estamos ejecutando una instalación normal, luego las operaciones como particionado, etiquetado, creación del sistema de archivos, etc. deben ejecutarse manualmente. Además de los disquetes kern y mfsroot, también necesitará usar el disquete fixit.</para>

    <procedure>
      <step>
	<title>Particionando su dispositivo flash</title>

	<para>Después de arrancar con los disquetes kern y mfsroot, seleccione <literal>custom</literal> en el menú de instalación. En el menú de instalación personalizado, seleccione <literal>partition</literal>. En el menú de particiones, debe borrar todas las particiones existentes mediante la tecla <keycap>d</keycap>. Después de eliminar todas las particiones existentes, cree una partición utilizando la tecla <keycap>c</keycap> y acepte el valor predeterminado para el tamaño de la partición. Cuando se le pregunte el tipo de partición, asegúrese de que el valor esté establecido en <literal>165</literal>. Ahora escriba la tabla de particiones en el disco presionando <keycap>w</keycap> (es una opción oculta en esta pantalla). Si está utilizando una tarjeta compact flash compatible con ATA, debe elegir el FreeBSD Boot Manager. Ahora presione <keycap>q</keycap> para salir del menú de partición. Verá de nuevo el menú del gestor de arranque - repita la opción hecha anteriormente.</para>
      </step>

      <step>
	<title>Creación de sistemas de archivos en su dispositivo de memoria flash</title>

	<para>Salga del menú de instalación personalizado y, en el menú de instalación principal, elija la opción <literal>fixit</literal>. Después de entrar en el entorno de fixit, escriba el siguiente comando:</para>

	<screen><prompt>#</prompt> <userinput>disklabel -e /dev/ad0c</userinput></screen>

	<para>En este punto, habrá accedido al editor vi guiado por el comando disklabel. A continuación, debe agregar una línea <literal>a:</literal> al final del archivo. La línea <literal>a:</literal> debería ser similar a la siguiente:</para>

	<programlisting>a:      <replaceable>123456</replaceable>  0       4.2BSD  0       0</programlisting>

	<para>Donde <replaceable>123456</replaceable> es exactamente el mismo número que la entrada <literal>c:</literal>. Básicamente, está duplicando la línea <literal>c:</literal> como <literal>a:</literal>, asegúrese de que el fstype es <literal>4.2BSD</literal>. Guarde el archivo y ciérrelo.</para>

	<screen><prompt>#</prompt> <userinput>disklabel -B -r /dev/ad0c</userinput>
<prompt>#</prompt> <userinput>newfs /dev/ad0a</userinput></screen>
      </step>

      <step>
	<title>Colocando su sistema de archivos en el medio flash</title>

	<para>Monte el medio flash recién preparado:</para>

	<screen><prompt>#</prompt> <userinput>mount /dev/ad0a /flash</userinput></screen>

	<para>Coloque esta máquina en la red para poder transferir nuestro archivo tar y extraerlo en nuestro sistema de archivos del medio flash. Un ejemplo de cómo hacerlo es:</para>

	<screen><prompt>#</prompt> <userinput>ifconfig xl0 192.168.0.10 netmask 255.255.255.0</userinput>
<prompt>#</prompt> <userinput>route add default 192.168.0.1</userinput></screen>

	<para>Ahora que la máquina está en la red, transfiera su archivo tar. Es posible que se enfrente a un pequeño dilema en este punto - si su memoria flash tiene por ejemplo 128 megabytes, y su archivo tar tiene más de 64 megabytes, no podrá tener el archivo tar en el medio de flash al mismo tiempo que realiza la descompresión - se quedará sin espacio. Una solución a este problema, si está utilizando FTP, es descomprimir el archivo mientras se transfiere por FTP. Si realiza la transferencia de esta forma, nunca tendrá el archivo tar y los contenidos en el disco al mismo tiempo:</para>

	<screen><prompt>ftp&gt;</prompt> <userinput>get tarfile.tar "| tar xvf -"</userinput></screen>

	<para>Si su archivo tar está comprimido en gzip, puede hacerlo de esta forma:</para>

	<screen><prompt>ftp&gt;</prompt> <userinput>get tarfile.tar "| zcat | tar xvf -"</userinput></screen>

	<para>Una vez que el contenido de su sistema de archivos comprimido por tar está en el sistema de archivos de la memoria flash, puede desmontar la memoria flash y reiniciar:</para>

	<screen><prompt>#</prompt> <userinput>cd /</userinput>
<prompt>#</prompt> <userinput>umount /flash</userinput>
<prompt>#</prompt> <userinput>exit</userinput></screen>

	<para>Suponiendo que configuró correctamente su sistema de archivos cuando lo construyó en su disco duro normal, (con sus sistemas de archivos montados en modo solo lectura, y con las opciones necesarias compiladas en el kernel) ahora se debería iniciar con éxito su sistema embebido FreeBSD.</para>
      </step>
    </procedure>
  </sect1>

  <sect1 xml:id="strategies">
    <title>Estrategias para entornos pequeños y de solo lectura</title>

    <para>En la <xref linkend="ro-fs"/>, se indicó que el sistema de archivos <filename>/var</filename> construido por <filename>/etc/rc.d/var</filename> y la presencia de un sistema de archivos raíz montado en modo solo lectura causa problemas con muchos paquetes de software utilizados en FreeBSD. En este artículo, se proporcionarán sugerencias para ejecutar con éxito cron, syslog, la instalación de ports y el servidor web Apache.</para>

    <sect2>
      <title>Cron</title>

      <para>Tras el arranque, <filename>/var</filename> será llenado con <filename>/etc/rc.d/var</filename> usando la lista disponible en <filename>/etc/mtree/BSD.var.dist</filename>, por lo que <filename>cron</filename>, <filename>cron/tabs</filename>, <filename>at</filename> y algunos otros directorios estándar son creados.</para>

      <para>Sin embargo, esto no resuelve el problema de mantener las cron tabs entre los reinicios. Cuando el sistema se reinicie, el sistema de archivos <filename>/var</filename> cargado en memoria desaparecerá y todas las cron tabs que tenga también desaparecerán. Por lo tanto, una solución sería crear las cron tabs para los usuarios que las necesiten; monte su sistema de archivos raíz <filename>/</filename> como lectura-escritura y copie las cron tabs a un lugar seguro, como <filename>/etc/tabs</filename>, a continuación, añada una entrada al final de <filename>/etc/rc.initdiskless</filename> que copie estas crontabs a <filename>/var/cron/tabs</filename> después de que el directorio se cree durante el inicio del sistema. Es posible que también deba añadir una entrada que cambie los modos y permisos en los directorios creados y en los archivos copiados con <filename>/etc/rc.initdiskless</filename>.</para>
    </sect2>

    <sect2>
      <title>Syslog</title>

      <para><filename>syslog.conf</filename> especifica las ubicaciones de ciertos ficheros de log que hay en <filename>/var/log</filename>. Estos archivos no son creados por <filename>/etc/rc.d/var</filename> durante la inicialización del sistema. Por lo tanto, en algún lugar de <filename>/etc/rc.d/var</filename>, justo después de la sección que crea los directorios en <filename>/var</filename>, tendrá que añadir algo como esto:</para>

      <screen><prompt>#</prompt> <userinput>touch /var/log/security /var/log/maillog /var/log/cron /var/log/messages</userinput>
<prompt>#</prompt> <userinput>chmod 0644 /var/log/*</userinput></screen>
    </sect2>

    <sect2>
      <title>Instalación de ports</title>

      <para>Antes de analizar los cambios necesarios para utilizar con éxito el árbol de ports, es necesario recordar que su sistema de archivos en el medio flash es de solo lectura. Dado que es de solo lectura, necesitará montarlo temporalmente en modo lectura-escritura utilizando la sintaxis que se muestra en la <xref linkend="ro-fs"/>. Siempre debe volver a montar estos sistemas de archivos en modo solo lectura cuando haya terminado cualquier mantenimiento - las escrituras innecesarias en el medio flash podrían acortar considerablemente su vida útil.</para>

      <para>Para que sea posible entrar en el directorio de ports y ejecutar con éxito el comando <command>make</command> <buildtarget>install</buildtarget>, debemos crear un directorio para los paquetes en un sistema de archivos que no se encuentre en la memoria para que mantenga nuestros paquetes durante los reinicios. Como es necesario montar sus sistemas de archivos en modo lectura-escritura para la instalación de un paquete, es apropiado suponer que también se puede usar un área en el medio flash para escribir la información del paquete.</para>

      <para>Primero, cree el directorio para la base de datos de los paquetes. Normalmente se encuentra en <filename>/var/db/pkg</filename>, pero no podemos colocarlo allí ya que desaparecerá cada vez que se inicie el sistema.</para>

      <screen><prompt>#</prompt> <userinput>mkdir /etc/pkg</userinput></screen>

      <para>Ahora, agregue una línea al archivo <filename>/etc/rc.d/var</filename> que enlace <filename>/etc/pkg</filename> a <filename>/var/db/pkg</filename>. Un ejemplo:</para>

      <screen><prompt>#</prompt> <userinput>ln -s /etc/pkg /var/db/pkg</userinput></screen>

      <para>Ahora, cada vez que monte su sistema de archivos en modo lectura-escritura e instale un paquete, el comando <command>make</command> <buildtarget>install</buildtarget> funcionará, y la información del paquete se escribirá correctamente en <filename>/etc/pkg</filename> (porque el sistema de archivos, en ese momento, estará montado en modo lectura-escritura) que siempre estará disponible para el sistema operativo como <filename>/var/db/pkg</filename>.</para>
    </sect2>

    <sect2>
      <title>Servidor Web Apache</title>

      <note>
	<para>Los pasos de esta sección solo son necesarios si Apache está configurado para escribir su pid o registro log fuera de <filename>/var</filename>. Por defecto, Apache guarda su archivo pid en <filename>/var/run/httpd.pid</filename> y sus registros de log en <filename>/var/log</filename>.</para>
      </note>

      <para>Se supone que Apache guarda sus archivos de logs en un directorio <filename><replaceable>apache_log_dir</replaceable></filename> fuera de <filename>/var</filename>. Cuando este directorio reside en un sistema de archivos de solo lectura, Apache no puede guardar ningún archivo de log y puede tener problemas para funcionar. Si es así, debe agregar un nuevo directorio al listado de directorios en <filename>/etc/rc.d/var</filename> a crear en <filename>/var</filename> y vincular <filename><replaceable>apache_log_dir</replaceable></filename> a <filename>/var/log/apache</filename>. También es necesario establecer permisos y propietarios a este nuevo directorio.</para>

      <para>En primer lugar, agregue el directorio <literal>log/apache</literal> a la lista de directorios que se crearán en <filename>/etc/rc.d/var</filename>.</para>

      <para>En segundo lugar, agregue estos comandos a <filename>/etc/rc.d/var</filename> después de la sección de creación del directorio:</para>

      <screen><prompt>#</prompt> <userinput>chmod 0774 /var/log/apache</userinput>
<prompt>#</prompt> <userinput>chown nobody:nobody /var/log/apache</userinput></screen>

      <para>Por último, elimine el directorio <filename><replaceable>apache_log_dir</replaceable></filename> y reemplácelo por un enlace:</para>

      <screen><prompt>#</prompt> <userinput>rm -rf <replaceable>apache_log_dir</replaceable></userinput>
<prompt>#</prompt> <userinput>ln -s /var/log/apache <replaceable>apache_log_dir</replaceable></userinput></screen>
    </sect2>
  </sect1>
</article>
