<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE report PUBLIC "-//FreeBSD//DTD FreeBSD XML Database for
  Status Report//EN"
  "http://www.FreeBSD.org/XML/share/xml/statusreport.dtd" >

<!-- $FreeBSD$ -->

<report>
  <date>
    <month>January-March</month>

    <year>2015</year>
  </date>

  <section>
    <title>Introduction</title>

     <?ignore
    <p><strong>This is a draft of the January&ndash;March 2015
      status report.  Please check back after it is finalized, and
      an announcement email is sent to the &os;-Announce mailing
      list.</strong></p>
     ?>

    <p>This report covers &os;-related projects between January and
      March 2015.  This is the first of four reports planned for
      2015.</p>

    <p>The first quarter of 2015 was another productive quarter for
      the &os; project and community.  &os; is being used in research
      projects, and those projects are making their way back into &os;
      as new and exciting features, bringing improved network performance
      and security features to the system.  Work continues to improve
      support for more architectures and architecture features,
      including progress towards the goal of making ARM (32- and 64-bit) a
      Tier 1 platform in &os; 11.  The toolchain is receiving updates, with
      new versions of clang/LLVM in place, migrations to ELF Tool Chain
      tools, and updates to the LLDB and gdb debuggers.  Work by ports
      teams and kernel developers is maintaining and improving the state of
      &os; as a desktop operating system.  The pkg team is continuing to
      make binary packages easier to use and upgrade.</p>

    <p>Thanks to all the reporters for the excellent work!</p>

    <p>The deadline for submissions covering the period from April
      to June 2015 is July 7th, 2015.</p>
  </section>

  <category>
    <name>team</name>

    <description>&os; Team Reports</description>
  </category>

  <category>
    <name>proj</name>

    <description>Projects</description>
  </category>

  <category>
    <name>kern</name>

    <description>Kernel</description>
  </category>

  <category>
    <name>arch</name>

    <description>Architectures</description>
  </category>

  <category>
    <name>bin</name>

    <description>Userland Programs</description>
  </category>

  <category>
    <name>ports</name>

    <description>Ports</description>
  </category>

  <category>
    <name>doc</name>

    <description>Documentation</description>
  </category>

  <category>
    <name>misc</name>

    <description>Miscellaneous</description>
  </category>

  <project cat='kern'>
    <title>Address Space Layout Randomization (ASLR)</title>

    <contact>
      <person>
	<name>
	  <given>Shawn</given>
	  <common>Webb</common>
	</name>
	<email>shawn.webb@hardenedbsd.org</email>
      </person>
      <person>
	<name>
	  <given>Oliver</given>
	  <common>Pinter</common>
	</name>
	<email>oliver.pinter@hardenedbsd.org</email>
      </person>
    </contact>

    <links>
      <url href="https://hardenedbsd.org/">HardenedBSD</url>
      <url href="https://lists.freebsd.org/pipermail/freebsd-current/2015-February/054669.html">ASLR Call For Testing</url>
      <url href="https://reviews.freebsd.org/D473">FreeBSD Code Review of ASLR</url>
    </links>

    <body>
      <p>Address Space Layout Randomization (ASLR) is a
	computer security technique that aids in mitigating
	low-level vulnerabilities such as buffer overflows.
	ASLR randomizes the memory layout of running
	applications to prevent an attacker from knowing where
	a given exploitable vulnerability lies in memory.</p>

      <p>We have been working hard the last few months to ensure
	the robustness of our ASLR implementation.  We have
	written a manpage and updated the patch on
	FreeBSD's code review system (Phabricator).  Our ASLR
	implementation is in use by the HardenedBSD team
	in production environments and is performing
	robustly.</p>

      <p>The next task is to compile the base system applications as
	Position-Independent Executables (PIEs).  For
	ASLR to be effective, applications must be compiled as
	PIEs to allow the main binary, as well as shared libraries, to be
	located at random addresses.  It is likely that this part will take a
	long time to accomplish, given the complexity surrounding
	building the libraries in the base system.  Even if applications
	are not compiled as PIEs, having ASLR available still
	helps those applications (like HardenedBSD's secadm)
	which force compilation as PIE for themselves.</p>
    </body>

    <sponsor>SoldierX</sponsor>

    <help>
      <task>
	<p>Test our patch against 11-CURRENT.</p>
      </task>
    </help>
  </project>

  <project cat='ports'>
    <title>Xfce on &os;</title>

    <contact>
      <person>
	<name>&os; Xfce Team</name>
	<email>xfce@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/Xfce" />
    </links>

    <body>
      <p>Xfce is a free software desktop environment for Unix and
	Unix-like platforms, such as &os;.  It aims to be fast and
	lightweight, while still being visually appealing and easy to
	use.</p>

      <p>This quarter was an exciting time for the Xfce Team.  We
	imported version 4.12 of the Xfce desktop environment into
	the ports tree, after more than two years of development.</p>

      <p>Overall, we have updated the following ports:</p>

      <ul>
	<li>Xfce core (4.12)</li>
	<li><tt>audio/xfce4-mpc-plugin</tt> (0.4.5)</li>
	<li><tt>deskutils/xfce4-tumbler</tt> (0.1.31</li>
	<li><tt>deskutils/xfce4-xkb-plugin</tt> (0.7.1)</li>
	<li><tt>editors/mousepad</tt> (0.4.0)</li>
	<li><tt>graphics/ristretto</tt> (0.8.0)</li>
	<li><tt>multimedia/xfce4-parole</tt> (0.8.0)</li>
	<li><tt>sysutils/garcon</tt> (0.4.0)</li>
	<li><tt>sysutils/xfce4-diskperf-plugin</tt> (2.5.5)</li>
	<li><tt>sysutils/xfce4-fsguard-plugin</tt> (1.0.2)</li>
	<li><tt>sysutils/xfce4-power-manager</tt> (1.4.4)</li>
	<li><tt>sysutils/xfce4-wavelan-plugin</tt> (0.5.12)</li>
	<li><tt>textproc/xfce4-dict-plugin</tt> (0.7.1)</li>
	<li><tt>www/xfce4-smartbookmark-plugin</tt> (0.4.6)</li>
	<li><tt>x11/libexo</tt> (0.10.4)</li>
	<li><tt>x11-clocks/xfce4-timer-out-plugin</tt> (1.0.2)</li>
	<li><tt>x11-fm/thunar</tt> (1.6.6)</li>
	<li><tt>x11-themes/gtk-xfce-engine</tt> (3.2.0)</li>
      </ul>

      <p>At the same time we switched to the USES framework, and a new
	plugin has been added, called
	<tt>audio/xfce4-pulseaudio-plugin</tt>.</p>

      <p>We also follow the unstable releases (available in our
	experimental repository) of:</p>

      <ul>
	<li><tt>x11/xfce4-dashboard</tt> (0.3.91)</li>
	<li><tt>x11/xfce4-notes-plugin</tt> (1.8.0 beta)</li>
      </ul>

      <p>The following documentation patches are ready:</p>
      <ul>
	<li><a href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=197878">PR197878</a>,
	  Update Xfce section in Porter's Handbook</li>
	<li><a href="https://reviews.freebsd.org/D1305">D1305</a>, FAQ</li>
      </ul>
    </body>

    <help>
      <task>
	<p>Work on support for Compact Disc Digital Audio (CD-DA) in
	  <tt>multimedia/xfce4-parole</tt>.</p>
      </task>

      <task>
	<p>Add a new property (through xfconf-query) to
	  allow users to change the greyscale value of quicklaunch
	  icons in <tt>x11/xfce4-dashboard</tt> (this feature is only available
	  in the unstable release).</p>
      </task>
    </help>
  </project>

  <project cat='proj'>
    <title>Lua boot loader</title>

    <contact>
      <person>
	<name>
	  <given>Rui</given>
	  <common>Paulo</common>
	</name>
	<email>rpaulo@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Pedro</given>
	  <common>Souza</common>
	</name>
	<email>pedrosouza@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Wojciech</given>
	  <common>Koszek</common>
	</name>
	<email>wkoszek@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://svnweb.freebsd.org/base/projects/lua-bootloader/" />
    </links>

    <body>
      <p>The Lua boot loader project is in its final stage and
	it can be used on x86 already.  The aim of this project is to
	replace the Forth boot loader with a Lua boot loader.  All the
	scripts were re-written in Lua and are available in
	sys/boot/lua.  Once all the Forth features have been tested
	and the boot menus look exactly like in Forth, we will
	start merging this project to &os; HEAD.  Both loaders can
	co-exist in the source tree with no problems because a
	pluggable loader was introduced for this purpose.</p>

      <p>The project was initially started by Wojciech
	Koszek, and Pedro Souza wrote most of the Lua code last year in
	his Google Summer of Code project.</p>

      <p>To build a Lua boot loader just use:</p>
<pre>WITH_LUA=y
WITHOUT_FORTH=y</pre>
    </body>

    <help>
      <task>
	<p>Feature/appearance parity with Forth.</p>
      </task>

      <task>
	<p>Investigate use of floating point by Lua.</p>
      </task>

      <task>
	<p>Test the EFI Lua loader.</p>
      </task>

      <task>
	<p>Test the U-Boot Lua loader.</p>
      </task>

      <task>
	<p>Test the serial console.</p>
      </task>
    </help>
  </project>

  <project cat='doc'>
    <title>More Michael Lucas &os; books</title>

    <contact>
      <person>
	<name>
	  <given>Michael</given>
	  <common>Lucas</common>
	</name>
	<email>mwlucas@michaelwlucas.com</email>
      </person>
    </contact>

    <links>
      <url href="http://blather.michaelwlucas.com/archives/2352" />
    </links>

    <body>
      <p>The &os; storage books are proceeding slower than expected.
	This is a complex project.</p>

      <p>It appears that ZFS will be a two-book topic.  The
	first book will cover basic ZFS, while the second will cover
	advanced cases like live and cold replication, sharing,
	performance, and using ZFS on top of less common GEOM
	providers.  More details can be found in the links section.</p>

      <p>Allan Jude (allanjude@) is co-authoring the ZFS
	books.  Little did he know of the magnitude of the task
	ahead of him when he signed up....</p>
    </body>
  </project>

  <project cat='proj'>
    <title>Opaque ifnet</title>

    <contact>
      <person>
	<name>
	  <given>Gleb</given>
	  <common>Smirnoff</common>
	</name>
	<email>glebius@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/projects/ifnet">Project wiki page</url>
    </links>

    <body>
      <p>This project aims to design a new KPI for network drivers
	that would allow the network stack to evolve without
	breaking compatibility with older drivers.  The core idea is to
	hide <tt>struct ifnet</tt> from drivers, giving the
	project the name "opaque ifnet".  However, the
	project will include more changes than just hiding the
	struct's definition.</p>

      <p>At present, the new KPI has been prototyped, most of the
	important parts of network stack have been modified
	appropriately, and several drivers have been converted to the new
	KPI.</p>

      <p>The project needs more manpower, since there are many
	network drivers in the tree, with a total of 245 sites where a
	<tt>struct ifnet</tt> is allocated.</p>
    </body>

    <sponsor>Netflix</sponsor>

    <help>
      <task>
	<p>Convert more drivers.</p>
      </task>
    </help>
  </project>

  <project cat='team'>
    <title>Ports Collection</title>

    <contact>
      <person>
	<name>
	  <given>Frederic</given>
	  <common>Culot</common>
	</name>
	<email>portmgr-secretary@FreeBSD.org</email>
      </person>

      <person>
	<name>Port Management Team</name>
	<email>portmgr@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.FreeBSD.org/ports/" />
      <url
href="http://www.freebsd.org/doc/en_US.ISO8859-1/articles/contributing/ports-contributing.html" />
      <url href="http://portsmon.freebsd.org/index.html" />
      <url href="http://portscout.freebsd.org/" />
      <url href="http://www.freebsd.org/portmgr/index.html" />
      <url href="http://blogs.freebsdish.org/portmgr/" />
      <url href="http://www.twitter.com/freebsd_portmgr/" />
      <url href="http://www.facebook.com/portmgr" />
      <url href="http://plus.google.com/communities/108335846196454338383" />
    </links>

    <body>
      <p>As of the end of Q1 the ports tree holds almost 25,000
	ports, and the PR count is just over 1,500.  The tree saw
	more activity than during the previous quarter, with
	almost 7,000 commits performed by 163 active committers.
	The number of problem reports closed also increased by
	about 20%, with nearly 2,000 PRs closed!</p>

      <p>In Q1 two new developers were granted a ports commit bit
	(jbeich@ and brd@) and one bit was taken in for safekeeping
	(rafan@, on his request).</p>

      <p>On the management side, decke@ decided to step down from
	his portmgr duties in February.  No other changes were made
	to the team during Q1.</p>

      <p>This quarter also saw the release of the first quarterly
	branch of the year, 2015Q1.  On this branch, 140 changes were
	applied by 35 committers.</p>

      <p>On the QA side, 29 exp-runs were performed to validate sensitive
	updates or cleanups.</p>
    </body>

    <help>
      <task>
	<p>As during the previous quarter a tremendous amount
	  of work was done on the tree to update major ports and to
	  close even more PRs than in 2014Q4.  However, we sometimes
	  lag behind with regards to documentation, so volunteers
	  are welcome to help on this important task.</p>
      </task>
    </help>

  </project>

  <project cat='proj'>
    <title>bhyve</title>

    <contact>
      <person>
	<name>
	  <given>Peter</given>
	  <common>Grehan</common>
	</name>
	<email>grehan@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Neel</given>
	  <common>Natu</common>
	</name>
	<email>neel@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>John</given>
	  <common>Baldwin</common>
	</name>
	<email>jhb@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Tycho</given>
	  <common>Nightingale</common>
	</name>
	<email>tychon@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Allan</given>
	  <common>Jude</common>
	</name>
	<email>allanjude@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Alexander</given>
	  <common>Motin</common>
	</name>
	<email>mav@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.bhyve.org">bhyve FAQ and talks</url>
    </links>

    <body>
      <p>bhyve is a hypervisor that runs on the FreeBSD/amd64
	platform.  At present, it runs FreeBSD (8.x or later), Linux
	i386/x64, OpenBSD i386/amd64, and NetBSD/amd64 guests.  Current
	development is focused on enabling additional guest operating
	systems and implementing features found in other hypervisors.</p>

      <p>Peter Grehan did a status update at bhyvecon 2015 in
	Tokyo.  The slides are available at <a
	href="http://bhyvecon.org/bhyvecon2015-Peter.pdf">
	http://bhyvecon.org/bhyvecon2015-Peter.pdf</a>.</p>

      <p>Mihai Carabas presented the results of his GSoC project
	on implementing instruction caching in bhyve at AsiaBSDCon
	2015 in Tokyo.  The slides are available at <a
	href="http://people.freebsd.org/~neel/bhyve/bhyve-cache-emul-slides.pdf">
	http://people.freebsd.org/~neel/bhyve/bhyve-cache-emul-slides.pdf</a>.</p>

      <p>A number of improvements were made to bhyve this quarter:</p>

      <ul>
	<li>The RTC device model can now be instructed to keep UTC time
	  instead of localtime.  This is useful for guests like OpenBSD
	  that expect the RTC to keep UTC time.</li>
	<li>The virtio-blk device now does I/O asynchronously without
	  blocking the vcpu thread that initiated the I/O.</li>
	<li>The virtio-blk and ahci-hd devices are now able to execute
	  multiple I/O requests in parallel.  This can significantly
	  boost virtual disk throughput.</li>
	<li>The ahci-hd device emulation advertises TRIM to the guest
	  if the backend device supports it (e.g., ZVOL).</li>
	<li>The virtio-blk and ahci-hd devices now advertise the proper
	  logical and physical block size of the backend device or file.</li>
      </ul>
    </body>

    <help>
      <task>
	<p>Improve documentation.</p>
      </task>

      <task>
	<p>bhyveucl is a tool for starting bhyve instances based on a
	  UCL formatted config file.  More information is at
	  <a
	    href="https://github.com/allanjude/bhyveucl">https://github.com/allanjude/bhyveucl</a></p>
      </task>

      <task>
	<p>Add support for virtio-scsi.</p>
      </task>

      <task>
	<p>Flexible networking backends such as wanproxy and vhost-net.</p>
      </task>

      <task>
	<p>Move to a single process model, instead of bhyveload
	  and bhyve.</p>
      </task>

      <task>
	<p>Support running bhyve as non-root.</p>
      </task>

      <task>
	<p>Add filters for popular VM file formats (VMDK, VHD,
	  QCOW2).</p>
      </task>

      <task>
	<p>Implement an abstraction layer for video (no X11 or SDL in
	  the base system).</p>
      </task>

      <task>
	<p>Suspend/resume support.</p>
      </task>

      <task>
	<p>Live Migration.</p>
      </task>

      <task>
	<p>Nested VT-x support (bhyve in bhyve).</p>
      </task>

      <task>
	<p>Support for other architectures (ARM, MIPS, PPC).</p>
      </task>
    </help>
  </project>

  <project cat='proj'>
    <title>Jenkins Continuous Integration for &os;</title>

    <contact>
      <person>
	<name>
	  <given>Craig</given>
	  <common>Rodrigues</common>
	</name>
	<email>rodrigc@FreeBSD.org</email>
      </person>

      <person>
	<name>Jenkins Administrators</name>
	<email>jenkins-admin@FreeBSD.org</email>
      </person>

      <person>
	<name>&os; Testing</name>
	<email>freebsd-testing@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://jenkins.freebsd.org">The Jenkins CI server in the &os; cluster</url>
      <url href="http://www.cloud9ers.com/">Cloud9ers</url>
      <url href="https://wiki.ubuntu.com/AhmedKamal">Ahmed Kamal</url>
      <url href="https://github.com/saltstack/salt/pulls?q=is%3Apr+author%3Akim0">Ahmed's contributions to SaltStack</url>
      <url href="http://julipedia.meroh.net/2015/02/kyua-turns-parallel.html">Kyua turns parallel</url>
      <url href="https://github.com/jenkinsci/multiple-scms-plugin/commits?author=rodrigc">Jenkins Multiple SCM's plugin fixes</url>
      <url href="https://lists.freebsd.org/pipermail/freebsd-toolchain/2015-March/001545.html">GCC 4.9 problems</url>
      <url href="https://wiki.freebsd.org/ExternalToolchain">External Toolchain Support</url>
    </links>

    <body>
      <p>The Jenkins Continuous Integration and Testing
	project has been helping to improve the quality of &os;.
	Since the last status report, we have quickly found commits
	which caused build breakage or test failures.  &os; developers
	saw these problems and quickly fixed them.  Some of the
	highlights include:</p>

      <ul>
	<li><p>Ahmed Kamal agreed to join the jenkins-admin
	    team.  Even though he is not a &os; committer, he is
	    subscribed to the jenkins-admin alias, and is contributing
	    code via GitHub.  Ahmed has contributed multiple SaltStack
	    scripts which are in the freebsd-ci GitHub repository.  Ahmed
	    has also found multiple bugs in SaltStack's &os; support.  He
	    has fixed these bugs and pushed them back to SaltStack via
	    GitHub pull requests.</p>
	  <p>Ahmed is a software developer who lives in
	    Cairo, Egypt.  He presently works for Cloud9ers, a cloud and
	    devops consulting firm.  In the past, he has worked for
	    Canonical as the Ubuntu Cloud and Server community liaison.</p>
	  <p>Ahmed found out about the Request for Help sent
	    out by &a.rodrigc; for help with Jenkins in &os; via a random
	    web search.  Ahmed found &os; to be a very nice project, and
	    was eager to volunteer and help out, and responded to the
	    Request.  Ahmed will attend BSDCan, where he will learn more
	    about the BSD Community.</p>
	</li>

	<li>&a.jmmv; extended Kyua to support executing test
	  cases in parallel.  This should help the scaling of testing in
	  environments with thousands of test cases.</li>

	<li>&a.rodrigc; got a commit bit to the Jenkins
	  Multiple SCM's plugin, and committed fixes to that plugin to
	  help it work with Subversion 1.8 </li>

	<li>&a.rodrigc; worked with &a.dim; in the
	  freebsd-toolchain team to help identify and fix several
	  compile problems in the &os; src tree when using GCC 4.9.
	  This work will help with the External Toolchain project.</li>
      </ul>
    </body>

    <help>
      <task>
	<p>Set up more builds based on different architectures.</p>
      </task>

      <task>
	<p>Improve the maintenance of nodes in the Jenkins cluster
	   using devops frameworks such as Saltstack.</p>
      </task>

      <task>
	<p>People interested in helping out should join the
	  freebsd-testing@FreeBSD.org list.</p>
      </task>
    </help>
  </project>

  <project cat='proj'>
    <title>Clang, llvm and lldb updated to 3.6.0</title>

    <contact>
      <person>
	<name>
	  <given>Dimitry</given>
	  <common>Andric</common>
	</name>
	<email>dim@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Ed</given>
	  <common>Maste</common>
	</name>
	<email>emaste@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Roman</given>
	  <common>Divacky</common>
	</name>
	<email>rdivacky@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Davide</given>
	  <common>Italiano</common>
	</name>
	<email>davide@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://llvm.org/releases/3.6.0/docs/ReleaseNotes.html">LLVM 3.6.0 Release Notes</url>
      <url href="http://llvm.org/releases/3.6.0/tools/clang/docs/ReleaseNotes.html">Clang 3.6.0 Release Notes</url>
    </links>

    <body>
      <p>Just before the end of the quarter, we updated clang, llvm
	and lldb in the base system to the 3.6.0 release.  These all
	contain numerous improvements; please see the linked release
	notes for more detailed information.</p>

      <p>We have also imported a newer snapshot of compiler-rt,
	with better support for the Address Sanitizer and the Undefined
	Behavior Sanitizer, and arm64 runtime support routines.
	With the updated clang, llvm, and compiler-rt, we now support the
	Address and Undefined Behavior Sanitizers in the base system
	toolchain.</p>

      <p>As with the 3.5.0 release, these components require C++11
	support to build.  C++11 support is available in &os; 10.0 and
	later on the x86 architectures.</p>

      <p>It is still unclear whether we will be able to MFC these
	updates to any of the stable branches, due to the difficulty it will
	introduce for upgrading from a system without C++11 support,
	either from older releases or from architectures still using gcc.</p>

      <p>In the lld-import branch, we have also imported a recent
	snapshot of lld, a linker produced by the LLVM project.  This
	is a very preliminary effort of making it available as a
	system linker.</p>

      <p>Thanks to Ed Maste, Roman Divacky, Andrew Turner and
	Davide Italiano for their help with this import, and thanks to
	Antoine Brodin for performing a ports exp-run.</p>
    </body>

    <help>
      <task>
	<p>After the ports exp-run, a small number of ports
	  turned out to have problems, and for almost all of these, PRs
	  with fixes or workarounds were filed.  While most of these PRs
	  have been processed and closed, there are still a few left
	  that need attention, from either the maintainer(s) or other
	  volunteers.</p>
      </task>

      <task>
	<p>Andrew Turner is working on bringing up the arm64
	  architecture, which is now fully supported in clang and llvm.
	  This will be a very interesting new area for solving
	  challenging problems.</p>
      </task>

      <task>
	<p>There are still issues with the powerpc and sparc64
	  architectures, and any help in these areas is very much
	  appreciated.</p>
      </task>
    </help>
  </project>

  <project cat='misc'>
    <title>The &os; Foundation</title>

    <contact>
      <person>
	<name>
	  <given>Deb</given>
	  <common>Goodkin</common>
	</name>
	<email>deb@FreeBSDFoundation.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.FreeBSDFoundation.org/">Foundation website</url>
      <url href="http://freebsdjournal.com/">&os; Journal</url>
      <url href="http://www.bsdnow.tv/episodes/2015_03_11-the_pcbsd_tour_ii">BSDNow PC-BSD Tour</url>
      <url href="http://www.bsdnow.tv/episodes/2015_02_25-from_the_foundation_2">BSDNow "From the Foundation"</url>
    </links>

    <body>
      <p>The Foundation turned 15 on March 15th!  We kicked off
	our anniversary celebration by launching a spring fundraising
	campaign, to bring in 500 new community investors.  In
	conjunction with our anniversary, BSDNow interviewed Justin
	Gibbs about our history and plans for the future as part of
	the PC-BSD tour.  BSDNow also interviewed Ed Maste about &os;
	projects and processes in a "From the Foundation" episode.</p>

      <p>We were a Platinum Sponsor of AsiaBSDCon and had five team
	members attend the conference.  Kirk McKusick taught a two-day
	&os; kernel tutorial and gave a talk on Journaled Soft
	Updates, and George Neville-Neil gave a talk on network
	performance in &os;; George also taught a two day tutorial
	(A Look Inside FreeBSD with DTrace).  This is from ongoing work
	with Robert Watson in support of both academic and
	practitioner educational material for &os;.  Dru gave a talk
	on Advanced OpenSource Storage with FreeNAS 9.3, and Ed Maste
	gave a talk on the LLDB Debugger in FreeBSD.</p>

      <p>We became a Platinum Sponsor for BSDCan, and have approved six
	travel grants to &os; contributors.  We also sponsored
	Michael Dexter to attend SCALE so he could give a talk on
	virtualization.</p>

      <p>In addition to the above conferences, we helped promote &os;
	at the following conferences:</p>

      <ul>
	<li><a href="https://www.usenix.org/conference/fast15">USENIX
	    FAST '15</a></li>
	<li><a href="https://fosdem.org/2015/">FOSDEM</a></li>
	<li><a href="http://www.socallinuxexpo.org/scale/13x/">SCALE</a></li>
      </ul>

      <p>We received and published &os; testimonials from Xinuos,
	Netgate, and Tarsnap.</p>

      <p>We launched the "From the Trenches" series to provide stories
	from &os; contributors on what they are doing with &os;.
	Glen Barber wrote an article called ZFS and How to Make a Foot
	Cannon.  Glen also investigated a deadlock issue when rebooting
	after upgrades (PR 195458), and he released weekly 11-CURRENT and
	10-STABLE snapshot builds.</p>

      <p>The &os; Journal now has over 8300 subscribers and has a 98%
	renewal rate.  We are now publishing a few free <a
	  href="https://www.freebsdfoundation.org/journal/articles">&os;
	  Journal articles</a>.  We also created landing pages for each
	Journal issue for easier promotion.</p>

      <p>We started work on the Ottawa Vendor and Developer Summits and
	another one that has not yet been officially announced on the East
	Coast in the fall.</p>

      <p>Our development staff and project grant recipients were
	responsible for a large number of feature improvements and bug
	fixes over this past quarter.  We have nine individual reports
	in this quarterly update for Foundation-sponsored projects
	that demonstrate a number of different ways the Foundation
	supports the &os; project.</p>

      <p>One project is the subject of a research master's
	project at Swinburne University in Melbourne: the Multipath
	TCP (MPTCP) implementation for &os;.  The PCIe hot plug
	project is an individual project grant.  The FreeBSD/arm64
	project represents a collaborative development effort, where
	the Foundation facilitates a broader project with multiple
	participants.</p>

      <p>There are also a number of projects undertaken directly by
	Foundation staff.  In this quarterly report we have several
	reports in this category: Secure Boot, the autofs-based
	automount daemon, dynamically loadable libthr, Intel DMA
	remapping, and migration to the ELF Tool Chain project tools.</p>

      <p>Additionally, one of the benefits of having long-term
	permanent staff is the ability to continue to maintain
	projects and contribute improvements beyond a fixed timeline.
	Over the last quarter, Foundation staff contributed
	improvements to the UEFI boot process, vt(4) system console,
	in-kernel iSCSI stack, virtual memory subsystem, and many
	others.</p>
    </body>
  </project>

  <project cat='kern'>
    <title>Adding PCIe Hot-plug Support</title>

    <contact>
      <person>
	<name>
	  <given>John-Mark</given>
	  <common>Gurney</common>
	</name>
	<email>jmg@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://p4web.freebsd.org/@md=d&amp;cd=//depot/projects/&amp;c=LQ6@//depot/projects/pciehotplug/?ac=83">PCIe Hot-plug Perforce Branch</url>
    </links>

    <body>
      <p>PCI Express (PCIe) hot-plug is used on both laptops and
	servers to allow peripheral devices to be added or removed
	while the system is running.  Laptops commonly include
	hot-pluggable PCIe as either an ExpressCard slot or
	a Thunderbolt interface.  ExpressCard has built-in USB support
	that is already supported by &os;, but ExpressCard PCIe
	devices like Gigabit Ethernet adapters and eSATA cards are
	only supported when they are present at boot, and removal may
	cause a kernel panic.</p>

      <p>The goal of this project is to allow these devices to
	be inserted and removed while &os; is running.  The work
	will provide the basic infrastructure to support adding and
	removing devices, though it is expected that additional work
	will be needed to update individual drivers to support
	hot-plug.</p>

      <p>Current testing is focused on getting a simple UART
	device functional.  Basic hot swap is functional.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>

    <help>
      <task>
	<p>Get suspend/resume functional by saving/restoring the necessary
	  registers.</p>
      </task>

      <task>
	<p>Make sure that upon suspend, devices are removed so that
	  if they are replaced while the machine is suspended, the
	  new devices will be detected.</p>
      </task>

      <task>
	<p>Improve how state transitions are handled, possibly by
	  using a proper state machine.</p>
      </task>
    </help>
  </project>

  <project cat='ports'>
    <title>The Graphics stack on FreeBSD</title>

    <contact>
       <person>
	  <name>&os; Graphics team</name>
	  <email>freebsd-x11@FreeBSD.org</email>
       </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/Graphics">Graphics stack roadmap and supported hardware matrix</url>
      <url href="http://blogs.freebsdish.org/graphics/">Graphics stack team blog</url>
      <url href="https://github.com/freebsd/freebsd-ports-graphics">Ports development tree on GitHub</url>
    </links>

    <body>
      <p>In the official Ports tree, the Mesa ports
	(<tt>libglapi</tt>, <tt>libGL</tt>, <tt>libEGL</tt>,
	<tt>libglesv2</tt>, <tt>gbm</tt>, and <tt>dri</tt>) are kept close
	to the latest Mesa 10.4.x release.</p>

      <p>In the development tree (see the GitHub link), the update
	to Mesa 10.5 came, along with several improvements and cleanup to
	the ports themselves.  Now all ports share the same configure
	flags and build dependencies.  As Mesa is built from scratch for
	each port, this ensures that all libraries and drivers are
	consistent with each other.  This fixes at least two
	problems:</p>

      <ul>
	<li>A long standing bug: the <tt>drm</tt> EGL platform is now
	  functional, meaning we will be able to enable Glamor (the 2D
	  acceleration engine based on OpenGL) in the X.Org server.  This is
	  required to provide 2D acceleration for Radeon HD 7000 and later
	  GPUs, for instance.</li>
	<li>Clover, the Mesa OpenCL implementation, now works; see the next
	  paragraph.</li>
      </ul>

      <p>The downside of this unification is that all ports will depend on
	LLVM.  This work is happening in the <tt>mesa-10.5</tt> branch.</p>

      <p>Progress has been made on OpenCL, thanks to help from
	Johannes Dieterich.  Clover (Mesa's implementation) and Beignet
	(Intel's implementation) were added as ports to the development
	tree.  They were tested successfully on Radeon and Intel GPUs, but
	see the wiki for an up-to-date status.  Initially developed in
	the <tt>opencl</tt> branch, everything has now been merged into the
	<tt>mesa-10.5</tt> branch.  This cannot go into the official
	Ports tree yet because it requires the unification explained
	above.</p>

      <p>A new port, <tt>drm-kmod</tt>, was added to the official
	Ports tree.  It provides updated <tt>drm2</tt>, <tt>i915kms</tt>
	and <tt>radeonkms</tt> kernel modules for FreeBSD 9.3-RELEASE
	and 9.3-STABLE.  The only difference from the vanilla modules is
	the addition of hardware context support to the i915 driver.
	The <tt>xf86-video-radeon</tt> and <tt>xf86-video-intel</tt>
	drivers were patched to use the <tt>drm-kmod</tt> port on these
	versions of FreeBSD.  This will allow us to remove the duality
	of the Mesa ports (<tt>libGL</tt>/<tt>libEGL</tt>/<tt>dri</tt>)
	and only support one version (as is already the case in the
	<tt>mesa-10.5</tt> branch where Mesa 9.1.7 is gone).  There is
	no ETA yet for when this last part will happen.</p>

      <p>In the development Ports tree, the <tt>xserver-next</tt>
	branch was updated from xorg-server 1.16 to be tracking 1.17.
	Again, this depends on the previous step: the removal of Mesa
	9.1.7.</p>

      <p>Work is finishing up on an update of miscellaneous X.Org
	components.  Apart from updates to several X.Org ports, this
	update also removes the use of <tt>.la</tt> files from the X.Org
	libraries that still have them.  Also, the
	<tt>xf86-video-intel</tt> driver will receive patches to allow
	it to compile against a newer xorg-server than 1.14.  Most of
	the X.Org component updates were submitted by Matthew Rezny.</p>

      <p>The location where fonts get installed was overhauled and
	the way to handle fonts from the plist has been simplified.  Now all
	fonts are installed in <tt>/usr/local/share/fonts</tt> as
	required by the XDG rules.  Furthermore, making a port for fonts
	should be easier: more aspects, such as calling fc-cache(1), are
	handled by the Ports framework.  Therefore, the font ports'
	consistency was greatly improved.</p>

      <p>In the kernel, the DRM device-independent code was
	updated to match Linux 3.8.  A merge to 10-STABLE is pending.
	The i915kms kernel driver received an update, too, which is
	already merged to 10-STABLE.</p>

      <p>Having both updates in place enables work on a
	second update of the i915 driver: this time it will be
	synchronized with Linux 3.8, like the rest of the DRM subsystem,
	and include Haswell support.  This work was started recently.
	Our hope is that it will be ready in time for
	FreeBSD 10.2-RELEASE.</p>

      <p>During Q2, we are going to work with the GNOME team on
	porting libinput and testing Wayland.  Currently we know that
	GTK+3 and GNOME 3 have full support for Wayland.  We also need
	to test Xwayland from xorg-server 1.16+ to support X
	applications on Wayland desktops.  If you know of more software
	that uses Wayland, we would like to hear about them.  At this point
	there are no plans to port the Weston reference implementation
	of a Wayland compositor.</p>
    </body>

    <help>
      <task>
	<p>See the "Graphics" wiki page for up-to-date
	  information.</p>
      </task>
    </help>
  </project>

  <project cat='ports'>
    <title>Wine/FreeBSD</title>

    <contact>
      <person>
	<name>
	  <given>Gerald</given>
	  <common>Pfeifer</common>
	</name>
	<email>gerald@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>David</given>
	  <common>Naylor</common>
	</name>
	<email>dbn@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://wiki.FreeBSD.org/Wine">Wine wiki</url>
      <url href="http://wiki.FreeBSD.org/i386-Wine">Wine on amd64 wiki</url>
      <url href="http://www.winehq.org">Wine homepage</url>
    </links>

    <body>
      <p>This quarter has seen five updates to the
	<tt>wine-devel</tt> port that closely tracks upstream
	development, as well as updates to helper ports
	(<tt>wine-gecko-devel</tt> and <tt>wine-mono-devel</tt>):</p>

      <ul>
	<li>Stable releases: 1.6.2 (1 port revision)</li>
	<li>Development releases: 1.7.34 through 1.7.39</li>
      </ul>

      <p>A major development has been the introduction of Wine64
	(i.e.,  the ability to run 64-bit Windows applications).  This
	is currently available through the wine-devel port.  At this
	stage it is currently mutually exclusive with the
	i386-wine-devel port, however, we have plans to integrate these
	ports to offer a full Wine experience on amd64.  The
	i386-wine-devel port has packages built for amd64 for &os;
	8.4, 9.1+, 10.1+ and CURRENT.</p>

      <p>Accomplishments include:</p>

      <ul>
	<li>Upstreaming 8 patches to fix Wine on &os; &mdash; many
	  thanks to Gerald and David.</li>
	<li>Optional support for V4L has been added to the stable
	  <tt>emulators/wine</tt> port.</li>
	<li>Optionally building wine with the X composite extension
	  (if one selects the X11 option).</li>
	<li>Support for alternative toolchains that require
	  <tt>LD</tt> to be honoured.</li>
	<li>Fixing and tidying up the pkg-plist.</li>
	<li>Wine64 support</li>
	<li>Updating the patch-nvidia.sh script to support
	  arbitrary suffixes.</li>
	<li>Removing support for the old pkg_ tools from
	  patch-nvidia.sh.</li>
	<li>Developing a patch to fix usage of getdirentries(2).
	  This fixes Steam, EVE Online and other applications.</li>
      </ul>

      <p>We would like to thank all volunteers who contributed
	feedback and patches.</p>

      <p>Future development on Wine will focus on:</p>

      <ul>
	<li>Rename <tt>wine-compholio</tt> to
	  <tt>wine-staging</tt> (to match upstream development).</li>
	<li>Add the getdirentries(2) patch to the
	  <tt>wine-devel</tt> port.</li>
	<li>Redevelop and upstream the getdirentries(2) patch.</li>
	<li>Redevelop and upstream the kernel32 Makefile patch.</li>
	<li>Add support to the <tt>i386-wine</tt> port for pkg 1.5
	  (conflicts with libraries currently prevent such support).</li>
	<li>Add support for WoW64:
	  <ul>
	    <li>Reduce the <tt>i386-wine</tt> port to just the
	      components required for WoW64.</li>
	    <li>Rename the i386-wine port to wow64.</li>
	    <li>Make the wine ports depend on the wow64 ports when
	      built on amd64.</li>
	    <li>Investigate and verify the interactions between Wine64
	      and WoW64.</li>
	    <li>Investigate possible update approaches for the wow64
	      ports (that have to be pre-compiled) and how updating
	      with the wine ports will work.</li>
	  </ul>
	</li>
      </ul>

      <p>Maintaining and improving Wine is a major undertaking
	that directly impacts end-users on &os; (including many
	gamers).  If you are interested in helping, please contact us.
	We will happily accept patches, suggest areas of focus or have
	a chat.</p>
    </body>

    <help>
      <task>
	<p>&os;/amd64 integration (see the <a
	    href="http://wiki.FreeBSD.org/i386-Wine">i386-Wine
	    wiki</a>).</p>
      </task>

      <task>
	<p>Porting WoW64.</p>
      </task>
    </help>
  </project>

  <project cat='arch'>
    <title>&os; on newer ARM boards</title>

    <contact>
     <person>
      <name>
	<given>John</given>
	<common>Wehle</common>
      </name>
      <email>john@feith.com</email>
     </person>

     <person>
      <name>
	<given>Ganbold</given>
	<common>Tsagaankhuu</common>
      </name>
      <email>ganbold@FreeBSD.org</email>
     </person>
    </contact>

    <links>
     <url href="https://wiki.freebsd.org/FreeBSD/arm/Odroid-C1">&os; on Odroid-C1</url>
     <url href="https://svnweb.freebsd.org/changeset/base/280905" />
    </links>

    <body>
     <p>We made the changes necessary to support various Amlogic SoC
      devices, specifically aml8726-m6 and aml8726-m8b SoC-based devices.
      The aml8726-m6 SoC is used in devices such as the Visson
      ATV-102, and the Hardkernel ODROID-C1 board uses the
      aml8726-m8b SoC.  The following support is included:</p>

      <ul>
	<li>Basic machdep code</li>
	<li>SMP</li>
	<li>Interrupt controller</li>
	<li>Clock control driver (aka gate)</li>
	<li>Pinctrl</li>
	<li>Timer</li>
	<li>Real time clock</li>
	<li>UART</li>
	<li>GPIO</li>
	<li>I2C</li>
	<li>SD controller</li>
	<li>SDXC controller</li>
	<li>USB</li>
	<li>Watchdog</li>
	<li>Random number generator</li>
	<li>PLL/Clock frequency measurement</li>
	<li>Frame buffer</li>
      </ul>
    </body>

    <help>
      <task>
	<p>Get the DWC driver working.</p>
      </task>
    </help>
  </project>

  <project cat='ports'>
    <title>FreeBSD Python Ports</title>

    <contact>
      <person>
	<name>&os; Python Team</name>
	<email>python@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/Python">The &os; Python Team Page</url>
      <url href="irc://freebsd-python@irc.freenode.net">IRC channel</url>
    </links>

    <body>

      <p>The &os; Python team continued to improve the overall
	experience with Python-based software on &os;.  A lot of
	previously deprecated code and option knobs were removed to improve
	the maintainability of the Python Ports infrastructure.</p>

      <p>The CPython interpreters were updated to version 2.7.9 and 3.4.3
	and Twisted was updated to version 15.0.0.</p>
   </body>

    <help>
      <task>
	<p>Retire the Python 3-specific port duplicates.</p>
      </task>

      <task>
	<p>More tasks can be found on the team's wiki page (see
	  the links).</p>
      </task>

      <task>
	<p>To get involved, interested people can say hello on IRC
	  in #freebsd-python on freenode and let us know their areas
	  of interest!</p>
      </task>
    </help>
  </project>

  <project cat='ports'>
    <title>KDE on &os;</title>

    <contact>
      <person>
	<name>
	  <given>KDE on &os; team</given>
	</name>
	<email>kde@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://freebsd.kde.org/" />
      <url href="https://freebsd.kde.org/area51.php" />
      <url href="https://wiki.freebsd.org/KDE" />
      <url href="https://mail.kde.org/mailman/listinfo/kde-freebsd" />
      <url href="https://github.com/tcberner/kde5" />
    </links>

    <body>
      <p>The KDE on &os; team focuses on packaging and making
	sure that the experience of KDE and Qt on &os; is as good as
	possible.</p>

      <p>First of all, we would like to welcome Tobias Berner to
	the ranks of the area51 (the KDE ports staging area) committers.
	He has been regularly mentioned
	in our recent status reports, and has finally received committer
	privileges to our experimental repository.  Becoming an area51
	committer is usually the first step towards becoming a kde@
	ports committer.  We hope that Tobias can fix and update our ports
	more easily, and start committing his KDE Frameworks 5 ports to
	area51.</p>

      <p>Additionally, this quarter Qt 5.4.1 was committed to
	the ports tree.  This marks the first time ever since Qt 5 was
	released that we have the latest upstream stable release in our
	ports tree!  This was made possible by all the work we had to put
	into cleaning up the Qt 5 ports infrastructure for the 5.3 update,
	mentioned in our previous status report.</p>

      <p>Last but not least, Alonso Schaich finally landed an
	update to our KDE4 ports that had been in our experimental
	repository for a while, bringing them to the latest 4.14
	release, 4.14.3.</p>

      <p>Overall, we have updated the following ports in this
	quarter:</p>

      <ul>
	<li>Calligra 2.9.1 (committed to area51)</li>
	<li>CMake 3.1.0, 3.1.1, 3.1.3 (committed to ports)</li>
	<li>DigiKam 4.2.0 (committed to ports), 4.8.0 (committed to
	  area51)</li>
	<li>PyQt 4.11.3 + QScintilla 2.8.4 + sip 4.16.5 (committed to
	  ports), sip 4.16.7 (committed to area51)</li>
	<li>Qt 5.4.1 (committed to ports)</li>
      </ul>
    </body>

    <help>
      <task>
	<p>Put more effort into Qt5-related ports: KDE Frameworks
	  5 (currently worked on by Tobias Berner) and PyQt 5.</p>
      </task>
    </help>
  </project>

  <project cat='ports'>
    <title>FreeBSD Ada Ports</title>

    <contact>
      <person>
	<name>
	  <given>John</given>
	  <common>Marino</common>
	</name>
	<email>marino@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://home.gna.org/ghdl/" />
      <url href="http://sourceforge.net/projects/ghdl-updates/" />
    </links>

    <body>
      <p>There are 51 Ada-related ports currently, but two of them
	are being retired: the GCC 4.7-based <tt>lang/gcc47-aux</tt> and
	the BSD-&gt;android cross-compiler for ARMv5
	(<tt>lang/gnatdroid-armv5</tt>).  The former has no advantage
	over the newer GCC 4.9-based <tt>lang/gcc-aux</tt>, and the
	latter has not built for over a year.  Android enthusiasts can
	still use the the ARMv7 cross-compiler
	(<tt>lang/gnatdroid-armv7</tt>).</p>

      <p>A new port is <tt>lang/gcc5-aux</tt>, which includes GNAT
	from the upcoming release of gcc5.  This compiler already builds
	all Ada ports except gtkada3 (which blocks
	<tt>devel/gps</tt>, the GNAT Programming Studio), and
	<tt>gtkada3</tt> should be fixed soon.  When GCC5 is released,
	the Ada framework will switch to using <tt>gcc5-aux</tt> as the
	default compiler.  For those that cannot wait, it is possible to
	use it now by putting <tt>ADA_DEFAULT=5</tt> in /etc/make.conf,
	but this requires rebuilding all Ada ports from source.</p>
    </body>

    <help>
      <task>
	<p>It is a near-term objective to bring the Ada-based GDHL
	  (VHDL simulator) to ports.  The upcoming 0.32 release will be
	  based on GCC 4.9 and the port will be based on this release.</p>
      </task>
    </help>
  </project>

  <project cat='ports'>
    <title>GNOME on &os;</title>

    <contact>
      <person>
	<name>&os; GNOME Team</name>
	<email>freebsd-gnome@freebsd.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.freebsd.org/gnome" />
      <url href="https://github.com/freebsd/freebsd-ports-gnome">GNOME development repo</url>
      <url href="https://wiki.gnome.org/Projects/Jhbuild/FreeBSD" />
    </links>

    <body>
      <p>The &os; GNOME Team maintains the GNOME, MATE, and
	CINNAMON  desktop environments and graphical user interfaces for
	&os;.  GNOME 3 is part of the GNU Project.  MATE is a fork of
	the GNOME 2 desktop.  CINNAMON is a desktop environment using
	GNOME 3 technologies but with a GNOME 2 look and feel.</p>

      <p>At the end of this quarter we updated GNOME and CINNAMON
	to the latest versions on their branches, 3.14 and 2.4,
	respectively.</p>

      <p>GNOME 3.16 was released February 25th; we ported it to
	&os;.  There are still some showstopper problems that appeared.
	During testing of the current versions of the 3.16 ports a bug
	in pkg was uncovered in the multiple repository support, and
	swiftly fixed in pkg 1.4.99.15.</p>

      <p>For the GNOME 3.18 cycle we are going to work closely with
	the x11 team on porting libinput and testing Wayland.  When that
	is done we need to see if we want to enable Wayland for our
	stable releases and we probably need XWayland from
	<tt>xorg-server</tt> 1.16+ to support X applications.  The
	estimate is that Wayland arriving in ports will have to wait
	until 8.4-Release is EOL.</p>
    </body>

    <help>
      <task>
	<p>The GNOME website is stale.  Work is underway, although
	  slowly, on the development section.  We could use some
	  help here.</p>
      </task>

      <task>
	<p>MATE 1.10 porting is under way; the latest 1.9 releases
	  are available in the mate-1.10 branch.</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>Nanosecond file timestamps</title>

    <contact>
      <person>
	<name>
	  <given>Jilles</given>
	  <common>Tjoelker</common>
	</name>
	<email>jilles@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Sergey</given>
	  <common>Kandaurov</common>
	</name>
	<email>pluknet@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>Two new system calls, futimens() and utimensat(), were
	added, making it possible to set file timestamps with nanosecond
	accuracy.  Various utilities like cp, mv and touch were updated
	to use the new calls to preserve and set timestamps with full
	precision.</p>

      <p>The stat() and related system calls have returned file
	timestamps with nanosecond accuracy for a long time, but there
	was no way to set a timestamp more accurately than
	microseconds.</p>

      <p>With these changes, it will be possible to use more
	accurate timestamps (sysctl vfs.timestamp_precision=3) without
	anomalies such as a copy of a file (from cp -p) appearing older
	than the original.  This is particularly useful for NFS servers,
	which use file timestamps for cache invalidation.</p>
    </body>

    <help>
      <task>
	<p>Where possible, fix code that still sets inaccurate
	  timestamps on files, typically by calling futimes(),
	  futimesat(), lutimes(), utime() or utimes() with a non-null
	  times pointer.  There may be a reason for this such as a limited
	  network protocol or file format, but there is some code left
	  that can be fixed.</p>
      </task>
    </help>
  </project>

  <project cat='proj'>
    <title>CheriBSD</title>

    <contact>
      <person>
	<name>
	  <given>Robert</given>
	  <common>Watson</common>
	</name>
	<email>rwatson@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Brooks</given>
	  <common>Davis</common>
	</name>
	<email>brooks@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>David</given>
	  <common>Chisnall</common>
	</name>
	<email>theraven@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Ruslan</given>
	  <common>Bukin</common>
	</name>
	<email>br@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://cheri-cpu.org/" />
    </links>

    <body>
      <p>CheriBSD is a fork of &os; to support the CHERI
	research CPU.  We have extended the kernel to provide support
	for CHERI memory capabilities as well as modifying applications
	and libraries including tcpdump, libmagic, and libz to take
	advantage of these capabilities for improved memory safety and
	compartmentalization.  We have also developed custom demo
	applications and deployment infrastructure for our table demo
	platform.</p>

      <p>As this goes to press, we are finalizing our first open
	source release of the CHERI CPU which will be available from
	the CHERI CPU <a href="http://cheri-cpu.org/">website</a>.</p>

      <p>We have been merging support for the BERI CPU platform
	to &os; since 2012 and continue to do so as new features are
	developed.  Most recently, Ruslan has added support for the
	Terasis SoCkit board which combines an ARM processor with an
	FPGA capable of running BERI (and soon CHERI) in a single
	package.</p>
    </body>

    <sponsor>DARPA/AFRL</sponsor>
  </project>

  <project cat='proj'>
    <title>Mellanox iSCSI Extensions for RDMA (iSER) Support</title>

    <contact>
      <person>
	<name>
	  <given>Max</given>
	  <common>Gurtovoy</common>
	</name>
	<email>maxg@mellanox.com</email>
      </person>

      <person>
	<name>
	  <given>Sagi</given>
	  <common>Grimberg</common>
	</name>
	<email>sagig@mellanox.com</email>
      </person>
    </contact>

    <links></links>

    <body>
      <p>Building on the new in-kernel iSCSI initiator stack
	released in &os; 10.0, and the recently added iSCSI offload
	interface, Mellanox Technologies has begun developing iSCSI
	extensions for RDMA (iSER) initiator support to enable efficient
	data movement using the hardware offload capabilities of
	Mellanox's 10, 40, 56, and 100 gigabit IB/Ethernet adapters.</p>

      <p>Remote Direct Memory Access (RDMA) has been shown to
	have a great value for storage applications.  RDMA
	infrastructure provides benefits such as zero-copy, CPU offload,
	reliable transport, fabric consolidation and many more.  The
	iSER protocol eliminates some of the bottlenecks in the
	traditional iSCSI/TCP stack, provides low latency and high
	throughput, and is well suited for latency-aware workloads.</p>

      <p>This work includes a new ICL module that implements the
	iSER initiator.  The iSCSI stack is slightly modified to support
	some extra features such as asynchronous IO completions,
	unmapped data buffers, and data-transfer offloads.  The user will
	be able to choose iSER as the iSCSI transport with iscsictl(8).</p>

      <p> The project is in its initial implementation phase.  The
	code will be released under the BSD license and is expected to
	be completed later this year.  </p>
    </body>

    <sponsor>Mellanox Technologies</sponsor>
  </project>

  <project cat='team'>
    <title>FreeBSD Bugmeister</title>

    <contact>
      <person>
	<name>&os; Bugmeister</name>
	<email>bugmeister@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>Bugzilla replaced GNATS in June 2014 as the bug
	management tool of choice for &os;, granting GNATS its
	well-deserved retirement after more than 20 years of operation.
	The following months were rough for Bugzilla: a lot of
	functionality was still missing and several uncertainties caused
	users and committers to adapt only slowly to the new system.</p>

      <p>Over the last six months, a lot of missing features were
	brought into place to allow users and committers to focus on
	getting bugs solved.  Categories, the status model and many
	workflow-related knobs were continuously reworked and improved to
	provide the necessary information without getting in the
	way.</p>

      <p>An auto-assigner for ports issues was implemented,
	resembling what GNATS successfully did in the past.  A <a
	  href="https://bugs.freebsd.org/bugzilla/page.cgi?id=dashboard.html">dashboard</a>
	page within Bugzilla provides users and committers with quick
	access to common
	queries and overall statistics; many other smaller tweaks,
	configurations, and extensions were implemented to improve the
	usability of the system.</p>

      <p>An improved reporting system is currently being
	implemented to provide graphs and statistics for users and
	committers.  Handling MFCs and a better feedback mechanism for
	requests (flags in Bugzilla) will be the next things to do.</p>

      <p>Bugmeister is also working closely with the &os; GitHub
	team to establish a workflow between GitHub's issue tracker and
	our Bugzilla system.  The technical solution already exists as a
	proof of concept, but its usage in production will have to wait
	until Bugzilla 5.0 has been adopted.</p>
    </body>

    <help>
      <task>
	<p>Create a solid <a
	    href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=198244">charting
	    extension</a> for &os; Bugzilla.</p>
      </task>

      <task>
	<p>Improve <a
	    href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=193772">MFC
	    handling</a>.</p>
      </task>

      <task>
	<p>Do you feel that something important is missing?
	  <a
	    href="https://bugs.freebsd.org/bugzilla/enter_bug.cgi?product=Services&amp;component=Bug%20Tracker">Let
	    us know!</a></p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>Modern x86 platform support and VT-d</title>

    <contact>
      <person>
	<name>
	  <given>Konstantin</given>
	  <common>Belousov</common>
	</name>
	<email>kib@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>Modern x86 platforms include a number of architectural
	enhancements.  Work is ongoing to support these features in
	&os;.</p>

      <p>Starting with SandyBridge CPUs, Intel introduced an
	enhanced local interrupt controller (APIC) mode, called x2APIC.
	Instead of using a mapped page, registers are now accessed using
	special Model-Specific Registers (MSR) read and write
	instructions.  This is intended to support virtualization.  The
	access overhead is also reduced by not requiring serialization,
	and by simplification of Inter-Process Interrupt (IPI)
	generation.  The main commit introducing the feature was
	r278473, with fixes following on.</p>

      <p>End Of Interrupt (EOI) suppression is a mode of EOI
	delivery to Input/Output Interrupt Controllers (IO-APICs) where
	the EOI message for a level-triggered interrupt is not broadcast
	by an EOI write to the local APIC, but instead an explicit EOI
	command is sent to the source IO-APIC.  The optimization reduces
	the number of APIC messages that must be broadcast; it should
	be used on all modern Intel systems.  Support for EOI
	suppression was committed in r279319.</p>

      <p>VT-d Interrupt Remapping (IR) is provided by hardware
	with the VT-d feature.  It translates interrupt messages on the
	way from the root complex to the north bridge and allows control
	of interrupt delivery without reprogramming MSI/MSI-X registers
	or IO-APICs.  The original intent was to allow hypervisors to
	safely delegate interrupt programming for devices owned by
	guests to the guest OS.  IR is also needed to avoid some
	limitations in IO-APICs and to make interrupt rebalancing atomic
	and transparent.  Support has been committed as r280260.</p>

      <p>Both x2APIC mode and IR are required to send IPIs and
	device interrupts to processors with LAPIC ID greater then 254.
	It is believed that the only missing platform code to handle big
	machines is parsing the "Processor Local x2APIC Structure" and
	"Local x2APIC NMI Structure" from the ACPI Multiple APIC
	Description Table (MADT), which report LAPIC IDs &gt; 255, and
	handling boot on such systems with the x2APIC mode enabled by
	firmware.  The work to complete that is expected to be
	relatively trivial, and can be done with access to a real
	high-core-count machine.  But an audit of the common
	machine-independent code must be finished to ensure that large
	CPU IDs are handled correctly, before such support can
	safely be enabled.</p>

      <p>Additional work remains in progress: split domains and
	contexts for DMA Remapper Unit (DMAR) driver.  Right now, the
	DMAR driver is only used to implement busdma(9), which is done
	by assigning a dedicated domain to each translation context.
	Some devices could issue PCIe Transaction Layer Packets (TLPs)
	with several originators IDs, e.g.,  PCIe/PCI bridges, or
	phantom functions of PCIe devices, or such TLPs could occur just
	due to hardware bugs.  To handle them, a single domain (which
	shares the translation page tables) must handle several
	contexts.</p>

      <p>Splitting domains and contexts is also required for the
	DMAR driver to start handling PCI pass-through in bhyve, instead
	of the less complete implementation which is currently provided
	by bhyve itself.  All PCIe devices passed to the guest must
	share a domain.  The splitting patch is written and is being
	tested, and external interfaces to manage domains are being
	formed.</p>

      <p>Stability work for the VT-d code is ongoing.  In
	particular, nvme(4) and ixgbe(4)'s use of busdma interfaces was
	debugged and improved, and tested on a very large-memory
	machine.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>
  </project>

  <project cat='bin'>
    <title>libthr improvements</title>

    <contact>
      <person>
	<name>
	  <given>Konstantin</given>
	  <common>Belousov</common>
	</name>
	<email>kib@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>Historically, dynamic loading of the libthr.so thread
	library into a single-threaded process did not work in &os;.
	The longstanding recommendation to work around the problem has
	been to always link the main binary with -lpthread if there was
	any chance of a need for threading functionality.  This project
	converted libthr.so into a plugin for libc, which fixed the
	known issues preventing dynamic loading of libthr.so.</p>

      <p>After the fix, linking the main binary with -lpthread is
	no longer required, but is not harmful.  I recommend thoroughly
	testing before removing libpthread from the library list in
	favor of dynamic loading, though.  Note that potential problems
	will be subtle and their user-visible manifestations in the
	affected program even more surprising.</p>

      <p>The following issues were present in the old version of
	libthr with respect to dynamic loading, but are fixed as
	a result of this work:</p>

      <ul>
	<li>Invalid errno value seen after failed syscalls.</li>
	<li>Broken libthr internal locks and critical sections ignored
	  by signals.</li>
	<li>Hung attempts to lock mutexes.</li>
	<li>Thread cancellation not occurring at guaranteed cancellation
	  points.</li>
      </ul>

      <p>The main change was committed as r276630 to HEAD, with many
	follow ups.  It was merged to stable/10 in r277317.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>
  </project>

  <project cat='arch'>
    <title>Nested Kernel</title>

    <contact>
      <person>
	<name>
	  <given>Nathan</given>
	  <common>Dautenhahn</common>
	</name>
	<email>dautenh1@illinois.edu</email>
      </person>

      <person>
	<name>
	  <given>Theodoros</given>
	  <common>Kasampalis</common>
	</name>
	<email>kasampa2@illinois.edu</email>
      </person>

      <person>
	<name>
	  <given>Will</given>
	  <common>Dietz</common>
	</name>
	<email>wdietz2@illinois.edu</email>
      </person>
    </contact>

    <links>
      <url href="http://nestedkernel.org">Home page for the project that includes links to papers and build instructions.</url>
      <url href="http://web.engr.illinois.edu/~dautenh1//downloads/publications/asplos200-dautenhahn.pdf">Conference publication detailing the problem, design, implementation, and evaluation of our prototype.</url>
      <url href="http://prezi.com/in6qr3l92ffc/?utm_campaign=share&amp;utm_medium=copy">Presentation on the nested kernel</url>
      <url href="https://github.com/HardenedBSD/hardenedBSD/tree/hardened/9/kernsep">HardenedBSD branch of the nested kernel being refactored.</url>
    </links>

    <body>
      <p>This work on a nested kernel architecture is part of
	Nathan's doctoral thesis work at the University of Illinois at
	Urbana-Champaign.  It attempts to improve upon the traditional
	monolithic operating system kernel, where a single exploit
	anywhere in the kernel grants the attacker full superuser
	privileges.  The nested kernel operating system architecture
	addresses this problem by "nesting" a small, isolated kernel
	within a traditional monolithic kernel.  This "nested kernel"
	interposes on all updates to virtual memory translations to
	assert protections on physical memory, thus significantly
	reducing the trusted computing base for memory access control
	enforcement.  </p>

      <p>We incorporated the nested kernel
	architecture into &os; on x86-64 hardware by write-protecting
	Memory-Management Unit (MMU) translations and de-privileging the
	untrusted part of the kernel, thereby enabling the entire
	operating system, trusted and untrusted components alike, to
	operate at the highest hardware privilege level.  Our
	implementation inherently enforces kernel code integrity while
	still allowing dynamically loaded kernel modules, thus defending
	against code injection attacks.  We also demonstrate, by
	introducing write-mediation and write-logging services, that the
	nested kernel architecture allows kernel developers to isolate
	memory in ways not possible in monolithic kernels, though
	gaining security benefits from this will require adding
	policies that have not yet been designed.</p>

      <p>The performance of the nested kernel prototype shows modest
	overheads: less than 1% average for Apache, 3.7% average for
	sshd, and 2.7% average for kernel compilation.  Overall, our
	results and experience show that the nested kernel design can be
	retrofitted onto existing monolithic kernels, providing defense
	in depth.</p>

      <p>The basic idea is that the nested kernel initializes the
	system so that all page tables are mapped as read-only.  Then
	all MMU-modifying operations are removed from the untrusted
	portion of the kernel; runtime code integrity is enforced by
	write-protecting all code pages, marking all non-code
	pages as non-executable (NX-bit), and preventing execution of
	privileged MMU operations located in userspace mappings
	(Supervisor Mode Execution Prevention, SMEP).  Because the
	nested kernel has control of the page tables it can enforce
	these integrity properties, leading to virtualization of the
	MMU.</p>

      <p>The links include a recent conference publication that
	details the design, implementation, and evaluation of our
	prototype nested kernel architecture on top of &os; 9.0.  
	There is also a link to a presentation on the nested
	kernel, and a website with information about the project and
	instructions on how to get the source and build it.</p>

      <p>We are very interested in feedback on the design of the
	nested kernel, and having discussions about how it might get
	upstreamed.</p>

      <p>We are also hoping to gain additional contributors and
	interest in the project!  The nested kernel has the potential to
	enhance commodity operating system design, and &os; is a major
	operating system in use today which has high impact.
	The current implementation is merely a research prototype and
	requires significant effort to make production-ready (see the
	list of tasks).</p>

      <p>Finally, we have developed an interface to write-protect
	data structures in the kernel and are soliciting ideas for uses
	of this service.  Section 2.4 in the paper details the
	interface, and section 4 presents some simple uses of the nested
	kernel services.  We are interested in ways that the nested
	kernel could be used to protect critical kernel data structures
	from malware or even just buggy code.</p>
    </body>

    <sponsor>University of Illinois at Urbana-Champaign</sponsor>
    <sponsor>ONR via grant number N00014-12-1-0552</sponsor>

    <help>
      <task>
	<p>Finish implementing core mechanisms: verify DMAP is
	  properly protected and that we are not using superpages (I think
	  we have this completed but need to fully verify), full NX
	  support for all non-kernel code pages (we might need to
	  specially consider the stack if it is used to execute code),
	  protect IDT and SMM, and add IOMMU protections.  We also need to
	  do some optimizations where we batch calls into the nested
	  kernel on process creation (<tt>fork</tt>) and
	  <tt>mmap</tt> operations.  The
	  motivation for these implementation directives can be reviewed
	  in the paper.</p>
      </task>

      <task>
	<p>Implement SMP functionality and evaluate performance.</p>
      </task>

      <task>
	<p>Port and refactor for &os;-HEAD.  The
	  current implementation is a research prototype and requires some
	  refactoring to make it clean and consistent, as well as make it
	  relevant to modern versions of &os;.</p>
      </task>

      <task>
	<p>The nested kernel isolation depends upon certain
	  hardware instructions to be completely removed from a subset of
	  the kernel.  Therefore, we need to utilize automated linker/loader
	  techniques to identify and remove privileged MMU operations from
	  untrusted kernel components to make it maintainable in
	  practice.</p>
      </task>

      <task>
	<p>Detailed review on the design and implementation with
	  particular focus on a plan for upstreaming.</p>
      </task>
    </help>
  </project>

  <project cat='proj'>
    <title>Multipath TCP for &os;</title>

    <contact>
      <person>
	<name>
	  <given>Nigel</given>
	  <common>Williams</common>
	</name>
	<email>njwilliams@swin.edu.au</email>
      </person>
    </contact>

    <links>
      <url href="http://caia.swin.edu.au/urp/newtcp/mptcp/" />
    </links>

    <body>
      <p>Multipath TCP (MPTCP) is an extension to TCP that allows
	for the use of multiple network interfaces on a standard TCP
	session.  The addition of new addresses and scheduling of data
	across these occurs transparently from the perspective of the
	TCP application.</p>

      <p>The goal of this project is to deliver an MPTCP
	kernel patch that interoperates with the reference MPTCP
	implementation, along with additional enhancements to aid
	network research.</p>

      <p>After a major re-design of the earlier prototype
	implementation, the patch is again able to establish and carry
	out multi-path connections that incorporate multiple addresses.
	Improvements have also been made to path management and to the
	code handling the addition of subflows to a connection.</p>

      <p>Most recently data-level re-transmission support has been added
	and is being tested.  Soon more extensive testing of the patch
	in different multi-path scenarios will begin, with plans for a
	public release of v0.5 in May.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>

    <help>
      <task>
	<p>Testing of data-level re-transmission.</p>
      </task>

      <task>
	<p>Basic support for per-subflow congestion control
	  algorithm selection.</p>
      </task>

      <task>
	<p>Testing and release of v0.5 patch.</p>
      </task>
    </help>
  </project>

  <project cat='team'>
    <title>The &os; Core Team</title>

    <contact>
      <person>
	<name>&os; Core Team</name>
	<email>core@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>The &os; Core Team constitutes the project's "Board of
	Directors", responsible for deciding the project's overall goals
	and direction as well as managing specific areas of the &os;
	project landscape.</p>

      <p>January began with members of core dealing with the fallout
	from the accidental deletion of the Bugzilla database.  This
	incident highlighted the fact that backup and recovery mechanisms
	in the cluster were not up to the task.  Core has discussed what
	measures are appropriate with clusteradm and is reviewing their
	implementation.</p>

      <p>After a long process of consultation, plans for introducing the
	new support model with 11.0-RELEASE were finally agreed on and
	published in early February.  This announcement puts the practical
	detail onto the motion that was adopted at BSDCan 2014, and
	clarifies the steps needed for implementation.</p>

      <p>Also in February core revisited discussions on making the
	blogs.freebsdish.org blog aggregator an official project service
	and also providing a blogging platform directly to developers.
	However, security and man-power are both major concerns.  Given
	the track records of most freely available blogging platforms,
	core is rightly wary of introducing them into the cluster.
	Similarly, curating a blogging platform will take a substantial
	volunteer effort to ensure all posts are appropriate and to remove
	spam.</p>

      <p>March has seen two discussions about potentially divisive
	topics.  Should the ZFS ARC Responsiveness patches be committed
	and MFC'd as a pragmatic fix to performance problems in
	10.1-RELEASE, understanding that this is not an ideal solution to
	the problem and will need rework?  Should we stop maintaining
	support for older (C89 or earlier) compilers in kernel code, and
	just code directly to the C11 standard?  Broadening out from this
	last point: should we have a formal mechanism for deciding what
	has become obsolete in the system and when it should be
	removed?</p>

      <p>During this quarter five new src commit bits were granted and
	two were taken in for safe-keeping.</p>
    </body>
  </project>

  <project cat='proj'>
    <title>Secure Boot</title>

    <contact>
      <person>
	<name>
	  <given>Edward Tomasz</given>
	  <common>Napiera&#322;a</common>
	</name>
	<email>trasz@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/SecureBoot" />
    </links>

    <body>
      <p>UEFI Secure Boot is a mechanism that requires boot
	drivers and operating system loaders to be cryptographically
	signed by an authorized key.  It will refuse to execute any
	software that is not correctly signed, and is intended to secure
	boot drivers and operating system loaders from malicious
	tampering or replacement.</p>

      <p>The utility to add Authenticode signatures to EFI files,
	uefisign(8), was committed to 11-CURRENT and will ship in
	10.2-RELEASE.  Ports for other open source utilities were added
	to the Ports Collection, as <tt>sysutils/pesign</tt>,
	<tt>sysutils/sbsigntool</tt>, and <tt>sysutils/shim</tt>.  There
	is a prototype patch that makes boot1 use the Secure Boot shim, and
	modifies the shim to provide the functionality necessary
	for a successful bootstrap.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>

    <help>
      <task>
	<p>Finalize the shim API extension and get it accepted
	  upstream.</p>
      </task>

      <task>
	<p>Commit boot1 changes.</p>
      </task>
    </help>
  </project>

  <project cat='proj'>
    <title>New Automounter</title>

    <contact>
      <person>
	<name>
	  <given>Edward Tomasz</given>
	  <common>Napiera&#322;a</common>
	</name>
	<email>trasz@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/Automounter" />
      <url href="http://people.freebsd.org/~trasz/autofs.pdf" />
      <url href="http://freebsdfoundation.blogspot.com/2015/03/freebsd-from-trenches-using-autofs5-to_13.html" />
    </links>

    <body>
      <p>The new automounter is a cleanroom implementation of
	functionality available in most other Unix systems, using proper
	kernel support implemented via an autofs filesystem.  The
	automounter supports a standard map format, and integrates with
	the Lightweight Directory Access Protocol (LDAP) service.</p>

      <p>After shipping in 10.1-RELEASE, most of the work focused
	on bug fixing, improving documentation, and optimization.  The
	biggest new feature was the addition of a "-media" map, designed
	to handle removable media, such as flash drives or DVDs, and the
	necessary elements of infrastructure to support it, namely
	fstyp(8) and GEOM devd notifications.  Also, the "-noauto" map
	was added, for automatic mounting of filesystems marked "noauto"
	in fstab(5), instead of having to write an autofs map for them.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>
  </project>

  <project cat='bin'>
    <title>Migration to ELF Tool Chain tools</title>

    <contact>
      <person>
	<name>
	  <given>Ed</given>
	  <common>Maste</common>
	</name>
	<email>emaste@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://elftoolchain.sourceforge.net">&os; LLDB wiki page</url>
    </links>

    <body>
      <p>The ELF Tool Chain project provides BSD-licensed
	implementations of compilation tools and libraries for building
	and analyzing ELF objects.  The project began as part of &os;
	but later became an independent project to encourage wider
	participation from others in the open-source developer
	community.</p>

      <p>ELF Tool Chain provides a set of tools equivalent to the
	GNU Binutils suite.  This project's goal is to import these
	tools into the &os; base system so that we have a set of
	up-to-date and maintained tools that also provide support for
	new CPU architectures of interest, such as arm64.</p>

      <p>In addition to the libelf and libdwarf libraries, the
	following tools are now provided by the ELF Tool Chain
	project:</p>

      <ul>
	<li>addr2line</li>
	<li>nm</li>
	<li>readelf</li>
	<li>size</li>
	<li>strings</li>
	<li>strip (elfcopy)</li>
      </ul>

      <p>ELF Tool Chain's elfcopy provides equivalent
	functionality to Binutils' objcopy, and accepts the same
	command-line arguments.  For it to be a viable replacement for
	all uses of objcopy in the base system, it must gain support for
	writing portable executable (PE) format binaries, which are used
	by UEFI boot code.</p>

      <p>The ELF Tool Chain project does not currently provide
	replacements for as, ld, or objdump.  For &os;, these tools will
	likely be obtained from the LLVM project.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>

    <help>
      <task>
	<p>Add missing functionality to elfcopy and migrate the base
	  system build.</p>
      </task>

      <task>
	<p>Fix issues found by fuzzing inputs to the tools.</p>
      </task>

      <task>
	<p>Add automatic support for separate debug files.</p>
      </task>
    </help>
  </project>

  <project cat='bin'>
    <title>The LLDB Debugger</title>

    <contact>
      <person>
	<name>
	  <given>Ed</given>
	  <common>Maste</common>
	</name>
	<email>emaste@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/lldb">&os; LLDB wiki page</url>
    </links>

    <body>
      <p>LLDB is the debugger project associated with Clang/LLVM.
	It supports the Mac OS X, Linux, &os; and Windows platforms.  It
	builds on existing components in the larger LLVM project, for
	example using Clang's expression parser and LLVM's disassembler.</p>

      <p>The LLDB in the base system was upgraded to version 3.6.0
	as part of the Clang and LLVM upgrade.  In the upstream
	repository, Justin Hibbits added support for live and core file
	debugging on PowerPC, and Ed Maste added core file support for
	&os;/arm64.</p>
    </body>

    <sponsor>DARP/AFRL</sponsor>
    <sponsor>SRI International</sponsor>
    <sponsor>University of Cambridge</sponsor>

    <help>
      <task>
	<p>Rework the LLDB build to use LLVM and Clang shared libraries.</p>
      </task>

      <task>
	<p>Port remote debug stub to &os;.</p>
      </task>

      <task>
	<p>Add support for local and core file kernel debugging.</p>
      </task>

      <task>
	<p>Improve support on non-amd64 architectures.</p>
      </task>

      <task>
	<p>Enable by default in the base system.</p>
      </task>
    </help>
  </project>

  <project cat='arch'>
    <title>&os;/arm64</title>

    <contact>
      <person>
	<name>
	  <given>Andrew</given>
	  <common>Turner</common>
	</name>
	<email>andrew@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Ed</given>
	  <common>Maste</common>
	</name>
	<email>emaste@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Zbigniew</given>
	  <common>Bodek</common>
	</name>
	<email>zbb@semihalf.com</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/arm64">&os; arm64 wiki page</url>
      <url href="https://github.com/FreeBSDFoundation/freebsd/tree/arm64-dev">GitHub arm64 development repository</url>
    </links>

    <body>
      <p>The collaborative development on the &os; arm64 port
	made significant progress over the last quarter.  The &os;
	Foundation is collaborating with ARM, Cavium, the Semihalf team,
	and Andrew Turner to port &os; to the arm64 architecture,
	also known as ARMv8 and AArch64.</p>

      <p>After significant review and refinement, the initial set
	of changes are being delivered into &os;-HEAD.  This initial
	support targets the QEMU and ARM Foundation Model emulators, and
	boots to a usable multiuser environment.</p>

      <p>Cavium's ThunderX platform is the initial hardware
	reference target for the &os; arm64 port.  The platform
	currently boots to multiuser, with a root file system mounted
	over NFS via a PCIe 10 Gbps Ethernet NIC.  Reference hardware is
	installed in the &os; test lab hosted by Sentex Communications
	and in Semihalf's offices.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>
    <sponsor>ARM</sponsor>
    <sponsor>Cavium</sponsor>

    <help>
      <task>
	<p>Merge kernel changes to HEAD.</p>
      </task>

      <task>
	<p>Finish remaining userland and kernel support.</p>
      </task>

      <task>
	<p>Produce installable images.</p>
      </task>
    </help>
  </project>

  <project cat='proj'>
    <title>&os; on POWER8</title>

    <contact>
      <person>
	<name>
	  <given>Nathan</given>
	  <common>Whitehorn</common>
	</name>
	<email>nwhitehorn@freebsd.org</email>
      </person>

      <person>
	<name>
	  <given>Justin</given>
	  <common>Hibbits</common>
	</name>
	<email>jhibbits@freebsd.org</email>
      </person>

      <person>
	<name>
	  <given>Adrian</given>
	  <common>Chadd</common>
	</name>
	<email>adrian@freebsd.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.tyan.com/campaign/openpower/">Tyan development reference platform</url>
    </links>

    <body>
      <p>IBM and the OpenPOWER Foundation are pushing for a wider
	software and hardware ecosystem for POWER8-based systems.
	Starting in January 2014, we have been doing bringup work on a
	Tyan GN70-BP010 POWER8 server, a quad-core 3 GHz system with a
	total of 32 hardware threads.</p>

      <p>Updates since the previous report:</p>

      <ul>
	<li>&os; now boots under a hypervisor with the virtual SCSI
	  block device; the issue previously preventing this has
	  been fixed.</li>

	<li>The powerpc64 pmap code was rewritten to be more
	  scalable, as the previous pmap code did not scale beyond a small
	  number of CPUs.</li>

	<li>Initial support for IBM's Vector-Scalar Extensions
	  (VSX) was added.</li>

	<li>The &os; kernel was made completely position
	  independent for powerpc64, and later powerpc32 as well.</li>
      </ul>
    </body>

    <sponsor>The &os; Foundation</sponsor>

    <help>
      <task>
	<p>Get &os; booting natively, rather than under KVM.  This
	  requires writing OPAL drivers for the various hardware
	  devices in the system.</p>
      </task>

      <task>
	<p>Integrate loader(8) with petitboot.</p>
      </task>
    </help>
  </project>

  <project cat='bin'>
    <title>Updates to GDB</title>
  
    <contact>
      <person>
	<name>
	  <given>John</given>
	  <common>Baldwin</common>
	</name>
	<email>jhb@FreeBSD.org</email>
      </person>
    </contact>
  
    <links>
      <url href="https://github.com/bsdjhb/gdb/tree/freebsd-7.9.0-kgdb">Port of kgdb to gdb 7.9</url>
    </links>
  
    <body>
      <p>Several improvements to GDB have been merged upstream to GDB's
	master branch over the past few months, including fixes for
	unwinding across signal trampoline frames on x86, removing the
	procfs dependency from the gcore command, and support for XSAVE
	extensions (such as AVX registers) on x86.  These fixes are
	already available in the existing devel/gdb port as patches
	relative to 7.8.</p>

      <p>In addition, progress has been made on porting kgdb to a newer
	gdb.  Currently, only support for the amd64 backend has been
	ported, but it is functional both for remote debugging and
	against crash dumps.  The current port generally has feature
	parity with the kgdb in the base system.  The plan for kgdb is
	to fix it to always include all platform targets (so that it
	always supports cross debugging for remote targets out of the
	box).  At some point it may also include cross debugging support
	for crash dumps as well (this would require changes to libkvm).
      </p>
    </body>
  
    <help>
      <task>
	<p>Tidy the amd64 port of kgdb and finish the i386 port.  This
	  includes fixing these platform-specific targets to work with
	  cross-debugging for remote targets.</p>
      </task>
      <task>
	<p>Add a KGDB option to the devel/gdb port to include kgdb
	  support.</p>
      </task>
      <task>
	<p>Port the rest of the platform-specific targets for kgdb.</p>
      </task>
      <task>
	<p>Write a new 1:1-only thread target for FreeBSD that can be
	  sent upstream.</p>
      </task>
      <task>
	<p>Add support for debugging powerpc vector registers.</p>
      </task>
    </help>
  </project>

  <project cat="proj">
    <title>pkg</title>

    <contact>
      <person>
	<name>
	  <given>Baptiste</given>
	  <common>Daroussin</common>
	</name>

	<email>bapt@FreeBSD.org</email>
      </person>
      <person>
	<name>
	  <given>Vsevolod</given>
	  <common>Stakhov</common>
	</name>

	<email>vsevolod@FreeBSD.org</email>
      </person>
      <person>
	<name>
	  <given>Andrej</given>
	  <common>Zverev</common>
	</name>

	<email>az@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/freebsd/pkg">pkg's Github Repo</url>
      <url href="https://lists.freebsd.org/mailman/listinfo/freebsd-pkg">The pkg Mailing List</url>

    </links>

    <body>
      <p>Lots of work has been done on the pkg(8) front, which has brought
	pkg(8) to the 1.5.0 release.</p>

      <p>Special attention has been spent on the test suite; the
	number of tests went from around 20 to more than 70.  They
	are mostly functional tests, each of which tests many different
	features, with less emphasis on unit tests.</p>

      <p>One of the main highlights is initial support for
	provides/requires.  This is still
	simple but is good enough to allow fixing a lot of situations when
	dealing with php-related ports: PHP can now safely upgrade from one
	major version to another.  This allows for the pecl/pear
	packages to be reinstalled each time a minor php upgrade is
	done.</p>

      <p>Some pkg internals have been reworked to allow cross installation
	of packages without the need for chroot(2) or jail(2) calls.</p>

      <p>The plist and keyword parser have been improved to keep simplifying
	creating new ports:</p>
	<ul>
	  <li>Keywords can now have arguments</li>
	  <li>A lazy mode is available for setting credentials via the
	    plist</li>
	  <li>Flags (immutable and others) can now be specified in
	    the plist</li>
	</ul>

       <p>pkg now supports resume for http/ftp downloads.</p>
    </body>

    <help>
      <task>
	<p>Populate the ports tree with provides/requires.</p>
      </task>

      <task>
	<p>Make all scripts in the ports tree support cross
	  installation.</p>
      </task>

      <task>
	<p>Improve provides/requires.</p>
      </task>

      <task>
	<p>Continue adding more tests.</p>
      </task>
    </help>
  </project>

  <project cat='arch'>
    <title>&os;/EC2</title>

    <contact>
      <person>
	<name>
	  <given>Colin</given>
	  <common>Percival</common>
	</name>
	<email>cperciva@freebsd.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.daemonology.net/freebsd-on-ec2/" />
    </links>

    <body>
      <p>Support for building Amazon Machine Images ("AMIs") for
	Amazon EC2 is now in the src tree, via <tt>make
	  ec2ami</tt> in src/release.  The platform is functional and
	stable, and pre-built images are available in all of the public
	EC2 regions.</p>

      <p>The Amazon Web Services Marketplace reports that
	approximately 400 users are running approximately 800 &os; EC2
	instances.  This is an underestimate since it only counts
	instances launched via the AWS Marketplace.</p>
    </body>

    <help>
      <task>
	<p>MFC AMI-building code to stable/10 in time for &os;
	  10.2-RELEASE.</p>
      </task>

      <task>
	<p>Complete the AMI-building handoff to the release
	  engineering team.</p>
      </task>

      <task>
	<p>Teach the blkfront driver to use indirect segment
	  requests in order to significantly increase I/O performance.</p>
      </task>

      <task>
	<p>Get working SR-IOV driver for the Intel network cards
	  found in EC2 "Enhanced Networking" in order to significantly
	  increase networking performance.</p>
      </task>
    </help>
  </project>
</report>
