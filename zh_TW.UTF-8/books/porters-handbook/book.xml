<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//FreeBSD//DTD DocBook XML V5.0-Based Extension//EN" "http://www.FreeBSD.org/XML/share/xml/freebsd50.dtd" [
<!ENTITY values.uses SYSTEM "uses.xml">
<!ENTITY values.versions SYSTEM "versions.xml">
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
--><!ENTITY % chapters SYSTEM "chapters.ent">
<!--
     Creates entities for each chapter in the Porters Handbook. Each entity
     is named chap.foo, where foo is the value of the id attribute on that
     chapter, and corresponds to the name of the directory in which that
     chapter's .xml file is stored.

     Chapters should be listed in the order in which they are referenced.

     $FreeBSD$
--><!ENTITY chap.porting-why SYSTEM "porting-why/chapter.xml">
<!ENTITY chap.new-port SYSTEM "new-port/chapter.xml">
<!ENTITY chap.quick-porting SYSTEM "quick-porting/chapter.xml">
<!ENTITY chap.slow-porting SYSTEM "slow-porting/chapter.xml">
<!ENTITY chap.makefiles SYSTEM "makefiles/chapter.xml">
<!ENTITY chap.special SYSTEM "special/chapter.xml">
<!ENTITY chap.plist SYSTEM "plist/chapter.xml">
<!ENTITY chap.pkg-files SYSTEM "pkg-files/chapter.xml">
<!ENTITY chap.testing SYSTEM "testing/chapter.xml">
<!ENTITY chap.upgrading SYSTEM "upgrading/chapter.xml">
<!ENTITY chap.security SYSTEM "security/chapter.xml">
<!ENTITY chap.porting-dads SYSTEM "porting-dads/chapter.xml">
<!ENTITY chap.porting-samplem SYSTEM "porting-samplem/chapter.xml">
<!ENTITY chap.keeping-up SYSTEM "keeping-up/chapter.xml">
<!ENTITY chap.uses SYSTEM "uses/chapter.xml">
<!ENTITY chap.versions SYSTEM "versions/chapter.xml">
]>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="zh_TW">

  <info>
    <title>FreeBSD Porter 手冊</title>

    <authorgroup>
      <author><orgname>The FreeBSD Documentation Project</orgname></author>
    </authorgroup>

    <pubdate>$FreeBSD$</pubdate>

    <copyright><year>2000</year> <year>2001</year> <year>2002</year> <year>2003</year> <year>2004</year> <year>2005</year> <year>2006</year> <year>2007</year> <year>2008</year> <year>2009</year> <year>2010</year> <year>2011</year> <year>2012</year> <year>2013</year> <year>2014</year> <year>2015</year> <year>2016</year> <holder role="mailto:doc@FreeBSD.org">The FreeBSD Documentation Project</holder></copyright>

    
<legalnotice xml:id="legalnotice">
  <title>版權所有</title>

  <para xml:lang="en">Redistribution and use in source (XML DocBook) and 'compiled'
    forms (XML, HTML, PDF, PostScript, RTF and so forth) with or without
    modification, are permitted provided that the following conditions are
    met:</para>

  <orderedlist>
    <listitem>
      <para xml:lang="en">Redistributions of source code (XML DocBook) must retain the
        above copyright notice, this list of conditions and the following
        disclaimer as the first lines of this file unmodified.</para>
    </listitem>

    <listitem>
      <para xml:lang="en">Redistributions in compiled form (transformed to other DTDs,
        converted to PDF, PostScript, RTF and other formats) must
        reproduce the above copyright notice, this list of conditions and
        the following disclaimer in the documentation and/or other
        materials provided with the distribution.</para>
    </listitem>
  </orderedlist>

  <important>
    <para xml:lang="en">THIS DOCUMENTATION IS PROVIDED BY THE FREEBSD DOCUMENTATION
      PROJECT "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
      BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
      FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
      THE FREEBSD DOCUMENTATION PROJECT BE LIABLE FOR ANY DIRECT, INDIRECT,
      INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
      OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
      TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
      USE OF THIS DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
      DAMAGE.</para>
  </important>
</legalnotice>


    <legalnotice xml:id="trademarks" role="trademarks">
      <para>FreeBSD 是 FreeBSD 基金會的註冊商標。</para>
      <para>UNIX 是 The Open Group 在美國和其他國家的註冊商標。</para>
      <para>Sun, Sun Microsystems, Java, Java Virtual Machine, JDK, JRE, JSP, JVM, Netra, OpenJDK, Solaris, StarOffice, SunOS 和 VirtualBox 是 Sun Microsystems, Inc. 在美國和其他國家的註冊商標。</para>
      <para xml:lang="en">Many of the designations used by
  manufacturers and sellers to distinguish their products are claimed
  as trademarks.  Where those designations appear in this document,
  and the FreeBSD Project was aware of the trademark claim, the
  designations have been followed by the <quote>™</quote> or the
  <quote>®</quote> symbol.</para>
    </legalnotice>

    <releaseinfo>$FreeBSD$</releaseinfo>
  </info>

  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter version="5.0" xml:id="why-port">

  <title>楔子</title>

  <para>幾乎每個 FreeBSD 愛用者都是透過 FreeBSD Ports Collection 來裝各式應用程式("ports")。如同 FreeBSD 的其他部分一樣， 這些 ports 都主要來自許多志工的努力成果，所以在閱讀這份文件時， 請務必感恩在心。</para>

  <para>在 FreeBSD 上面，每個人都可以提交新的 port， 或假如該 port 並沒有人維護的話，可以自願維護 —— 這點並不需要任何 commit 的權限，就可以來做這件事情。</para>
</chapter>


  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->

<chapter version="5.0" xml:id="own-port">

  <title>製作新的 Port</title>

  <para>開始對製作新的 port 或更新現有 port 有一些興趣了嗎？太好囉！</para>

  <para>下面將介紹一些建立 port 時該注意的事項。如果是想升級現有的 port ，那麼也請參閱 <xref linkend="port-upgrading"/> 說明。</para>

  <para>因為這份文件可能講得不是十分詳細，可能需要參考 <filename>/usr/ports/Mk/bsd.port.mk</filename> 這檔是所有 port 的 <filename>Makefile</filename> 檔都會用到的。就算你不是每天不斷 hacking <filename>Makefile</filename>，也可以也可以從中獲得很多相關知識。 此外，若有其他特定 port 的問題，也可以到  <link xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-ports">FreeBSD ports mailing list</link> 來獲得答案。</para>

  <note>
    <para>本文內所提及的環境變數 (<varname><replaceable>VAR</replaceable></varname>)部份， 只有一些可以替換(overridden)。大部份的環境變數(非全部)通常都會寫在 <filename>/usr/ports/Mk/bsd.port.mk</filename> 內，其他的也是差不多。 請注意：該檔並非使用一般的 tab 設定值，而是採用 1 個 tab 等於 4 個 space。 <application>Emacs</application> 與 <application>Vim</application> 應該都會在載入該檔時順便讀取相關設定值。 <citerefentry><refentrytitle>vi</refentrytitle><manvolnum>1</manvolnum></citerefentry> 及 <citerefentry><refentrytitle>ex</refentrytitle><manvolnum>1</manvolnum></citerefentry> 這兩個程式也都可以打 <command>:set tabstop=4</command> 以修改設定值。</para>
  </note>

  <para>想要找簡單的開始上手嗎？ 到 <link xlink:href="http://wiki.freebsd.org/WantedPorts">請求協助的 ports 清單</link> 瞧瞧，看看是否有你可以幫上忙的。</para>
</chapter>


  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter version="5.0" xml:id="quick-porting">

  <title>打造 Port 快速上手篇</title>

  <para>本節主要介紹如何來快速打造 port，然而實際應用時這快速方法可能不足，完整的 <quote>慢速打造 Port</quote> 的步驟在 <xref linkend="slow-porting"/> 詳述。</para>

  <para>首先取得該應用程式的原始程式碼壓縮檔(tarball)，並把它放到 <varname>DISTDIR</varname>，預設路徑應該是 <filename>/usr/ports/distfiles</filename>.</para>

  <note>
    <para>這些步驟假設軟體可以直接編譯。也就是不需要任何修改就可以直接在 FreeBSD 上執行。如果需要修改，請參見<xref linkend="slow-porting"/>。</para>
  </note>

  <note>
    <para xml:lang="en">It is recommended to set the <varname>DEVELOPER</varname>
      <citerefentry><refentrytitle>make</refentrytitle><manvolnum>1</manvolnum></citerefentry> variable in <filename>/etc/make.conf</filename>
      before getting into porting.</para>

    <screen xml:lang="en"><prompt>#</prompt> <userinput>echo DEVELOPER=yes &gt;&gt; /etc/make.conf</userinput></screen>

    <para xml:lang="en">This setting enables the <quote>developer mode</quote>
      that displays deprecation warnings and activates some further
      quality checks on calling <command>make</command>.</para>
  </note>

  <sect1 xml:id="porting-makefile">
    <title>編寫 <filename>Makefile</filename></title>

    <para>最簡單的 <filename>Makefile</filename> 大概是像這樣：</para>

    <programlisting># $FreeBSD$

PORTNAME=	oneko
PORTVERSION=	1.1b
CATEGORIES=	games
MASTER_SITES=	ftp://ftp.cs.columbia.edu/archives/X11R5/contrib/

MAINTAINER=	youremail@example.com
COMMENT=	Cat chasing a mouse all over the screen

.include &lt;bsd.port.mk&gt;</programlisting>

    <note>
      <para xml:lang="en">In some cases, the <filename>Makefile</filename> of an
	existing port may contain additional lines in the header,
	such as the name of the port and the date it was created.
	This additional information has been declared obsolete, and
	is being phased out.</para>
    </note>

    <para>嗯，大致就是這樣，看看你已經領略多少了呢？ 看到 <literal>$FreeBSD$</literal> 這一行的話，別想太多 ，當該 port 正式進入 port tree 時， <application>Subversion</application> 就會自動轉換為相關字串囉。 有關這點的細節部份，可以參閱 <link linkend="porting-samplem">sample Makefile</link> 章節。</para>
  </sect1>

  <sect1 xml:id="porting-desc">
    <title>撰寫說明檔</title>

    <para>無論是否打算再加工做成 package，有兩個檔案是任何 port 都必須要具備的。 這兩個檔分別是 <filename>pkg-descr</filename> 及 <filename>pkg-plist</filename> 。 他們檔名前面都有 <filename>pkg-</filename> 以跟其他檔案做區別。</para>

    <sect2 xml:id="porting-pkg-descr">
      <title><filename>pkg-descr</filename></title>

      <para>這是此 port 的詳細說明檔，請用一段或幾段文字來說明該 port 的作用</para>

      <note>
	<para>請注意，這檔<emphasis>絕非</emphasis>「該軟體的說明手冊」或是「如何編譯、使用該 port 的說明」！ <emphasis>若是從該軟體的 <filename>README</filename>  或 manpage 直接複製過來的話，請注意</emphasis>。他們常常不是正確的 port 描述或是格式並不適合。例如，manpage會對齊空白，這用monospace字型來看會特別糟糕。</para>
      </note>

      <para xml:lang="en">A well-written <filename>pkg-descr</filename> describes
	the port completely enough that users would not have to
	consult the documentation or visit the website to understand
	what the software does, how it can be useful, or what
	particularly nice features it has.  Mentioning certain
	requirements like a graphical toolkit, heavy dependencies,
	runtime environment, or implementation languages help users
	decide whether this port will work for them.</para>

      <para xml:lang="en">Include a URL to the official WWW homepage.  Prepend
	<emphasis>one</emphasis> of the websites (pick the most
	common one) with <literal>WWW:</literal> (followed by single
	space) so that automated tools will work correctly.  If the
	URI is the root of the website or directory, it must be
	terminated with a slash.</para>

      <note>
	<para xml:lang="en">If the listed webpage for a port is not available, try
	  to search the Internet first to see if the official site
	  moved, was renamed, or is hosted elsewhere.</para>
      </note>

      <para>這是 <filename>pkg-descr</filename>  內容的例子 ：</para>

      <programlisting>This is a port of oneko, in which a cat chases a poor mouse all over
the screen.
 :
(etc.)

WWW: http://www.oneko.org/</programlisting>
    </sect2>

    <sect2 xml:id="porting-pkg-plist">
      <title><filename>pkg-plist</filename></title>

      <para>這是該 port 所會裝的所有檔案清單，另外因為 package 會由這清單所產生，因此也被稱為『<quote>packing list (打包清單)</quote>』。路徑是相對於安裝的 prefix (通常是 <filename>/usr/local</filename> )。</para>

      <para>這是一個簡單的例子：</para>

      <programlisting>bin/oneko
man/man1/oneko.1.gz
lib/X11/app-defaults/Oneko
lib/X11/oneko/cat1.xpm
lib/X11/oneko/cat2.xpm
lib/X11/oneko/mouse.xpm</programlisting>

      <para>關於 packing list 方面，可以詳閱 <citerefentry><refentrytitle>pkg-create</refentrytitle><manvolnum>8</manvolnum></citerefentry> manual page 。</para>

      <note>
	<para>建議清單內的檔名，依照字母順序作排序，那麼下次要升級時， 會比較清楚、方便來更新這份清單。 </para>
      </note>

      <tip>
	<para>手動產生這份清單實在太苦了。尤其若該 port 會裝一大堆檔案的話， 請多善用 <link linkend="plist-autoplist">自動產生 packing list</link> 會比較省時省力唷。</para>
      </tip>

      <para>只有在一種情況下可以省略 <filename>pkg-plist</filename> 檔： 若安裝的 port 相當單純，只有裝一些檔案，那麼可以在 <filename>Makefile</filename> 內改用 <varname>PLIST_FILES</varname> 來取代。 比如，可以在上述的 <filename>oneko</filename> port 內不必附上 <filename>pkg-plist</filename> ，而只需在 <filename>Makefile</filename> 內加入下列幾行：</para>

      <programlisting>PLIST_FILES=	bin/oneko \
		man/man1/oneko.1.gz \
		lib/X11/app-defaults/Oneko \
		lib/X11/oneko/cat1.xpm \
		lib/X11/oneko/cat2.xpm \
		lib/X11/oneko/mouse.xpm</programlisting>

      <note>
	<para xml:lang="en">Usage of <varname>PLIST_FILES</varname> should not be
	  abused.  When looking for the origin of a file, people
	  usually try to <application>grep</application> through the
	  <filename>pkg-plist</filename> files in the ports tree.
	  Listing files in <varname>PLIST_FILES</varname> in the
	  <filename>Makefile</filename> makes that search more
	  difficult.</para>
      </note>

      <tip>
	<para xml:lang="en">If a port needs to create an empty directory, or creates
	  directories outside of <filename>${PREFIX}</filename> during
	  installation, refer to <xref linkend="plist-dir-cleaning"/>
	  for more information.</para>
      </tip>

      <para>然而，使用這個方法列出 port 的檔案和目錄是必須付出代價： 不能使用 <citerefentry><refentrytitle>pkg-create</refentrytitle><manvolnum>8</manvolnum></citerefentry> 和 <xref linkend="plist-keywords"/> 描述的關鍵字。 因此，這招僅適用於較簡單的 port ，以及簡化該 port 的作法。 此外，這招還有一個好處：可以減少 ports collection 的整體檔案總數。 所以，在考慮是否要用 <filename>pkg-plist</filename> 之前， 可以先斟酌這個替代方案看看。</para>

      <para>後面會介紹到如何運用 <filename>pkg-plist</filename>、 <varname>PLIST_FILES</varname> 這些技巧以因應<link linkend="plist">更複雜的狀況</link>。</para>
    </sect2>
  </sect1>

  <sect1 xml:id="porting-checksum">
    <title>產生 checksum 檔</title>

    <para>只要打 <command>make makesum</command> 就好了， 接下來就會自動產生相對應的 <filename>distinfo</filename> 檔了唷 。</para>
  </sect1>

  <sect1 xml:id="porting-testing">
    <title>測試 Port</title>

    <para>接下來，必須檢驗是否有符合 port 的遊戲規則，包括打包該 port 為 package。 以下有幾個需要確認的重要地方：</para>

    <itemizedlist>
      <listitem>
	<para>若該 port 沒裝的東西，不要列在 <filename>pkg-plist</filename> 內。</para>
      </listitem>

      <listitem>
	<para>若該 port 有裝的東西，請務必列在 <filename>pkg-plist</filename> 內。</para>
      </listitem>

      <listitem>
	<para xml:lang="en">The port can be installed using the
	  <buildtarget xml:lang="en">install</buildtarget> target.  This verifies
	  that the install script works correctly.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">The port can be deinstalled properly using the
	  <buildtarget xml:lang="en">deinstall</buildtarget> target.  This
	  verifies that the deinstall script works correctly.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">The port does not access network resources after the
	  <buildtarget xml:lang="en">fetch</buildtarget> target.  This is important
	  for package builders, such as <package role="port">ports-mgmt/poudriere</package>.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Make sure that <command>make package</command> can be
	  run as a normal user (that is, not as
	  <systemitem class="username">root</systemitem>).  If that
	  fails, <literal>NEED_ROOT=yes</literal> must be added to
	  the port <filename>Makefile</filename>.</para>
      </listitem>
    </itemizedlist>

    <procedure>
      <title>建議的測試順序</title>

      <step>
	<para><command>make stage</command></para>
      </step>

      <step>
	<para><command>make check-orphans</command></para>
      </step>

      <step>
	<para><command>make package</command></para>
      </step>

      <step>
	<para><command>make install</command></para>
      </step>

      <step>
	<para><command>make deinstall</command></para>
      </step>

      <step>
	<para><command>pkg add <replaceable>package-filename</replaceable></command></para>
      </step>

      <step>
	<para xml:lang="en"><command>make package</command> (as user)</para>
      </step>
    </procedure>

    <para>確認在任何階段都沒有任何警告出現。</para>

    <para xml:lang="en">Thorough automated testing can be done with
      <package role="port">ports-mgmt/tinderbox</package> or
      <package role="port">ports-mgmt/poudriere</package> from the
      Ports Collection.  These applications maintain
      <literal>jails</literal> where all of the steps shown above
      can be tested without affecting the state of the host
      system.</para>
  </sect1>

  <sect1 xml:id="porting-portlint">
    <title>以 <command>portlint</command> 來作檢查 Port</title>

    <para>請用 <command>portlint</command> 來檢查該 port 是否有遵循我們的規則。 <package role="port">ports-mgmt/portlint</package> 是 ports collection 的其中一個套件。 它主要可以用來檢驗 <link linkend="porting-samplem">Makefile</link> 內容是否正確以及 <link linkend="porting-pkgname">package</link> 是否有正確命名。</para>
  </sect1>

  <sect1 xml:id="porting-submitting">
    <title>提交新的 Port</title>

    <para>提交新的 Port 前，請閱讀 <link linkend="porting-dads">DOs and DON'Ts</link> 章節。</para>

    <para>現在你很高興終於打造出 port 來囉，唯一剩下要做的就是把它正式放到 FreeBSD ports tree 內，才能讓每個人都能分享使用這個 port。 我們不需要 <filename>work</filename> 目錄或是檔名像 <filename>pkgname.tgz</filename> 的 package ，請現在刪除他們。</para>

    <para xml:lang="en">Next, build the <citerefentry><refentrytitle>shar</refentrytitle><manvolnum>1</manvolnum></citerefentry> file.  Assuming the port is
      called <literal>oneko</literal>, <command>cd</command> to the
      directory above where the <literal>oneko</literal> directory
      is located, and then type:
      <command>shar `find oneko` &gt; oneko.shar</command></para>

    <!-- The link here is wrong, but, I have no idea where
    to point it now, so commenting the whole paragraph.

    <para>Include <filename>oneko.shar</filename> in a bug
      report and submit it.  See <link
	xlink:href="&url.articles.contributing;/contrib-how.html#CONTRIB-GENERAL">Bug
	Reports and General Commentary</link> for more information
      submitting problem reports.</para> -->

    <para xml:lang="en">To submit <filename>oneko.shar</filename>, use the <link xlink:href="https://bugs.freebsd.org/submit/">bug submit
	form</link> (category <literal>Ports Tree</literal>).
      Add a short
      description of the program to the Description field of the PR
      (perhaps a short version of <varname>COMMENT</varname>), and
      do not forget to add <filename>oneko.shar</filename> as an
      attachment.</para>

    <note>
      <para xml:lang="en">Giving a good description in the summary of the problem
	report makes the work of port committers a lot easier.  We
	prefer something like <quote>New port:
	  <replaceable>category</replaceable>/<replaceable>portname</replaceable> <replaceable>short description of
	    the port</replaceable></quote> for new ports.  Using this
	scheme makes it easier and faster to begin the work of
	committing the new port.</para>
    </note>

    <para>再次強調一點：<emphasis>不必附上原始 source 的 distfile ，也就是 <filename>work</filename> 目錄。 同時，也不必附上 <command>make package</command> 時產生的 package</emphasis>。新的 port 請使用 <citerefentry><refentrytitle>shar</refentrytitle><manvolnum>1</manvolnum></citerefentry> ，不要用 <citerefentry><refentrytitle>diff</refentrytitle><manvolnum>1</manvolnum></citerefentry> 。</para>

    <para>送出 port 之後，請耐心等候佳音。 有時候可能需要等個幾天或幾個月時間，才會在 FreeBSD ports tree 上正式出現。 等待中的 port <acronym>PR</acronym> 清單可以在 <link xlink:href="http://www.FreeBSD.org/cgi/query-pr-summary.cgi?category=ports"/> 查閱。</para>

    <para>在看過新的 port 之後，如果需要的話，我們會回覆您，然後會將它提交到 port tree 。 您的大名會被列在 <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/articles/contributors/contrib-additional.html">Additional FreeBSD Contributors</link> 列表上，以及其他檔案中。</para>
  </sect1>
</chapter>

  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter version="5.0" xml:id="slow-porting">

  <title xml:lang="en">Slow Porting</title>

  <para>Ok...事實上並不太可能這麼簡單，port 方面可能需要作些修改才能正常使用。 因此， 本節將一步一步來介紹如何修改上一章的樣本以正常使用。</para>

  <sect1 xml:id="slow-work">
    <title xml:lang="en">How Things Work</title>

    <para xml:lang="en">First, this is the sequence of events which occurs when the
      user first types <command>make</command> in the port's
      directory.  Having
      <filename>bsd.port.mk</filename> in another window while
      reading this really helps to understand it.</para>

    <para>別太擔心，不是很多人都真的了解 <filename>bsd.port.mk</filename> 在做什麼... <emphasis>:-)</emphasis></para>

    <procedure>
      <step>
	<para xml:lang="en">The <buildtarget xml:lang="en">fetch</buildtarget> target is run.  The
	  <buildtarget xml:lang="en">fetch</buildtarget> target is responsible for
	  making sure that the tarball exists locally in
	  <varname>DISTDIR</varname>.  If
	  <buildtarget xml:lang="en">fetch</buildtarget> cannot find the required
	  files in <varname>DISTDIR</varname> it will look up the URL
	  <varname>MASTER_SITES</varname>, which is set in the
	  Makefile, as well as our FTP mirrors where we put distfiles
	  as backup.  It will then attempt to fetch the named
	  distribution file with <varname>FETCH</varname>, assuming
	  that the requesting site has direct access to the Internet.
	  If that succeeds, it will save the file in
	  <varname>DISTDIR</varname> for future use and
	  proceed.</para>
      </step>

      <step>
	<para xml:lang="en">The <buildtarget xml:lang="en">extract</buildtarget> target is run.
	  It looks for the port's distribution file (typically a
	  <command>gzip</command>ped tarball) in
	  <varname>DISTDIR</varname> and unpacks it into a temporary
	  subdirectory specified by <varname>WRKDIR</varname>
	  (defaults to <filename>work</filename>).</para>
      </step>

      <step>
	<para xml:lang="en">The <buildtarget xml:lang="en">patch</buildtarget> target is run.
	  First, any patches defined in <varname>PATCHFILES</varname>
	  are applied.  Second, if any patch files named
	  <filename>patch-<replaceable>*</replaceable></filename> are
	  found in <varname>PATCHDIR</varname> (defaults to the
	  <filename>files</filename> subdirectory), they are applied
	  at this time in alphabetical order.</para>
      </step>

      <step>
	<para xml:lang="en">The <buildtarget xml:lang="en">configure</buildtarget> target is run.
	  This can do any one of many different things.</para>

	<orderedlist>
	  <listitem>
	    <para xml:lang="en">If it exists, <filename>scripts/configure</filename>
	      is run.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">If <varname>HAS_CONFIGURE</varname> or
	      <varname>GNU_CONFIGURE</varname> is set,
	      <filename>WRKSRC/configure</filename> is run.</para>
	  </listitem>
	</orderedlist>
      </step>

      <step>
	<para xml:lang="en">The <buildtarget xml:lang="en">build</buildtarget> target is run.
	  This is responsible for descending into the port's private
	  working directory (<varname>WRKSRC</varname>) and building
	  it.</para>
      </step>

      <step>
	<para xml:lang="en">The <buildtarget xml:lang="en">stage</buildtarget> target is run.
	  This puts the final set of built files into a temporary
	  directory (<varname>STAGEDIR</varname>, see
	  <xref linkend="staging"/>).  The hierarchy of this directory
	  mirrors that of the system on which the package will be
	  installed.</para>
      </step>

      <step>
	<para xml:lang="en">The <buildtarget xml:lang="en">package</buildtarget> target is run.
	  This creates a package using the files from the temporary
	  directory created during the
	  <buildtarget xml:lang="en">stage</buildtarget> target and the port's
	  <filename>pkg-plist</filename>.</para>
      </step>

      <step>
	<para xml:lang="en">The <buildtarget xml:lang="en">install</buildtarget> target is run.
	  This installs the package created during the
	  <buildtarget xml:lang="en">package</buildtarget> target into the host
	  system.</para>
      </step>
    </procedure>

    <para xml:lang="en">The above are the default actions.  In addition,
      define targets
      <buildtarget xml:lang="en">pre-<replaceable>something</replaceable></buildtarget>
      or
      <buildtarget xml:lang="en">post-<replaceable>something</replaceable></buildtarget>,
      or put scripts with those names, in the
      <filename>scripts</filename> subdirectory, and they will be
      run before or after the default actions are done.</para>

    <para xml:lang="en">For example, if there is a
      <buildtarget xml:lang="en">post-extract</buildtarget> target defined in the
      <filename>Makefile</filename>, and a file
      <filename>pre-build</filename> in the
      <filename>scripts</filename> subdirectory, the
      <buildtarget xml:lang="en">post-extract</buildtarget> target will be called
      after the regular extraction actions, and
      <filename>pre-build</filename> will be executed before
      the default build rules are done.  It is recommended to
      use <filename>Makefile</filename> targets if the actions are
      simple enough, because it will be easier for someone to figure
      out what kind of non-default action the port requires.</para>

    <para xml:lang="en">The default actions are done by the
      <buildtarget xml:lang="en">do-<replaceable>something</replaceable></buildtarget>
      targets from <filename>bsd.port.mk</filename>.
      For example, the commands to extract a port are in the target
      <buildtarget xml:lang="en">do-extract</buildtarget>.  If
      the default target does not do the job right, redefine the
      <buildtarget xml:lang="en">do-<replaceable>something</replaceable></buildtarget>
      target in the <filename>Makefile</filename>.</para>

    <note>
      <para xml:lang="en">The <quote>main</quote> targets (for example,
	<buildtarget xml:lang="en">extract</buildtarget>,
	<buildtarget xml:lang="en">configure</buildtarget>, etc.) do nothing more
	than make sure all the stages up to that one are completed and
	call the real targets or scripts, and they are not intended to
	be changed.  To fix the extraction, fix
	<buildtarget xml:lang="en">do-extract</buildtarget>, but never ever change
	the way <buildtarget xml:lang="en">extract</buildtarget> operates!
	Additionally, the target
	<buildtarget xml:lang="en">post-deinstall</buildtarget> is invalid and is
	not run by the ports infrastructure.</para>
    </note>

    <para xml:lang="en">Now that what goes on when the user types <command>make
	install</command> is better understood, let us go through the
      recommended steps to create the perfect port.</para>
  </sect1>

  <sect1 xml:id="slow-sources">
    <title>取得原始碼</title>

    <para xml:lang="en">Get the original sources (normally) as a compressed tarball
      (<filename>foo.tar.gz</filename> or
      <filename><replaceable>foo</replaceable>.tar.bz2</filename>) and
      copy it into <varname>DISTDIR</varname>.  Always use
      <emphasis>mainstream</emphasis> sources when and where
      possible.</para>

    <para xml:lang="en">Set the variable
      <varname>MASTER_SITES</varname> to reflect where the original
      tarball resides.  Shorthand definitions exist
      for most mainstream sites in <filename>bsd.sites.mk</filename>.
      Please use these sites—and the associated
      definitions—if at all possible, to help avoid the problem
      of having the same information repeated over again many times in
      the source base.  As these sites tend to change over time, this
      becomes a maintenance nightmare for everyone involved.  See
      <xref linkend="makefile-master_sites"/> for details.</para>

    <para xml:lang="en">If there is no FTP/HTTP site that is well-connected to
      the net, or can only find sites that have irritatingly
      non-standard formats, put a copy on a reliable
      FTP or HTTP server (for example, a home
      page).</para>

    <para xml:lang="en">If a convenient and reliable place to put
      the distfile cannot be found, we can <quote>house</quote> it ourselves on
      <systemitem>ftp.FreeBSD.org</systemitem>; however, this is the
      least-preferred solution.  The distfile must be placed into
      <filename>~/public_distfiles/</filename> of someone's
      <systemitem>freefall</systemitem> account.  Ask the person who
      commits the port to do this.  This person will also set
      <varname>MASTER_SITES</varname> to
      <literal>LOCAL/<replaceable>username</replaceable></literal>
      where <literal><replaceable>username</replaceable></literal> is
      their FreeBSD cluster login.</para>

    <para xml:lang="en">If the port's distfile changes all the time without any
      kind of version update by the author, consider putting the
      distfile on a home page and listing it as the first
      <varname>MASTER_SITES</varname>.  Try to talk the
      port author out of doing this; it really does help to establish
      some kind of source code control.  Hosting a specific version will
      prevent users from getting
      <errorname>checksum mismatch</errorname> errors, and also reduce
      the workload of maintainers of our FTP site.  Also, if there is
      only one master site for the port, it is recommended to
      house a backup on a home page and list it as the second
      <varname>MASTER_SITES</varname>.</para>

    <para xml:lang="en">If the port requires additional patches that are
      available on the Internet, fetch them too and put them in
      <varname>DISTDIR</varname>.  Do not worry if they come from a
      site other than where the main source tarball comes, we have a
      way to handle these situations (see the description of <link linkend="porting-patchfiles">PATCHFILES</link> below).</para>
  </sect1>

  <sect1 xml:id="slow-modifying">
    <title xml:lang="en">Modifying the Port</title>

    <para xml:lang="en">Unpack a copy of the tarball in a private directory and make
      whatever changes are necessary to get the port to compile
      properly under the current version of FreeBSD.  Keep
      <emphasis>careful track</emphasis> of steps, as they will be
      needed to automate the process shortly.  Everything, including
      the deletion, addition, or modification of files has to be
      doable using an automated script or patch file when the port is
      finished.</para>

    <para xml:lang="en">If the port requires significant user
      interaction/customization to compile or install, take
      a look at one of Larry Wall's classic
      <application>Configure</application> scripts and perhaps do
      something similar.  The goal of the new ports
      collection is to make each port as <quote>plug-and-play</quote>
      as possible for the end-user while using a minimum of disk
      space.</para>

    <note>
      <para xml:lang="en">Unless explicitly stated, patch files, scripts, and other
	files created and contributed to the FreeBSD ports
	collection are assumed to be covered by the standard BSD
	copyright conditions.</para>
    </note>
  </sect1>

  <sect1 xml:id="slow-patch">
    <title xml:lang="en">Patching</title>

    <para xml:lang="en">In the preparation of the port, files that have been added
      or changed can be recorded with <citerefentry><refentrytitle>diff</refentrytitle><manvolnum>1</manvolnum></citerefentry> for later feeding
      to <citerefentry><refentrytitle>patch</refentrytitle><manvolnum>1</manvolnum></citerefentry>.  Doing this with a typical file involves
      saving a copy of the original file before making any changes
      using a <filename>.orig</filename> suffix.</para>

    <screen><prompt>%</prompt> <userinput>cp <replaceable>file</replaceable> <replaceable>file</replaceable>.orig</userinput></screen>

    <para xml:lang="en">After all changes have been made, <command>cd</command> back
      to the port directory.  Use <command>make makepatch</command> to
      generate updated patch files in the <filename>files</filename>
      directory.</para>

    <sect2 xml:id="slow-patch-rules">
      <title xml:lang="en">General Rules for Patching</title>

      <para xml:lang="en">Patch files are stored in <varname>PATCHDIR</varname>,
	usually <filename>files/</filename>, from where they will be
	automatically applied.  All patches must be relative to
	<varname>WRKSRC</varname>.  Typically
	<varname>WRKSRC</varname> is a subdirectory of
	<varname>WRKDIR</varname>, the directory where the distfile is
	extracted.  Use <command>make -V WRKSRC</command> to see the
	actual path.  The patch names are to follow these
	rules:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en">Avoid having more than one patch modify the same file.
	    For example, having both
	    <filename>patch-foobar.c</filename> and
	    <filename>patch-foobar.c2</filename> making changes to
	    <filename>${WRKSRC}/foobar.c</filename> makes them fragile
	    and difficult to debug.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">When creating names for patch files, replace each
	    underscore (<literal>_</literal>) with two underscores
	    (<literal>__</literal>) and each slash
	    (<literal>/</literal>) with one underscore
	    (<literal>_</literal>).  For example, to patch a file
	    named <filename>src/freeglut_joystick.c</filename>, name
	    the corresponding patch
	    <filename>patch-src_freeglut__joystick.c</filename>.  Do
	    not name patches like <filename>patch-aa</filename> or
	    <filename>patch-ab</filename>.  Always use the path and
	    file name in patch names.  Using <command>make
	      makepatch</command> automatically generates the correct
	    names.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">A patch may modify multiple files if the changes are
	    related and the patch is named appropriately.  For
	    example,
	    <filename>patch-add-missing-stdlib.h</filename>.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">Only use characters <literal>[-+._a-zA-Z0-9]</literal>
	    for naming patches.  In particular, <emphasis>do not use
	      <literal>::</literal> as a path separator,</emphasis>
	    use <literal>_</literal> instead.</para>
	</listitem>
      </itemizedlist>


      <para xml:lang="en">Minimize the amount of non-functional whitespace changes
	in patches.  It is common in the Open Source world for
	projects to share large amounts of a code base, but obey
	different style and indenting rules.  When taking a working
	piece of functionality from one project to fix similar areas
	in another, please be careful: the resulting patch may be full
	of non-functional changes.  It not only increases the size of
	the ports repository but makes it hard to find out what
	exactly caused the problem and what was changed at all.</para>

      <para xml:lang="en">If a file must be deleted, do it in the
	<buildtarget xml:lang="en">post-extract</buildtarget> target rather than as
	part of the patch.</para>

    </sect2>

    <sect2 xml:id="slow-patch-manual">
      <title xml:lang="en">Manual Patch Generation</title>

      <note>
	<para xml:lang="en">Manual patch creation is usually not necessary.
	  Automatic patch generation as described earlier in this
	  section is the preferred method.  However, manual patching
	  may be required occasionally.</para>
      </note>

      <para xml:lang="en">Patches are saved into files named
	<filename>patch-*</filename> where
	<replaceable>*</replaceable> indicates the pathname of the
	file that is patched, such as
	<filename>patch-Imakefile</filename> or
	<filename>patch-src-config.h</filename>.</para>

      <para xml:lang="en">After the file has been modified, <citerefentry><refentrytitle>diff</refentrytitle><manvolnum>1</manvolnum></citerefentry> is used to
	record the differences between the original and the modified
	version.  <option>-u</option> causes <citerefentry><refentrytitle>diff</refentrytitle><manvolnum>1</manvolnum></citerefentry> to produce
	<quote>unified</quote> diffs, the preferred form.</para>

      <screen><prompt>%</prompt> <userinput>diff -u <replaceable>file</replaceable>.orig <replaceable>file</replaceable> &gt; patch-<replaceable>pathname-file</replaceable></userinput></screen>

      <para xml:lang="en">When generating patches for new, added files,
	<option>-N</option> is used to tell <citerefentry><refentrytitle>diff</refentrytitle><manvolnum>1</manvolnum></citerefentry> to treat the
	non-existent original file as if it existed but was
	empty:</para>

      <screen><prompt>%</prompt> <userinput>diff -u -N <replaceable>newfile</replaceable>.orig <replaceable>newfile</replaceable> &gt; patch-<replaceable>pathname-newfile</replaceable></userinput></screen>

      <para xml:lang="en">Do not add <literal>$FreeBSD$</literal> RCS
	strings in patches.  When patches are added to the
	<application>Subversion</application> repository with
	<command>svn add</command>, the
	<literal>fbsd:nokeywords</literal> property is set to
	<literal>yes</literal> automatically so keywords in the patch
	are not modified when committed.  The property can be added
	manually with <command>svn propset fbsd:nokeywords yes
	  <replaceable>files...</replaceable></command>.</para>

      <para xml:lang="en">Using the recurse (<option>-r</option>) option to
	<citerefentry><refentrytitle>diff</refentrytitle><manvolnum>1</manvolnum></citerefentry> to generate patches is fine, but please look at
	the resulting patches to make sure there is no unnecessary
	junk in there.  In particular, diffs between two backup files,
	<filename>Makefile</filename>s when the port uses
	<command>Imake</command> or GNU <command>configure</command>,
	etc., are unnecessary and have to be deleted.  If it was
	necessary to edit <filename>configure.in</filename> and run
	<command>autoconf</command> to regenerate
	<command>configure</command>, do not take the diffs of
	<command>configure</command> (it often grows to a few thousand
	lines!).  Instead, define
	<literal>USE_AUTOTOOLS=autoconf:261</literal> and take the
	diffs of <filename>configure.in</filename>.</para>

    </sect2>

    <sect2 xml:id="slow-patch-automatic-replacements">
      <title xml:lang="en">Simple Automatic Replacements</title>

      <para xml:lang="en">Simple replacements can be performed directly from the
	port <filename>Makefile</filename> using the in-place mode of
	<citerefentry><refentrytitle>sed</refentrytitle><manvolnum>1</manvolnum></citerefentry>.  This is useful when changes use the value of a
	variable:</para>

      <programlisting>post-patch:
	@${REINPLACE_CMD} -e 's|for Linux|for FreeBSD|g' ${WRKSRC}/README</programlisting>

      <para xml:lang="en">Quite often, software being ported uses the CR/LF
	convention in source files.  This may cause problems with
	further patching, compiler warnings, or script execution (like
	<literal>/bin/sh^M not found</literal>.)  To quickly convert
	all files from CR/LF to just LF, add this entry to the port
	<filename>Makefile</filename>:</para>

      <programlisting>USES=	dos2unix</programlisting>

      <para xml:lang="en">A list of specific files to convert can be given:</para>

      <programlisting>USES=	dos2unix
DOS2UNIX_FILES=	util.c util.h</programlisting>

      <para xml:lang="en">Use <varname>DOS2UNIX_REGEX</varname> to convert a group
	of files across subdirectories.  Its argument is a
	<citerefentry><refentrytitle>find</refentrytitle><manvolnum>1</manvolnum></citerefentry>-compatible regular expression.  More on the
	format is in <citerefentry><refentrytitle>re_format</refentrytitle><manvolnum>7</manvolnum></citerefentry>.  This option is useful for
	converting all files of a given extension.  For example,
	convert all source code files, leaving binary files
	intact:</para>

      <programlisting>USES=	dos2unix
DOS2UNIX_REGEX=	.*\.([ch]|cpp)</programlisting>

      <para xml:lang="en">A similar option is <varname>DOS2UNIX_GLOB</varname>,
	which runs <command>find</command> for each element listed
	in it.</para>

      <programlisting>USES=	dos2unix
DOS2UNIX_GLOB=	*.c *.cpp *.h</programlisting>
    </sect2>
  </sect1>

  <sect1 xml:id="slow-configure">
    <title>設定</title>

    <para xml:lang="en">Include any additional customization commands in the
      <filename>configure</filename> script and save it in the
      <filename>scripts</filename> subdirectory.  As mentioned above,
      it is also possible do this with <filename>Makefile</filename> targets
      and/or scripts with the name <filename>pre-configure</filename>
      or <filename>post-configure</filename>.</para>
  </sect1>

  <sect1 xml:id="slow-user-input">
    <title>處理使用者輸入</title>

    <para xml:lang="en">If the port requires user input to build, configure, or
      install, set <varname>IS_INTERACTIVE</varname> in the
      <filename>Makefile</filename>.  This will allow
      <quote>overnight builds</quote> to skip it.  If the user
      sets the variable <envar>BATCH</envar> in his environment (and
      if the user sets the variable <envar>INTERACTIVE</envar>, then
      <emphasis>only</emphasis> those ports requiring interaction are
      built).  This will save a lot of wasted time on the set of
      machines that continually build ports (see below).</para>

    <para xml:lang="en">It is also recommended that if there are reasonable default
      answers to the questions,
      <varname>PACKAGE_BUILDING</varname> be used to turn off the
      interactive script when it is set.  This will allow us to build
      the packages for CDROMs and FTP.</para>
  </sect1>
</chapter>

  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter version="5.0" xml:id="makefiles">

  <title>設定 Makefile</title>

  <para xml:lang="en">Configuring the <filename>Makefile</filename> is pretty
    simple, and again we suggest looking at existing examples
    before starting.  Also, there is a
    <link linkend="porting-samplem">sample Makefile</link> in this
    handbook, so take a look and please follow the ordering of
    variables and sections in that template to make the port easier
    for others to read.</para>

  <para xml:lang="en">Consider these problems in sequence during the
    design of the new <filename>Makefile</filename>:</para>

  <sect1 xml:id="makefile-source">
    <title xml:lang="en">The Original Source</title>

    <para xml:lang="en">Does it live in <varname>DISTDIR</varname> as a standard
      <command>gzip</command>ped tarball named something like
      <filename>foozolix-1.2.tar.gz</filename>? If so, go on
      to the next step.  If not, the distribution file format might
      require overriding one or more of
      <varname>DISTVERSION</varname>, <varname>DISTNAME</varname>,
      <varname>EXTRACT_CMD</varname>,
      <varname>EXTRACT_BEFORE_ARGS</varname>,
      <varname>EXTRACT_AFTER_ARGS</varname>,
      <varname>EXTRACT_SUFX</varname>, or
      <varname>DISTFILES</varname>.</para>

    <para xml:lang="en">In the worst case, create a custom
      <buildtarget xml:lang="en">do-extract</buildtarget> target to override the
      default.  This is rarely, if ever, necessary.</para>
  </sect1>

  <sect1 xml:id="makefile-naming">
    <title>命名</title>

    <para xml:lang="en">The first part of the port's <filename>Makefile</filename>
      names the port, describes its version number, and lists it in
      the correct category.</para>

    <sect2 xml:id="makefile-portname">
      <title xml:lang="en"><varname>PORTNAME</varname> and
	<varname>PORTVERSION</varname></title>

      <para xml:lang="en">Set <varname>PORTNAME</varname> to the base
	name of the port.  Set <varname>PORTVERSION</varname> to the
	version number of the port unless
	<varname>DISTVERSION</varname> is used (see
	<xref linkend="makefile-distversion"/>).</para>

      <important>
	<para xml:lang="en">The package name must be unique across the entire ports
	  tree.  Make sure that the <varname>PORTNAME</varname> is not
	  already in use by an existing port.  If the name has already
	  been used, add either
	  <link linkend="porting-pkgnameprefix-suffix"><varname>PKGNAMEPREFIX</varname>
	    or <varname>PKGNAMESUFFIX</varname></link>.</para>
      </important>
    </sect2>

    <sect2 xml:id="makefile-naming-revepoch">
      <title xml:lang="en"><varname>PORTREVISION</varname> and
	<varname>PORTEPOCH</varname></title>

      <sect3 xml:id="makefile-portrevision">
	<title xml:lang="en"><varname>PORTREVISION</varname></title>

	<para xml:lang="en"><varname>PORTREVISION</varname> is a
	  monotonically increasing value which is reset to 0 with
	  every increase of <varname>PORTVERSION</varname>, typically
	  every time there is a new official vendor release.  If
	  <varname>PORTREVISION</varname> is non-zero, the value is
	  appended to the package name.  Changes to
	  <varname>PORTREVISION</varname> are used by automated tools
	  like <citerefentry><refentrytitle>pkg-version</refentrytitle><manvolnum>8</manvolnum></citerefentry> to determine that a new package is
	  available.</para>

	<para xml:lang="en"><varname>PORTREVISION</varname> must be increased each
	  time a change is made to the port that changes the generated
	  package in any way.  That includes changes that only affect
	  a package built with non-default
	  <link linkend="makefile-options">options</link>.</para>

	<para xml:lang="en">Examples of when <varname>PORTREVISION</varname>
	  must be bumped:</para>

	<itemizedlist>
	  <listitem>
	    <para xml:lang="en">Addition of patches to correct security
	      vulnerabilities, bugs, or to add new functionality to
	      the port.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">Changes to the port <filename>Makefile</filename> to
	      enable or disable compile-time options in the
	      package.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">Changes in the packing list or the install-time
	      behavior of the package.  For example, a change to a
	      script which generates initial data for the package,
	      like <citerefentry><refentrytitle>ssh</refentrytitle><manvolnum>1</manvolnum></citerefentry> host keys.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">Version bump of a port's shared library dependency
	      (in this case, someone trying to install the old package
	      after installing a newer version of the dependency will
	      fail since it will look for the old libfoo.x instead of
	      libfoo.(x+1)).</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">Silent changes to the port distfile which have
	      significant functional differences.  For example,
	      changes to the distfile requiring a correction to
	      <filename>distinfo</filename> with no corresponding
	      change to <varname>PORTVERSION</varname>, where a
	      <command>diff -ru</command> of the old and new versions
	      shows non-trivial changes to the code.</para>
	  </listitem>
	</itemizedlist>

	<para xml:lang="en">Examples of changes which do not require a
	  <varname>PORTREVISION</varname> bump:</para>

	<itemizedlist>
	  <listitem>
	    <para xml:lang="en">Style changes to the port skeleton with no
	      functional change to what appears in the resulting
	      package.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">Changes to <varname>MASTER_SITES</varname> or other
	      functional changes to the port which do not affect the
	      resulting package.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">Trivial patches to the distfile such as correction
	      of typos, which are not important enough that users of
	      the package have to go to the trouble of
	      upgrading.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">Build fixes which cause a package to become
	      compilable where it was previously failing.  As long as
	      the changes do not introduce any functional change on
	      any other platforms on which the port did previously
	      build.  Since <varname>PORTREVISION</varname> reflects
	      the content of the package, if the package was not
	      previously buildable then there is no need to increase
	      <varname>PORTREVISION</varname> to mark a change.</para>
	  </listitem>
	</itemizedlist>

	<para xml:lang="en">A rule of thumb is to decide whether a change
	  committed to a port is something which
	  <emphasis>some</emphasis> people would benefit from having.
	  Either because of an enhancement, fix,
	  or by virtue that the new package will actually work at
	  all.  Then weigh that against that fact that it will cause
	  everyone who regularly updates their ports tree to be
	  compelled to update.  If yes,
	  <varname>PORTREVISION</varname> must be bumped.</para>

	<note>
	  <para xml:lang="en">People using binary packages will
	    <emphasis>never</emphasis> see the update if
	    <varname>PORTREVISION</varname> is not bumped.  Without
	    increasing <varname>PORTREVISION</varname>, the
	    package builders have no way to detect the change and
	    thus, will not rebuild the package.</para>
	</note>
      </sect3>

      <sect3 xml:id="makefile-portepoch">
	<title xml:lang="en"><varname>PORTEPOCH</varname></title>

	<para xml:lang="en">From time to time a software vendor or FreeBSD porter will
	  do something silly and release a version of their software
	  which is actually numerically less than the previous
	  version.  An example of this is a port which goes from
	  foo-20000801 to foo-1.0 (the former will be incorrectly
	  treated as a newer version since 20000801 is a numerically
	  greater value than 1).</para>

	<tip>
	  <para xml:lang="en">The results of version number comparisons are not
	    always obvious.  <command>pkg version</command> (see
	    <citerefentry><refentrytitle>pkg-version</refentrytitle><manvolnum>8</manvolnum></citerefentry>) can be used to test the comparison of
	    two version number strings.  For example:</para>

	  <screen><prompt>%</prompt> <userinput>pkg version -t 0.031 0.29</userinput>
&gt;</screen>

	  <para xml:lang="en">The <literal>&gt;</literal> output indicates that
	    version 0.031 is considered greater than version 0.29,
	    which may not have been obvious to the porter.</para>
	</tip>

	<para xml:lang="en">In situations such as this,
	  <varname>PORTEPOCH</varname> must be increased.
	  If <varname>PORTEPOCH</varname> is nonzero it is appended to
	  the package name as described in section 0 above.
	  <varname>PORTEPOCH</varname> must never be decreased or
	  reset to zero, because that would cause comparison to a
	  package from an earlier epoch to fail.  For example, the
	  package would not be detected as out of date.  The new
	  version number, <literal>1.0,1</literal> in the above
	  example, is still numerically less than the previous
	  version, 20000801, but the <literal>,1</literal> suffix is
	  treated specially by automated tools and found to be greater
	  than the implied suffix <literal>,0</literal> on the earlier
	  package.</para>

	<para xml:lang="en">Dropping or resetting <varname>PORTEPOCH</varname>
	  incorrectly leads to no end of grief.  If the discussion
	  above was not clear enough, please consult the
	  <link xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-ports">FreeBSD ports mailing list</link>.</para>

	<para xml:lang="en">It is expected that <varname>PORTEPOCH</varname> will
	  not be used for the majority of ports, and that sensible use
	  of <varname>PORTVERSION</varname> can often preempt it
	  becoming necessary if a future release of the software
	  changes the version structure.  However, care is
	  needed by FreeBSD porters when a vendor release is made without
	  an official version number — such as a code
	  <quote>snapshot</quote> release.  The temptation is to label
	  the release with the release date, which will cause problems
	  as in the example above when a new <quote>official</quote>
	  release is made.</para>

	<para xml:lang="en">For example, if a snapshot release is made on the date
	  <literal>20000917</literal>, and the previous version of the
	  software was version <literal>1.2</literal>, do not use
	  <literal>20000917</literal> for
	  <varname>PORTVERSION</varname>.  The correct way is a
	  <varname>PORTVERSION</varname> of
	  <literal>1.2.20000917</literal>, or similar, so that the
	  succeeding release, say <literal>1.3</literal>, is still a
	  numerically greater value.</para>
      </sect3>

      <sect3 xml:id="makefile-portrevision-example">
	<title><varname>PORTREVISION</varname> 和 <varname>PORTEPOCH</varname> 的使用範例</title>

	<para xml:lang="en">The <literal>gtkmumble</literal> port, version
	  <literal>0.10</literal>, is committed to the ports
	  collection:</para>

	<programlisting>PORTNAME=	gtkmumble
PORTVERSION=	0.10</programlisting>

	<para><varname>PKGNAME</varname> 變成 <literal>gtkmumble-0.10</literal>.</para>

	<para xml:lang="en">A security hole is discovered which requires a local
	  FreeBSD patch.  <varname>PORTREVISION</varname> is bumped
	  accordingly.</para>

	<programlisting>PORTNAME=	gtkmumble
PORTVERSION=	0.10
PORTREVISION=	1</programlisting>

	<para><varname>PKGNAME</varname> 變成 <literal>gtkmumble-0.10_1</literal></para>

	<para xml:lang="en">A new version is released by the vendor, numbered
	  <literal>0.2</literal> (it turns out the author actually
	  intended <literal>0.10</literal> to actually mean
	  <literal>0.1.0</literal>, not <quote>what comes after
	    0.9</quote> - oops, too late now).  Since the new minor
	  version <literal>2</literal> is numerically less than the
	  previous version <literal>10</literal>,
	  <varname>PORTEPOCH</varname> must be bumped to manually
	  force the new package to be detected as
	  <quote>newer</quote>.  Since it is a new vendor release of
	  the code, <varname>PORTREVISION</varname> is reset to 0 (or
	  removed from the <filename>Makefile</filename>).</para>

	<programlisting>PORTNAME=	gtkmumble
PORTVERSION=	0.2
PORTEPOCH=	1</programlisting>

	<para><varname>PKGNAME</varname> 變成 <literal>gtkmumble-0.2,1</literal></para>

	<para xml:lang="en">The next release is 0.3.  Since
	  <varname>PORTEPOCH</varname> never decreases, the version
	  variables are now:</para>

	<programlisting>PORTNAME=	gtkmumble
PORTVERSION=	0.3
PORTEPOCH=	1</programlisting>

	<para><varname>PKGNAME</varname> 變成 <literal>gtkmumble-0.3,1</literal></para>

	<note>
	  <para xml:lang="en">If <varname>PORTEPOCH</varname> were reset to
	    <literal>0</literal> with this upgrade, someone who had
	    installed the <literal>gtkmumble-0.10_1</literal> package
	    would not detect the <literal>gtkmumble-0.3</literal>
	    package as newer, since <literal>3</literal> is still
	    numerically less than <literal>10</literal>.  Remember,
	    this is the whole point of <varname>PORTEPOCH</varname> in
	    the first place.</para>
	</note>
      </sect3>
    </sect2>

    <sect2 xml:id="porting-pkgnameprefix-suffix">
      <title><varname>PKGNAMEPREFIX</varname> 和 <varname>PKGNAMESUFFIX</varname></title>

      <para xml:lang="en">Two optional variables, <varname>PKGNAMEPREFIX</varname>
	and <varname>PKGNAMESUFFIX</varname>, are combined with
	<varname>PORTNAME</varname> and <varname>PORTVERSION</varname>
	to form <varname>PKGNAME</varname> as
	<literal>${PKGNAMEPREFIX}${PORTNAME}${PKGNAMESUFFIX}-${PORTVERSION}</literal>.
	Make sure this conforms to our
	<link linkend="porting-pkgname">guidelines for a good
	  package name</link>.  In particular, the use of a
	hyphen (<literal>-</literal>) in
	<varname>PORTVERSION</varname> is <emphasis>not</emphasis>
	allowed.
	Also, if the package name has the
	<replaceable>language-</replaceable> or the
	<replaceable>-compiled.specifics</replaceable> part (see
	below), use <varname>PKGNAMEPREFIX</varname> and
	<varname>PKGNAMESUFFIX</varname>, respectively.  Do not make
	them part of <varname>PORTNAME</varname>.</para>
    </sect2>

    <sect2 xml:id="porting-pkgname">
      <title>套件命名慣例</title>

      <para xml:lang="en">These are the conventions to follow when
	naming packages.  This is to make the package directory
	easy to scan, as there are already thousands of packages and
	users are going to turn away if they hurt their eyes!</para>

      <para xml:lang="en">Package names take the form of
	<filename><replaceable>language_region-name-compiled.specifics-version.numbers</replaceable></filename>.</para>

      <para xml:lang="en">The package name is defined as
	<literal>${PKGNAMEPREFIX}${PORTNAME}${PKGNAMESUFFIX}-${PORTVERSION}</literal>.
	Make sure to set the variables to conform to that
	format.</para>

      <variablelist xml:id="porting-pkgname-format">
	<varlistentry xml:id="porting-pkgname-language">
	  <term xml:lang="en"><filename><replaceable>language_region-</replaceable></filename></term>

	  <listitem>
	    <para xml:lang="en">FreeBSD strives to support the native language of its
	      users.  The <replaceable>language-</replaceable> part is
	      a two letter abbreviation of the natural language
	      defined by ISO-639 when the port is specific to a
	      certain language.  Examples are <literal>ja</literal>
	      for Japanese, <literal>ru</literal> for Russian,
	      <literal>vi</literal> for Vietnamese,
	      <literal>zh</literal> for Chinese, <literal>ko</literal>
	      for Korean and <literal>de</literal> for German.</para>

	    <para xml:lang="en">If the port is specific to a certain region within
	      the language area, add the two letter country code as
	      well.  Examples are <literal>en_US</literal> for US
	      English and <literal>fr_CH</literal> for Swiss
	      French.</para>

	    <para xml:lang="en">The <replaceable>language-</replaceable> part is
	      set in <varname>PKGNAMEPREFIX</varname>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry xml:id="porting-pkgname-name">
	  <term xml:lang="en"><filename><replaceable>name</replaceable></filename></term>

	  <listitem>
	    <para xml:lang="en">Make sure that the port's name and version are
	      clearly separated and placed into
	      <varname>PORTNAME</varname> and
	      <varname>PORTVERSION</varname>.  The only
	      reason for <varname>PORTNAME</varname> to contain a
	      version part is if the upstream distribution is really
	      named that way, as in the
	      <package role="port">textproc/libxml2</package> or
	      <package role="port">japanese/kinput2-freewnn</package>
	      ports.  Otherwise, <varname>PORTNAME</varname> cannot
	      contain any version-specific information.  It is quite
	      normal for several ports to have the same
	      <varname>PORTNAME</varname>, as the
	      <package role="port">www/apache*</package> ports do; in
	      that case, different versions (and different index
	      entries) are distinguished by
	      <varname>PKGNAMEPREFIX</varname>
	      and <varname>PKGNAMESUFFIX</varname> values.</para>

	    <para xml:lang="en">There is a tradition of naming
	      <literal>Perl 5</literal> modules by prepending
	      <literal>p5-</literal> and converting the double-colon
	      separator to a hyphen.  For example, the
	      <literal>Data::Dumper</literal> module becomes
	      <literal>p5-Data-Dumper</literal>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry xml:id="porting-pkgname-compiled-specifics">
	  <term xml:lang="en"><filename><replaceable>-compiled.specifics</replaceable></filename></term>

	  <listitem>
	    <para xml:lang="en">If the port can be built with different <link linkend="makefile-masterdir">hardcoded defaults</link>
	      (usually part of the directory name in a family of
	      ports), the
	      <replaceable>-compiled.specifics</replaceable> part
	      states the compiled-in defaults.  The hyphen is
	      optional.  Examples are paper size and font
	      units.</para>

	    <para xml:lang="en">The <replaceable>-compiled.specifics</replaceable>
	      part is set in <varname>PKGNAMESUFFIX</varname>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry xml:id="porting-pkgname-version-numbers">
	  <term xml:lang="en"><filename><replaceable>-version.numbers</replaceable></filename></term>

	  <listitem>
	    <para xml:lang="en">The version string follows a dash
	      (<literal>-</literal>) and is a period-separated list of
	      integers and single lowercase alphabetics.  In
	      particular, it is not permissible to have another dash
	      inside the version string.  The only exception is the
	      string <literal>pl</literal> (meaning
	      <quote>patchlevel</quote>), which can be used
	      <emphasis>only</emphasis> when there are no major and
	      minor version numbers in the software.  If the software
	      version has strings like <quote>alpha</quote>,
	      <quote>beta</quote>, <quote>rc</quote>, or
	      <quote>pre</quote>, take the first letter and put it
	      immediately after a period.  If the version string
	      continues after those names, the numbers follow
	      the single alphabet without an extra period between
	      them (for example, <literal>1.0b2</literal>).</para>

	    <para xml:lang="en">The idea is to make it easier to sort ports by
	      looking at the version string.  In particular, make sure
	      version number components are always delimited by a
	      period, and if the date is part of the string, use the
	      <literal>0.0.<replaceable>yyyy</replaceable>.<replaceable>mm</replaceable>.<replaceable>dd</replaceable></literal>
	      format, not
	      <literal><replaceable>dd</replaceable>.<replaceable>mm</replaceable>.<replaceable>yyyy</replaceable></literal>
	      or the non-Y2K compliant
	      <literal><replaceable>yy</replaceable>.<replaceable>mm</replaceable>.<replaceable>dd</replaceable></literal>
	      format.  It is important to prefix the version with
	      <literal>0.0.</literal> in case a release with an actual
	      version number is made, which would be
	      numerically less than
	      <literal><replaceable>yyyy</replaceable></literal>.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <important>
	<para xml:lang="en">Package name must be unique among all of the ports
	  tree, check that there is not already a port with the same
	  <varname>PORTNAME</varname> and if there is add one of <link linkend="porting-pkgnameprefix-suffix"><varname>PKGNAMEPREFIX</varname>
	    or <varname>PKGNAMESUFFIX</varname></link>.</para>
      </important>

      <para xml:lang="en">Here are some (real) examples on how to convert the name
	as called by the software authors to a suitable package
	name:</para>

      <table frame="none" pgwide="1">
	<title>套件命名範例</title>

	<tgroup cols="6">
	  <thead>
	    <row>
	      <entry xml:lang="en">Distribution Name</entry>
	      <entry><varname>PKGNAMEPREFIX</varname></entry>
	      <entry><varname>PORTNAME</varname></entry>
	      <entry><varname>PKGNAMESUFFIX</varname></entry>
	      <entry><varname>PORTVERSION</varname></entry>
	      <entry>原因</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry>mule-2.2.2</entry>
	      <entry>(空)</entry>
	      <entry>mule</entry>
	      <entry>(空)</entry>
	      <entry>2.2.2</entry>
	      <entry xml:lang="en">No changes required</entry>
	    </row>

	    <row>
	      <entry>mule-1.0.1</entry>
	      <entry>(空)</entry>
	      <entry>mule</entry>
	      <entry>1</entry>
	      <entry>1.0.1</entry>
	      <entry><literal>mule</literal> 已存在</entry>
	    </row>

	    <row>
	      <entry>EmiClock-1.0.2</entry>
	      <entry>(空)</entry>
	      <entry>emiclock</entry>
	      <entry>(空)</entry>
	      <entry>1.0.2</entry>
	      <entry xml:lang="en">No uppercase names for single programs</entry>
	    </row>

	    <row>
	      <entry>rdist-1.3alpha</entry>
	      <entry>(空)</entry>
	      <entry>rdist</entry>
	      <entry>(空)</entry>
	      <entry>1.3.a</entry>
	      <entry xml:lang="en">No strings like <literal>alpha</literal>
		allowed</entry>
	    </row>

	    <row>
	      <entry>es-0.9-beta1</entry>
	      <entry>(空)</entry>
	      <entry>es</entry>
	      <entry>(空)</entry>
	      <entry>0.9.b1</entry>
	      <entry xml:lang="en">No strings like <literal>beta</literal>
		allowed</entry>
	    </row>

	    <row>
	      <entry>mailman-2.0rc3</entry>
	      <entry>(空)</entry>
	      <entry>mailman</entry>
	      <entry>(空)</entry>
	      <entry>2.0.r3</entry>
	      <entry xml:lang="en">No strings like <literal>rc</literal>
		allowed</entry>
	    </row>

	    <row>
	      <entry>v3.3beta021.src</entry>
	      <entry>(空)</entry>
	      <entry>tiff</entry>
	      <entry>(空)</entry>
	      <entry>3.3</entry>
	      <entry xml:lang="en">What the heck was that anyway?</entry>
	    </row>

	    <row>
	      <entry>tvtwm</entry>
	      <entry>(空)</entry>
	      <entry>tvtwm</entry>
	      <entry>(空)</entry>
	      <entry>pl11</entry>
	      <entry xml:lang="en">Version string always required</entry>
	    </row>

	    <row>
	      <entry>piewm</entry>
	      <entry>(空)</entry>
	      <entry>piewm</entry>
	      <entry>(空)</entry>
	      <entry>1.0</entry>
	      <entry xml:lang="en">Version string always required</entry>
	    </row>

	    <row>
	      <entry>xvgr-2.10pl1</entry>
	      <entry>(空)</entry>
	      <entry>xvgr</entry>
	      <entry>(空)</entry>
	      <entry>2.10.1</entry>
	      <entry xml:lang="en"><literal>pl</literal> allowed only when no
		major/minor version numbers</entry>
	    </row>

	    <row>
	      <entry>gawk-2.15.6</entry>
	      <entry>ja-</entry>
	      <entry>gawk</entry>
	      <entry>(空)</entry>
	      <entry>2.15.6</entry>
	      <entry>日文版</entry>
	    </row>

	    <row>
	      <entry>psutils-1.13</entry>
	      <entry>(空)</entry>
	      <entry>psutils</entry>
	      <entry>-letter</entry>
	      <entry>1.13</entry>
	      <entry xml:lang="en">Paper size hardcoded at package build
		time</entry>
	    </row>

	    <row>
	      <entry>pkfonts</entry>
	      <entry>(空)</entry>
	      <entry>pkfonts</entry>
	      <entry>300</entry>
	      <entry>1.0</entry>
	      <entry xml:lang="en">Package for 300dpi fonts</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para xml:lang="en">If there is absolutely no trace of version information in
	the original source and it is unlikely that the original
	author will ever release another version, just set the version
	string to <literal>1.0</literal> (like the
	<literal>piewm</literal> example above).  Otherwise, ask the
	original author or use the date string the source file was
	released on
	(<literal>0.0.<replaceable>yyyy</replaceable>.<replaceable>mm</replaceable>.<replaceable>dd</replaceable></literal>)
	as the version.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="makefile-categories">
    <title>分類</title>

    <sect2 xml:id="makefile-categories-definition">
      <title><varname>CATEGORIES</varname></title>

      <para xml:lang="en">When a package is created, it is put under
	<filename>/usr/ports/packages/All</filename> and links are
	made from one or more subdirectories of
	<filename>/usr/ports/packages</filename>.  The names of these
	subdirectories are specified by the variable
	<varname>CATEGORIES</varname>.  It is intended to make life
	easier for the user when he is wading through the pile of
	packages on the FTP site or the CDROM.  Please take a look at
	the <link linkend="porting-categories">current list of
	  categories</link> and pick the ones that are suitable for
	the port.</para>

      <para xml:lang="en">This list also determines where in the ports tree the port
	is imported.  If there is more than one category here,
	the port files must be put in the subdirectory
	with the name of the first category.  See
	<link linkend="choosing-categories">below</link> for more
	discussion about how to pick the right categories.</para>
    </sect2>

    <sect2 xml:id="porting-categories">
      <title>目前分類清單</title>

      <para xml:lang="en">Here is the current list of port categories.  Those marked
	with an asterisk (<literal>*</literal>) are
	<emphasis>virtual</emphasis> categories—those that do
	not have a corresponding subdirectory in the ports tree.  They
	are only used as secondary categories, and only for search
	purposes.</para>

      <note>
	<para xml:lang="en">For non-virtual categories, there is a one-line
	  description in <varname>COMMENT</varname> in that
	  subdirectory's <filename>Makefile</filename>.</para>
      </note>

      <informaltable frame="none" pgwide="1">
	<tgroup cols="3">
	  <thead>
	    <row>
	      <entry>分類</entry>
	      <entry>描述</entry>
	      <entry>註</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><filename>accessibility</filename></entry>
	      <entry xml:lang="en">Ports to help disabled users.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>afterstep*</filename></entry>

	      <entry xml:lang="en">Ports to support the <link xlink:href="http://www.afterstep.org">AfterStep</link>
		window manager.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>arabic</filename></entry>
	      <entry>阿拉伯文支援。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>archivers</filename></entry>
	      <entry xml:lang="en">Archiving tools.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>astro</filename></entry>
	      <entry xml:lang="en">Astronomical ports.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>audio</filename></entry>
	      <entry xml:lang="en">Sound support.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>benchmarks</filename></entry>
	      <entry xml:lang="en">Benchmarking utilities.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>biology</filename></entry>
	      <entry xml:lang="en">Biology-related software.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>cad</filename></entry>
	      <entry xml:lang="en">Computer aided design tools.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>chinese</filename></entry>
	      <entry>中文支援。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>comms</filename></entry>
	      <entry xml:lang="en">Communication software.</entry>
	      <entry xml:lang="en">Mostly software to talk to the serial
		port.</entry>
	    </row>

	    <row>
	      <entry><filename>converters</filename></entry>
	      <entry xml:lang="en">Character code converters.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>databases</filename></entry>
	      <entry>資料庫。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>deskutils</filename></entry>
	      <entry xml:lang="en">Things that used to be on the desktop before
		computers were invented.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>devel</filename></entry>
	      <entry>開發公用程式。</entry>
	      <entry xml:lang="en">Do not put libraries here just because they are
		libraries.  They should <emphasis>not</emphasis> be
		in this category unless they truly do not belong
		anywhere else.</entry>
	    </row>

	    <row>
	      <entry><filename>dns</filename></entry>
	      <entry>DNS 相關軟體。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>docs*</filename></entry>
	      <entry xml:lang="en">Meta-ports for FreeBSD documentation.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>editors</filename></entry>
	      <entry xml:lang="en">General editors.</entry>
	      <entry xml:lang="en">Specialized editors go in the section for those
		tools.  For example, a mathematical-formula editor
		will go in <filename>math</filename>, and have
		<filename>editors</filename> as a second
		category.</entry>
	    </row>

	    <row>
	      <entry><filename>elisp*</filename></entry>
	      <entry xml:lang="en">Emacs-lisp ports.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>emulators</filename></entry>
	      <entry xml:lang="en">Emulators for other operating systems.</entry>
	      <entry xml:lang="en">Terminal emulators do <emphasis>not</emphasis>
		belong here.  X-based ones go to
		<filename>x11</filename> and text-based ones to
		either <filename>comms</filename> or
		<filename>misc</filename>, depending on the exact
		functionality.</entry>
	    </row>

	    <row>
	      <entry><filename>finance</filename></entry>
	      <entry xml:lang="en">Monetary, financial and related
		applications.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>french</filename></entry>
	      <entry>法文支援。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>ftp</filename></entry>
	      <entry xml:lang="en"><acronym>FTP</acronym> client and server
		utilities.</entry>
	      <entry xml:lang="en">If the port speaks both <acronym>FTP</acronym>
		and <acronym>HTTP</acronym>, put it
		in <filename>ftp</filename> with a secondary
		category of <filename>www</filename>.</entry>
	    </row>

	    <row>
	      <entry><filename>games</filename></entry>
	      <entry>遊戲。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>geography*</filename></entry>
	      <entry>地理相關軟體。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>german</filename></entry>
	      <entry>德文支援。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>gnome*</filename></entry>
	      <entry xml:lang="en">Ports from the
		<link xlink:href="http://www.gnome.org">GNOME</link>
		Project.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>gnustep*</filename></entry>
	      <entry xml:lang="en">Software related to the GNUstep desktop
		environment.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>graphics</filename></entry>
	      <entry>繪圖公用程式。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>hamradio*</filename></entry>
	      <entry xml:lang="en">Software for amateur radio.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>haskell*</filename></entry>
	      <entry xml:lang="en">Software related to the Haskell
		language.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>hebrew</filename></entry>
	      <entry>希伯來文支援。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>hungarian</filename></entry>
	      <entry>匈牙利文支援。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>ipv6*</filename></entry>
	      <entry>IPv6 相關軟體。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>irc</filename></entry>
	      <entry xml:lang="en">Internet Relay Chat utilities.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>japanese</filename></entry>
	      <entry>日文支援。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>java</filename></entry>
	      <entry xml:lang="en">Software related to the Java™
		language.</entry>
	      <entry xml:lang="en">The <filename>java</filename> category must not
		be the only one for a port.  Save for ports directly
		related to the Java language, porters are also
		encouraged not to use <filename>java</filename> as the
		main category of a port.</entry>
	    </row>

	    <row>
	      <entry><filename>kde*</filename></entry>
	      <entry xml:lang="en">Ports from the
		<link xlink:href="http://www.kde.org">KDE</link>
		Project.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>kld*</filename></entry>
	      <entry xml:lang="en">Kernel loadable modules.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>korean</filename></entry>
	      <entry>韓文支援。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>lang</filename></entry>
	      <entry>程式語言。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>linux*</filename></entry>
	      <entry>Linux 應用程式和支援的公用程式</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>lisp*</filename></entry>
	      <entry xml:lang="en">Software related to the Lisp language.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>mail</filename></entry>
	      <entry>郵件軟體</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>math</filename></entry>
	      <entry xml:lang="en">Numerical computation software and other
		utilities for mathematics.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>mbone*</filename></entry>
	      <entry>MBone 應用程式。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>misc</filename></entry>
	      <entry>其他公用程式</entry>
	      <entry xml:lang="en">Things that do not belong anywhere
		else.  If at all possible, try to find a better
		category for the port than <literal>misc</literal>,
		as ports tend to be overlooked in here.</entry>
	    </row>

	    <row>
	      <entry><filename>multimedia</filename></entry>
	      <entry>多媒體軟體。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>net</filename></entry>
	      <entry xml:lang="en">Miscellaneous networking software.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>net-im</filename></entry>
	      <entry>即時通訊軟體。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>net-mgmt</filename></entry>
	      <entry>網路管理軟體。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>net-p2p</filename></entry>
	      <entry>點對點 (Peer to peer) 網路應用程式。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>news</filename></entry>
	      <entry>USENET 新聞軟體。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>palm</filename></entry>

	      <entry xml:lang="en">Software support for the <link xlink:href="http://www.palm.com/">Palm™</link>
		series.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>parallel*</filename></entry>
	      <entry xml:lang="en">Applications dealing with parallelism in
		computing.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>pear*</filename></entry>
	      <entry xml:lang="en">Ports related to the Pear PHP
		framework.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>perl5*</filename></entry>
	      <entry xml:lang="en">Ports that require
		<application>Perl</application> version 5 to
		run.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>plan9*</filename></entry>

	      <entry xml:lang="en">Various programs from <link xlink:href="http://www.cs.bell-labs.com/plan9dist/">Plan9</link>.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>polish</filename></entry>
	      <entry>波蘭文支援。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>ports-mgmt</filename></entry>
	      <entry xml:lang="en">Ports for managing, installing and developing
		FreeBSD ports and packages.</entry>
	    </row>

	    <row>
	      <entry><filename>portuguese</filename></entry>
	      <entry>葡萄牙文支援。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>print</filename></entry>
	      <entry>列印軟體。</entry>
	      <entry xml:lang="en">Desktop publishing tools
		(previewers, etc.) belong here too.</entry>
	    </row>

	    <row>
	      <entry><filename>python*</filename></entry>

	      <entry xml:lang="en">Software related to the <link xlink:href="http://www.python.org/">Python</link>
		language.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>ruby*</filename></entry>
	      <entry xml:lang="en">Software related to the <link xlink:href="http://www.ruby-lang.org/">Ruby</link>
		language.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>rubygems*</filename></entry>

	      <entry xml:lang="en">Ports of <link xlink:href="http://www.rubygems.org/">RubyGems</link>
		packages.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>russian</filename></entry>
	      <entry>俄文支援。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>scheme*</filename></entry>
	      <entry xml:lang="en">Software related to the Scheme
		language.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>science</filename></entry>
	      <entry xml:lang="en">Scientific ports that do not fit into other
		categories such as <filename>astro</filename>,
		<filename>biology</filename> and
		<filename>math</filename>.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>security</filename></entry>
	      <entry xml:lang="en">Security utilities.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>shells</filename></entry>
	      <entry xml:lang="en">Command line shells.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>spanish*</filename></entry>
	      <entry>西班牙文支援。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>sysutils</filename></entry>
	      <entry>系統公用程式。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>tcl*</filename></entry>
	      <entry xml:lang="en">Ports that use Tcl to run.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>textproc</filename></entry>
	      <entry xml:lang="en">Text processing utilities.</entry>
	      <entry xml:lang="en">It does not include desktop publishing tools,
		which go to <filename>print</filename>.</entry>
	    </row>

	    <row>
	      <entry><filename>tk*</filename></entry>
	      <entry xml:lang="en">Ports that use Tk to run.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>ukrainian</filename></entry>
	      <entry>烏克蘭文支援</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>vietnamese</filename></entry>
	      <entry>越南文支援。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>windowmaker*</filename></entry>
	      <entry xml:lang="en">Ports to support the WindowMaker window
		manager.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>www</filename></entry>
	      <entry xml:lang="en">Software related to the World Wide Web.</entry>
	      <entry xml:lang="en">HTML language
		support belongs here too.</entry>
	    </row>

	    <row>
	      <entry><filename>x11</filename></entry>
	      <entry>X Window 系統和他的朋友們。</entry>
	      <entry xml:lang="en">This category is only for software that directly
		supports the window system.  Do not put regular X
		applications here.  Most of them go into other
		<filename>x11-*</filename> categories (see
		below).</entry>
	    </row>

	    <row>
	      <entry><filename>x11-clocks</filename></entry>
	      <entry>X11 時鐘。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>x11-drivers</filename></entry>
	      <entry>X11 驅動程式。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>x11-fm</filename></entry>
	      <entry xml:lang="en">X11 file managers.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>x11-fonts</filename></entry>
	      <entry xml:lang="en">X11 fonts and font utilities.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>x11-servers</filename></entry>
	      <entry>X11 伺服器。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>x11-themes</filename></entry>
	      <entry>X11 佈景主題。</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>x11-toolkits</filename></entry>
	      <entry xml:lang="en">X11 toolkits.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>x11-wm</filename></entry>
	      <entry xml:lang="en">X11 window managers.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>xfce*</filename></entry>
	      <entry xml:lang="en">Ports related to the
		<link xlink:href="http://www.xfce.org/">Xfce</link>
		desktop environment.</entry>
	      <entry/>
	    </row>

	    <row>
	      <entry><filename>zope*</filename></entry>
	      <entry xml:lang="en"><link xlink:href="http://www.zope.org/">Zope</link>
		support.</entry>
	      <entry/>
	    </row>
	  </tbody>
	</tgroup>
      </informaltable>
    </sect2>

    <sect2 xml:id="choosing-categories">
      <title>選擇正確的目錄</title>

      <para xml:lang="en">As many of the categories overlap, choosing which of the
	categories will be the primary category of the port can be
	tedious.  There are several rules that govern this issue.
	Here is the list of priorities, in decreasing order of
	precedence:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en">The first category must be a physical category (see
	    <link linkend="porting-categories">above</link>).  This is
	    necessary to make the packaging work.  Virtual categories
	    and physical categories may be intermixed after
	    that.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">Language specific categories always come first.  For
	    example, if the port installs Japanese X11 fonts, then
	    the <varname>CATEGORIES</varname> line would read
	    <filename>japanese x11-fonts</filename>.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">Specific categories are listed before less-specific
	    ones.  For instance, an HTML editor is listed as
	    <filename>www editors</filename>, not the other way
	    around.  Also, do not list
	    <filename>net</filename> when the port belongs to any of
	    <filename>irc</filename>, <filename>mail</filename>,
	    <filename>news</filename>, <filename>security</filename>,
	    or <filename>www</filename>, as <filename>net</filename>
	    is included implicitly.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><filename>x11</filename> is used as a secondary
	    category only when the primary category is a natural
	    language.  In particular, do not put
	    <filename>x11</filename> in the category line for X
	    applications.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><application>Emacs</application> modes are
	    placed in the same ports category as the application
	    supported by the mode, not in
	    <filename>editors</filename>.  For example, an
	    <application>Emacs</application> mode to edit source files
	    of some programming language goes into
	    <filename>lang</filename>.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">Ports installing loadable kernel modules also
	    have the virtual category <filename>kld</filename> in
	    their <varname>CATEGORIES</varname> line.  This is one of
	    the things handled automatically by adding
	    <literal>USES=kmod</literal>.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><filename>misc</filename> does not appear with any
	    other non-virtual category.  If there is
	    <literal>misc</literal> with something else in
	    <varname>CATEGORIES</varname>, that means
	    <literal>misc</literal> can safely be deleted and the port
	    placed only in the other subdirectory.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">If the port truly does not belong anywhere else,
	    put it in <filename>misc</filename>.</para>
	</listitem>
      </itemizedlist>

      <para xml:lang="en">If the category is not clearly defined, please put a
	comment to that effect in the <link xlink:href="https://bugs.freebsd.org/submit/">port
	  submission</link> in the bug database so
	we can discuss it before we import it.  As a committer,
	send a note to the <link xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-ports">FreeBSD ports mailing list</link> so we can discuss it
	first.  Too often, new ports are imported to the wrong
	category only to be moved right away.  This causes unnecessary
	and undesirable bloat in the master source repository.</para>
    </sect2>

    <sect2 xml:id="proposing-categories">
      <title>提出新的目錄</title>

      <para xml:lang="en">As the Ports Collection has grown over time, various new
	categories have been introduced.  New categories can either be
	<emphasis>virtual</emphasis> categories—those that do
	not have a corresponding subdirectory in the ports tree—
	or <emphasis>physical</emphasis> categories—those that
	do.  This section discusses the issues involved in creating a
	new physical category.  Read it thouroughly before proposing a
	new one.</para>

      <para xml:lang="en">Our existing practice has been to avoid creating a new
	physical category unless either a large number of ports would
	logically belong to it, or the ports that would belong to it
	are a logically distinct group that is of limited general
	interest (for instance, categories related to spoken human
	languages), or preferably both.</para>

      <para xml:lang="en">The rationale for this is that such a change creates a
	<link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/articles/committers-guide/#ports">fair
	  amount of work</link> for both the committers and also for
	all users who track changes to the Ports Collection.  In
	addition, proposed category changes just naturally seem to
	attract controversy.  (Perhaps this is because there is no
	clear consensus on when a category is <quote>too big</quote>,
	nor whether categories should lend themselves to browsing (and
	thus what number of categories would be an ideal number), and
	so forth.)</para>

      <para>步驟如下：</para>

      <procedure>
	<step>
	  <para xml:lang="en">Propose the new category on <link xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-ports">FreeBSD ports mailing list</link>.  Include
	    a detailed rationale for the new category,
	    including why the existing categories are not
	    sufficient, and the list of existing ports proposed to
	    move.  (If there are new ports pending in
	    <application>Bugzilla</application> that would fit this
	    category, list them too.)  If you are the maintainer
	    and/or submitter, respectively, mention that as it may
	    help the case.</para>
	</step>

	<step>
	  <para xml:lang="en">Participate in the discussion.</para>
	</step>

	<step>
	  <para xml:lang="en">If it seems that there is support for the idea, file
	    a PR which includes both the rationale and the list of
	    existing ports that need to be moved.  Ideally, this PR
	    would also include these patches:</para>

	  <itemizedlist>
	    <listitem>
	      <para xml:lang="en"><filename>Makefile</filename>s for the new ports
		once they are repocopied</para>
	    </listitem>

	    <listitem>
	      <para xml:lang="en"><filename>Makefile</filename> for the new
		category</para>
	    </listitem>

	    <listitem>
	      <para xml:lang="en"><filename>Makefile</filename> for the old ports'
		categories</para>
	    </listitem>

	    <listitem>
	      <para xml:lang="en"><filename>Makefile</filename>s for ports that
		depend on the old ports</para>
	    </listitem>

	    <listitem>
	      <para xml:lang="en">(for extra credit, include the other files
		that have to change, as per the procedure in the
		Committer's Guide.)</para>
	    </listitem>
	  </itemizedlist>
	</step>

	<step>
	  <para xml:lang="en">Since it affects the ports infrastructure and involves
	    moving and patching many ports but also possibly running
	    regression tests on the build cluster, assign the PR to
	    the Ports Management Team <email>portmgr@FreeBSD.org</email>.</para>
	</step>

	<step>
	  <para xml:lang="en">If that PR is approved, a committer will need to
	    follow the rest of the procedure that is <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/articles/committers-guide/article.html#PORTS">outlined
	      in the Committer's Guide</link>.</para>
	</step>
      </procedure>

      <para xml:lang="en">Proposing a new virtual category is similar to the
	above but much less involved, since no ports will actually
	have to move.  In this case, the only patches to include in
	the PR would be those to add the new category to
	<varname>CATEGORIES</varname> of the affected ports.</para>
    </sect2>

    <sect2 xml:id="proposing-reorg">
      <title xml:lang="en">Proposing Reorganizing All the Categories</title>

      <para xml:lang="en">Occasionally someone proposes reorganizing the
	categories with either a 2-level structure, or some other kind
	of keyword structure.  To date, nothing has come of any of
	these proposals because, while they are very easy to make, the
	effort involved to retrofit the entire existing ports
	collection with any kind of reorganization is daunting to say
	the very least.  Please read the history of these proposals in
	the mailing list archives before posting this idea.
	Furthermore, be prepared to be challenged to offer
	a working prototype.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="makefile-distfiles">
    <title xml:lang="en">The Distribution Files</title>

    <para xml:lang="en">The second part of the <filename>Makefile</filename>
      describes the files that must be downloaded to build
      the port, and where they can be downloaded.</para>

    <sect2 xml:id="makefile-distversion">
      <title><varname>DISTVERSION/DISTNAME</varname></title>

      <para xml:lang="en"><varname>DISTNAME</varname> is the name of the port as
	called by the authors of the software.
	<varname>DISTNAME</varname> defaults to
	<literal>${PORTNAME}-${DISTVERSIONPREFIX}${DISTVERSION}${DISTVERSIONSUFFIX}</literal>,
	and <varname>DISTVERSION</varname> defaults to
	<literal>${PORTVERSION}</literal> so override it
	only if necessary.  <varname>DISTNAME</varname> is only used
	in two places.  First, the distribution file list
	(<varname>DISTFILES</varname>) defaults to
	<literal>${DISTNAME}</literal><literal>${EXTRACT_SUFX}</literal>.
	Second, the distribution file is expected to extract into a
	subdirectory named <varname>WRKSRC</varname>, which defaults
	to <filename>work/${DISTNAME}</filename>.</para>

      <para xml:lang="en">Some vendor's distribution names which do not fit into the
	<literal>${PORTNAME}-${PORTVERSION}</literal>-scheme can be
	handled automatically by setting
	<varname>DISTVERSION</varname>.
	<varname>PORTVERSION</varname> will be derived from it
	automatically.</para>

      <note>
	<para xml:lang="en">Only one of <varname>PORTVERSION</varname> and
	  <varname>DISTVERSION</varname> can be set at a time.  If
	  <varname>DISTVERSION</varname> does not derive a correct
	  <varname>PORTVERSION</varname>, do not use
	  <varname>DISTVERSION</varname>, set
	  <varname>PORTVERSION</varname> to the right value and set
	  <varname>DISTNAME</varname> with <varname>PORTNAME</varname>
	  with either some computation of
	  <varname>PORTVERSION</varname> or the verbatim upstream
	  version.</para>
      </note>


      <table frame="none" pgwide="0">
	<title xml:lang="en">Examples of <varname>DISTVERSION</varname> and the
	  Derived <varname>PORTVERSION</varname></title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry><varname>DISTVERSION</varname></entry>
	      <entry><varname>PORTVERSION</varname></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry>0.7.1d</entry>
	      <entry>0.7.1.d</entry>
	    </row>

	    <row>
	      <entry>10Alpha3</entry>
	      <entry>10.a3</entry>
	    </row>

	    <row>
	      <entry>3Beta7-pre2</entry>
	      <entry>3.b7.p2</entry>
	    </row>

	    <row>
	      <entry>8:f_17</entry>
	      <entry>8f.17</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <note>
	<para xml:lang="en"><varname>PKGNAMEPREFIX</varname> and
	  <varname>PKGNAMESUFFIX</varname> do not affect
	  <varname>DISTNAME</varname>.  Also note that if
	  <varname>WRKSRC</varname> is equal to
	  <filename>${WRKDIR}/${DISTNAME}</filename> while
	  the original source archive is named something other than
	  <literal>${PORTNAME}-${PORTVERSION}${EXTRACT_SUFX}</literal>,
	  leave <varname>DISTNAME</varname>
	  alone— defining only
	  <varname>DISTFILES</varname> is easier than both
	  <varname>DISTNAME</varname> and <varname>WRKSRC</varname>
	  (and possibly <varname>EXTRACT_SUFX</varname>).</para>
      </note>
    </sect2>

    <sect2 xml:id="makefile-master_sites">
      <title><varname>MASTER_SITES</varname></title>

      <para xml:lang="en">Record the directory part of the FTP/HTTP-URL pointing at
	the original tarball in <varname>MASTER_SITES</varname>.  Do
	not forget the trailing slash (<filename>/</filename>)!</para>

      <para xml:lang="en">The <command>make</command> macros will try to use this
	specification for grabbing the distribution file with
	<varname>FETCH</varname> if they cannot find it already on the
	system.</para>

      <para xml:lang="en">It is recommended that multiple sites are included on this
	list, preferably from different continents.  This will
	safeguard against wide-area network problems.  We are even
	planning to add support for automatically determining the
	closest master site and fetching from there; having multiple
	sites will go a long way towards helping this effort.</para>

      <important>
	<para xml:lang="en"><varname>MASTER_SITES</varname> must not be blank.  It
	  must point to the actual site hosting the distribution
	  files.  It cannot point to web archives, or the FreeBSD
	  distribution files cache sites.  The only exception to this
	  rule is ports that do not have any distribution files.  For
	  example, meta-ports do not have any distribution files, so
	  <varname>MASTER_SITES</varname> does not need to be
	  set.</para>
      </important>

      <sect3 xml:id="makefile-master_sites-shorthand">
	<title>使用 <varname>MASTER_SITE_<replaceable>*</replaceable></varname> 變數</title>

	<para xml:lang="en">Shortcut abbreviations are available for popular
	  archives like SourceForge (<literal>SOURCEFORGE</literal>),
	  GNU (<literal>GNU</literal>), or Perl CPAN
	  (<literal>PERL_CPAN</literal>).
	  <varname>MASTER_SITES</varname> can use them
	  directly:</para>

	<programlisting>MASTER_SITES=	GNU/make</programlisting>

	<para xml:lang="en">The older expanded format still works, but all ports
	  have been converted to the compact format.  The expanded
	  format looks like this:</para>

	<programlisting>MASTER_SITES=		${MASTER_SITE_GNU}
MASTER_SITE_SUBDIR=	make</programlisting>

	<para xml:lang="en">These values and variables are defined in <link xlink:href="https://svnweb.freebsd.org/ports/head/Mk/bsd.sites.mk?view=markup"><filename>Mk/bsd.sites.mk</filename></link>.
	  New entries are added often, so make sure to check the
	  latest version of this file before submitting a port.</para>

	<tip>
	  <para xml:lang="en">For any
	    <varname>MASTER_SITE_<replaceable>FOO</replaceable></varname>
	    variable, the shorthand
	    <literal><replaceable>FOO</replaceable></literal> can be
	    used.  For example, use:</para>

	  <programlisting>MASTER_SITES=	<replaceable>FOO</replaceable></programlisting>

	  <para xml:lang="en">If <varname>MASTER_SITE_SUBDIR</varname> is needed,
	    use this:</para>

	  <programlisting>MASTER_SITES=	<replaceable>FOO</replaceable>/<replaceable>bar</replaceable></programlisting>
	</tip>

	<note>
	  <para xml:lang="en">Some
	    <varname>MASTER_SITE_<replaceable>*</replaceable></varname>
	    names are quite long, and for ease of use, shortcuts have
	    been defined:</para>

	  <table frame="none" xml:id="makefile-master_sites-shortcut">
	    <title xml:lang="en">Shortcuts for
	      <varname>MASTER_SITE_<replaceable>*</replaceable></varname>
	      Macros</title>

	    <tgroup cols="2">
	      <thead>
		<row>
		  <entry>巨集</entry>
		  <entry xml:lang="en">Shortcut</entry>
		</row>
	      </thead>

	      <tbody>
		<row>
		  <entry><varname>PERL_CPAN</varname></entry>
		  <entry><varname>CPAN</varname></entry>
		</row>

		<row>
		  <entry><varname>GITHUB</varname></entry>
		  <entry><varname>GH</varname></entry>
		</row>

		<row>
		  <entry><varname>GITHUB_CLOUD</varname></entry>
		  <entry><varname>GHC</varname></entry>
		</row>

		<row>
		  <entry><varname>LIBREOFFICE_DEV</varname></entry>
		  <entry><varname>LODEV</varname></entry>
		</row>

		<row>
		  <entry><varname>NETLIB</varname></entry>
		  <entry><varname>NL</varname></entry>
		</row>

		<row>
		  <entry><varname>RUBYGEMS</varname></entry>
		  <entry><varname>RG</varname></entry>
		</row>

		<row>
		  <entry><varname>SOURCEFORGE</varname></entry>
		  <entry><varname>SF</varname></entry>
		</row>

		<row>
		  <entry><varname>SOURCEFORGE_JP</varname></entry>
		  <entry><varname>SFJP</varname></entry>
		</row>
	      </tbody>
	    </tgroup>
	  </table>
	</note>
      </sect3>

      <sect3 xml:id="makefile-master_sites-magic">
	<title xml:lang="en">Magic MASTER_SITES Macros</title>

	<para xml:lang="en">Several <quote>magic</quote> macros exist for
	  popular sites with a predictable directory structure.  For
	  these, just use the abbreviation and the system will choose
	  a subdirectory automatically.  For a port
	  named <literal>Stardict</literal>, of version
	  <literal>1.2.3</literal>, and hosted on SourceForge, adding
	  this line:</para>

	<programlisting>MASTER_SITES=	SF</programlisting>

	<para xml:lang="en">infers a subdirectory named
	  <literal>/project/stardict/stardict/1.2.3</literal>.  If the
	  inferred directory is incorrect, it can be
	  overridden:</para>

	<programlisting>MASTER_SITES=	SF/stardict/WyabdcRealPeopleTTS/${PORTVERSION}</programlisting>

	<para xml:lang="en">This can also be written as</para>

	<programlisting>MASTER_SITES=	SF
MASTER_SITE_SUBDIR=	stardict/WyabdcRealPeopleTTS/${PORTVERSION}</programlisting>

	<table frame="none" xml:id="makefile-master_sites-popular">
	  <title xml:lang="en">Magic <varname>MASTER_SITES</varname>
	    Macros</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>巨集</entry>
		<entry xml:lang="en">Assumed subdirectory</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><varname>APACHE_COMMONS_BINARIES</varname></entry>
		<entry><literal>${PORTNAME:S,commons-,,}</literal></entry>
	      </row>

	      <row>
		<entry><varname>APACHE_COMMONS_SOURCE</varname></entry>
		<entry><literal>${PORTNAME:S,commons-,,}</literal></entry>
	      </row>

	      <row>
		<entry><varname>APACHE_JAKARTA</varname></entry>
		<entry><literal>${PORTNAME:S,-,/,}/source</literal></entry>
	      </row>

	      <row>
		<entry><varname>BERLIOS</varname></entry>
		<entry><literal>${PORTNAME:tl}.berlios</literal></entry>
	      </row>

	      <row>
		<entry><varname>CHEESESHOP</varname></entry>
		<entry><literal>source/${DISTNAME:C/(.).*/\1/}/${DISTNAME:C/(.*)-[0-9].*/\1/}</literal></entry>
	      </row>

	      <row>
		<entry><varname>CPAN</varname></entry>
		<entry><literal>${PORTNAME:C/-.*//}</literal></entry>
	      </row>

	      <row>
		<entry><varname>DEBIAN</varname></entry>
		<entry><literal>pool/main/${PORTNAME:C/^((lib)?.).*$/\1/}/${PORTNAME}</literal></entry>
	      </row>

	      <row>
		<entry><varname>FARSIGHT</varname></entry>
		<entry><literal>${PORTNAME}</literal></entry>
	      </row>

	      <row>
		<entry><varname>FESTIVAL</varname></entry>
		<entry><literal>${PORTREVISION}</literal></entry>
	      </row>

	      <row>
		<entry><varname>GCC</varname></entry>
		<entry><literal>releases/${DISTNAME}</literal></entry>
	      </row>

	      <row>
		<entry><varname>GENTOO</varname></entry>
		<entry><literal>distfiles</literal></entry>
	      </row>

	      <row>
		<entry><varname>GIMP</varname></entry>
		<entry><literal>${PORTNAME}/${PORTVERSION:R}/</literal></entry>
	      </row>

	      <row>
		<entry><varname>GH</varname></entry>
		<entry><literal>${GH_ACCOUNT}/${GH_PROJECT}/tar.gz/${GH_TAGNAME}?dummy=/</literal></entry>
	      </row>

	      <row>
		<entry><varname>GHC</varname></entry>
		<entry><literal>${GH_ACCOUNT}/${GH_PROJECT}/</literal></entry>
	      </row>

	      <row>
		<entry><varname>GNOME</varname></entry>
		<entry><literal>sources/${PORTNAME}/${PORTVERSION:C/^([0-9]+\.[0-9]+).*/\1/}</literal></entry>
	      </row>

	      <row>
		<entry><varname>GNU</varname></entry>
		<entry><literal>${PORTNAME}</literal></entry>
	      </row>

	      <row>
		<entry><varname>GNUPG</varname></entry>
		<entry><literal>${PORTNAME}</literal></entry>
	      </row>

	      <row>
		<entry><varname>GNU_ALPHA</varname></entry>
		<entry><literal>${PORTNAME}</literal></entry>
	      </row>

	      <row>
		<entry><varname>HORDE</varname></entry>
		<entry><literal>${PORTNAME}</literal></entry>
	      </row>

	      <row>
		<entry><varname>LODEV</varname></entry>
		<entry><literal>${PORTNAME}</literal></entry>
	      </row>

	      <row>
		<entry><varname>MATE</varname></entry>
		<entry><literal>${PORTVERSION:C/^([0-9]+\.[0-9]+).*/\1/}</literal></entry>
	      </row>

	      <row>
		<entry><varname>MOZDEV</varname></entry>
		<entry><literal>${PORTNAME:tl}</literal></entry>
	      </row>

	      <row>
		<entry><varname>NL</varname></entry>
		<entry><literal>${PORTNAME}</literal></entry>
	      </row>

	      <row>
		<entry><varname>QT</varname></entry>
		<entry><literal>archive/qt/${PORTVERSION:R}</literal></entry>
	      </row>

	      <row>
		<entry><varname>SAMBA</varname></entry>
		<entry><literal>${PORTNAME}</literal></entry>
	      </row>

	      <row>
		<entry><varname>SAVANNAH</varname></entry>
		<entry><literal>${PORTNAME:tl}</literal></entry>
	      </row>

	      <row>
		<entry><varname>SF</varname></entry>
		<entry><literal>${PORTNAME:tl}/${PORTNAME:tl}/${PORTVERSION}</literal></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </sect3>
    </sect2>

    <sect2 xml:id="makefile-master_sites-github">
      <title><varname>USE_GITHUB</varname></title>

      <para xml:lang="en">If the distribution file comes from a specific commit or
	tag on <link xlink:href="https://github.com">GitHub</link>
	for which there is no officially released file, there is an
	easy way to set the right <varname>DISTNAME</varname> and
	<varname>MASTER_SITES</varname> automatically.  These
	variables are available:</para>

      <table xml:id="makefile-master_sites-github-description">
	<title xml:lang="en"><varname>USE_GITHUB</varname> Description</title>

	<tgroup cols="3">
	  <thead>
	    <row>
	      <entry xml:lang="en">Variable</entry>
	      <entry>描述</entry>
	      <entry xml:lang="en">Default</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>GH_ACCOUNT</varname></entry>
	      <entry xml:lang="en">Account name of the GitHub user hosting the
		project</entry>
	      <entry><literal>${PORTNAME}</literal></entry>
	    </row>

	    <row>
	      <entry><varname>GH_PROJECT</varname></entry>
	      <entry xml:lang="en">Name of the project on GitHub</entry>
	      <entry><literal>${PORTNAME}</literal></entry>
	    </row>


	    <row>
	      <entry><varname>GH_TAGNAME</varname></entry>
	      <entry xml:lang="en">Name of the tag to download (2.0.1, hash, ...)
		Using the name of a branch here is incorrect.  It is
		also possible to use the hash of a commit id to do a
		snapshot.</entry>
	      <entry><literal>${DISTVERSIONPREFIX}${DISTVERSION}${DISTVERSIONSUFFIX}</literal></entry>
	    </row>

	    <row>
	      <entry><varname>GH_TUPLE</varname></entry>
	      <entry xml:lang="en"><varname>GH_TUPLE</varname> allows putting all
		the <varname>GH_ACCOUNT</varname>,
		<varname>GH_PROJECT</varname>, and
		<varname>GH_TAGNAME</varname> into one variable.  The
		format is
		<replaceable>account</replaceable><literal>:</literal><replaceable>project</replaceable><literal>:</literal><replaceable>tagname</replaceable><literal>:</literal><replaceable>group</replaceable>.
		It is helpful when there is more than one GitHub
		project from which to fetch.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <important>
	<para xml:lang="en">Do not use <varname>GH_TUPLE</varname> for the default
	  distribution file, as it has no default.</para>
      </important>

      <example xml:id="makefile-master_sites-github-ex1">
	<title xml:lang="en">Simple Use of <varname>USE_GITHUB</varname></title>

	<para xml:lang="en">While trying to make a port for version
	  <literal>1.2.7</literal> of <application>pkg</application>
	  from the FreeBSD user on github, at <link xlink:href="https://github.com/freebsd/pkg"/>, The
	  <filename>Makefile</filename> would end up looking like
	  this (slightly stripped for the example):</para>

	<programlisting>PORTNAME=	pkg
PORTVERSION=	1.2.7

USE_GITHUB=	yes
GH_ACCOUNT=	freebsd</programlisting>

	<para xml:lang="en">It will automatically have
	  <varname>MASTER_SITES</varname> set to <literal>GH
	    GHC</literal> and <varname>WRKSRC</varname> to
	  <literal>${WRKDIR}/pkg-1.2.7</literal>.</para>
      </example>

      <example xml:id="makefile-master_sites-github-ex2">
	<title xml:lang="en">More Complete Use of
	  <varname>USE_GITHUB</varname></title>

	<para xml:lang="en">While trying to make a port for the bleeding edge
	  version of <application>pkg</application> from the FreeBSD
	  user on github, at <link xlink:href="https://github.com/freebsd/pkg"/>, the
	  <filename>Makefile</filename> ends up looking like
	  this (slightly stripped for the example):</para>

	<programlisting>PORTNAME=	pkg-devel
PORTVERSION=	1.3.0.a.20140411

USE_GITHUB=	yes
GH_ACCOUNT=	freebsd
GH_PROJECT=	pkg
GH_TAGNAME=	6dbb17b</programlisting>

	<para xml:lang="en">It will automatically have
	  <varname>MASTER_SITES</varname> set to <literal>GH
	    GHC</literal> and <varname>WRKSRC</varname> to
	  <literal>${WRKDIR}/pkg-6dbb17b</literal>.</para>
      </example>

      <example xml:id="makefile-master_sites-github-ex3">
	<title xml:lang="en">Use of <varname>USE_GITHUB</varname> with
	  <varname>DISTVERSIONPREFIX</varname></title>

	<para xml:lang="en">From time to time, <varname>GH_TAGNAME</varname> is a
	  slight variation from <varname>DISTVERSION</varname>.
	  For example, if the version is <literal>1.0.2</literal>,
	  the tag is <literal>v1.0.2</literal>.  In those cases, it
	  is possible to use <varname>DISTVERSIONPREFIX</varname> or
	  <varname>DISTVERSIONSUFFIX</varname>:</para>

	<programlisting xml:lang="en">PORTNAME=	foo
PORTVERSION=	1.0.2
DISTVERSIONPREFIX=	v

USE_GITHUB=	yes</programlisting>

	<para xml:lang="en">It will automatically set
	  <varname>GH_TAGNAME</varname> to
	  <literal>v1.0.2</literal>, while <varname>WRKSRC</varname>
	  will be kept to
	  <varname>${WRKDIR}/foo-1.0.2</varname>.</para>
      </example>

      <sect3 xml:id="makefile-master_sites-github-multiple">
	<title xml:lang="en">Fetching Multiple Files from GitHub</title>

	<para xml:lang="en">The <varname>USE_GITHUB</varname> framework also
	  supports fetching multiple distribution files from
	  different places in GitHub.  It works in a way very
	  similar to <xref linkend="porting-master-sites-n"/>.</para>

	<para xml:lang="en">Multiple values are added to
	  <varname>GH_ACCOUNT</varname>,
	  <varname>GH_PROJECT</varname>, and
	  <varname>GH_TAGNAME</varname>.  Each different value is
	  assigned a tag.  The main value can either have no tag, or
	  the <literal>:DEFAULT</literal> tag.  A value can be
	  omitted if it is the same as the default as listed in
	  <xref linkend="makefile-master_sites-github-description"/>.</para>

	<para xml:lang="en"><varname>GH_TUPLE</varname> can also be used when there
	  are a lot of distribution files.  It helps keep the account,
	  project, tagname, and group information at the same
	  place.</para>

	<para xml:lang="en">For each tag, a
	  <varname>${WRKSRC_<replaceable>tag</replaceable>}</varname>
	  helper variable is created, containing the directory into
	  which the file has been extracted.  The
	  <varname>${WRKSRC_<replaceable>tag</replaceable>}</varname>
	  variables can be used to move directories around during
	  <buildtarget xml:lang="en">post-extract</buildtarget>, or add to
	  <varname>CONFIGURE_ARGS</varname>, or whatever is needed
	  so that the software builds correctly.</para>

	<example xml:id="makefile-master_sites-github-multi">
	  <title xml:lang="en">Use of <varname>USE_GITHUB</varname> with Multiple
	    Distribution Files</title>

	  <para xml:lang="en">From time to time, there is a need to fetch more
	    than one distribution file.  For example, when the
	    upstream git repository uses submodules.  This can be
	    done easily using tags in the
	    <varname>GH_<replaceable>*</replaceable></varname>
	    variables:</para>

	  <programlisting>PORTNAME=	foo
PORTVERSION=	1.0.2

USE_GITHUB=	yes
GH_ACCOUNT=	bar:icons,contrib
GH_PROJECT=	foo-icons:icons foo-contrib:contrib
GH_TAGNAME=	1.0:icons fa579bc:contrib

CONFIGURE_ARGS=	--with-contrib=${WRKSRC_contrib}

post-extract:
      @${MV} ${WRKSRC_icons} ${WRKSRC}/icons</programlisting>

	  <para xml:lang="en">This will fetch three distribution files from
	    github.  The default one comes from
	    <filename>foo/foo</filename> and is version
	    <literal>1.0.2</literal>.  The second one, tagged
	    <literal>icons</literal>, comes from
	    <filename>bar/foo-icons</filename> and is in version
	    <literal>1.0</literal>.  The third one comes from
	    <filename>bar/foo-contrib</filename> and uses the
	    <application>Git</application> commit
	    <literal>fa579bc</literal>.  The distribution files are
	    named <filename>foo-foo-1.0.2_GH0.tar.gz</filename>,
	    <filename>bar-foo-icons-1.0_GH0.tar.gz</filename>, and
	    <filename>bar-foo-contrib-fa579bc_GH0.tar.gz</filename>.</para>

	  <para xml:lang="en">All the distribution files are extracted in
	    <varname>${WRKDIR}</varname> in their respective
	    subdirectories.  The default file is still extracted in
	    <varname>${WRKSRC}</varname>, in this case,
	    <filename>${WRKDIR}/foo-1.0.2</filename>.  Each
	    additional distribution file is extracted in
	    <varname>${WRKSRC_<replaceable>tag</replaceable>}</varname>.
	    Here, for the <literal>icons</literal> tag, it is called
	    <varname>${WRKSRC_icons}</varname> and it contains
	    <filename>${WRKDIR}/foo-icons-1.0</filename>.  The file
	    with the <literal>contrib</literal> tag is called
	    <varname>${WRKSRC_contrib}</varname> and contains
	    <literal>${WRKDIR}/foo-contrib-fa579bc</literal>.</para>
	</example>

	<example xml:id="makefile-master_sites-github-multi2">
	  <title xml:lang="en">Use of <varname>USE_GITHUB</varname> with Multiple
	    Distribution Files Using
	    <varname>GH_TUPLE</varname></title>

	  <para xml:lang="en">This is functionally equivalent to <xref linkend="makefile-master_sites-github-multi"/>, but
	    using <varname>GH_TUPLE</varname>:</para>

	  <programlisting>PORTNAME=	foo
PORTVERSION=	1.0.2

USE_GITHUB=	yes
GH_TUPLE=	bar:foo-icons:1.0:icons \
		bar:foo-contrib:fa579bc:contrib

CONFIGURE_ARGS=	--with-contrib=${WRKSRC_contrib}

post-extract:
      @${MV} ${WRKSRC_icons} ${WRKSRC}/icons</programlisting>

	  <para xml:lang="en">Grouping was used in the previous example with
	    <literal>bar:icons,contrib</literal>.  Some redundant
	    information is present with <varname>GH_TUPLE</varname>
	    because grouping is not possible.</para>
	</example>
      </sect3>
    </sect2>

    <sect2 xml:id="makefile-extract_sufx">
      <title><varname>EXTRACT_SUFX</varname></title>

      <para xml:lang="en">If there is one distribution file, and it uses an odd
	suffix to indicate the compression mechanism, set
	<varname>EXTRACT_SUFX</varname>.</para>

      <para xml:lang="en">For example, if the distribution file was named
	<filename>foo.tar.gzip</filename> instead of the more normal
	<filename>foo.tar.gz</filename>, write:</para>

      <programlisting>DISTNAME=	foo
EXTRACT_SUFX=	.tar.gzip</programlisting>

      <para xml:lang="en">The
	<literal>USES=tar[:<replaceable>xxx</replaceable>]</literal>,
	<literal>USES=lha</literal> or <literal>USES=zip</literal>
	automatically set <varname>EXTRACT_SUFX</varname> to the most
	common archives extensions as necessary, see <xref linkend="uses-values"/> for more details.  If neither of
	these are set then <varname>EXTRACT_SUFX</varname> defaults to
	<literal>.tar.gz</literal>.</para>

      <note>
	<para xml:lang="en">As <varname>EXTRACT_SUFX</varname> is only used in
	  <varname>DISTFILES</varname>, only set one of them..</para>
      </note>
    </sect2>

    <sect2 xml:id="makefile-distfiles-definition">
      <title><varname>DISTFILES</varname></title>

      <para xml:lang="en">Sometimes the names of the files to be downloaded have no
	resemblance to the name of the port.  For example, it might be
	called <filename>source.tar.gz</filename> or similar.  In
	other cases the application's source code might be in several
	different archives, all of which must be downloaded.</para>

      <para xml:lang="en">If this is the case, set <varname>DISTFILES</varname> to
	be a space separated list of all the files that must be
	downloaded.</para>

      <programlisting>DISTFILES=	source1.tar.gz source2.tar.gz</programlisting>

      <para xml:lang="en">If not explicitly set, <varname>DISTFILES</varname>
	defaults to
	<literal>${DISTNAME}${EXTRACT_SUFX}</literal>.</para>
    </sect2>

    <sect2 xml:id="makefile-extract_only">
      <title><varname>EXTRACT_ONLY</varname></title>

      <para xml:lang="en">If only some of the <varname>DISTFILES</varname> must be
	extracted—for example, one of them is the source code,
	while another is an uncompressed document—list the
	filenames that must be extracted in
	<varname>EXTRACT_ONLY</varname>.</para>

      <programlisting>DISTFILES=	source.tar.gz manual.html
EXTRACT_ONLY=	source.tar.gz</programlisting>

      <para xml:lang="en">When none of the <varname>DISTFILES</varname> need to be
	uncompressed, set <varname>EXTRACT_ONLY</varname> to the empty
	string.</para>

      <programlisting>EXTRACT_ONLY=</programlisting>
    </sect2>

    <sect2 xml:id="porting-patchfiles">
      <title xml:lang="en"><varname>PATCHFILES</varname></title>

      <para xml:lang="en">If the port requires some additional patches that are
	available by <acronym>FTP</acronym> or
	<acronym>HTTP</acronym>, set <varname>PATCHFILES</varname> to
	the names of the files and <varname>PATCH_SITES</varname> to
	the URL of the directory that contains them (the format is the
	same as <varname>MASTER_SITES</varname>).</para>

      <para xml:lang="en">If the patch is not relative to the top of the source tree
	(that is, <varname>WRKSRC</varname>) because it contains some
	extra pathnames, set <varname>PATCH_DIST_STRIP</varname>
	accordingly.  For instance, if all the pathnames in the patch
	have an extra <literal>foozolix-1.0/</literal> in front of the
	filenames, then set
	<literal>PATCH_DIST_STRIP=-p1</literal>.</para>

      <para xml:lang="en">Do not worry if the patches are compressed; they will be
	decompressed automatically if the filenames end with
	<filename>.Z</filename>, <filename>.gz</filename>,
	<filename>.bz2</filename> or <filename>.xz</filename>.</para>

      <para xml:lang="en">If the patch is distributed with some other files, such as
	documentation, in a <command>gzip</command>ped tarball, using
	<varname>PATCHFILES</varname> is not possible.  If that is the
	case, add the name and the location of the patch tarball to
	<varname>DISTFILES</varname> and
	<varname>MASTER_SITES</varname>.  Then, use
	<varname>EXTRA_PATCHES</varname> to point to those
	files and <filename>bsd.port.mk</filename> will automatically
	apply them.  In particular, do
	<emphasis>not</emphasis> copy patch files into
	<filename>${PATCHDIR}</filename>.  That directory may
	not be writable.</para>

      <tip>
	<para xml:lang="en">If there are multiple patches and they need mixed values
	  for the strip parameter, it can be added alongside the patch
	  name in <varname>PATCHFILES</varname>, e.g:</para>

	<programlisting xml:lang="en">PATCHFILES=	patch1 patch2:-p1</programlisting>

	<para xml:lang="en">This does not conflict with <link linkend="porting-master-sites-n">the master site grouping
	    feature</link>, adding a group also works:</para>

	<programlisting xml:lang="en">PATCHFILES=	patch2:-p1:source2</programlisting>
      </tip>

      <note>
	<para xml:lang="en">The tarball will have been extracted alongside the
	  regular source by then, so there is no need to explicitly
	  extract it if it is a regular <command>gzip</command>ped or
	  <command>compress</command>ed tarball.  Take extra care not
	  to overwrite something that already exists in that
	  directory if extracting it manually.  Also, do not forget to
	  add a command to remove the copied patch in the
	  <buildtarget xml:lang="en">pre-clean</buildtarget> target.</para>
      </note>
    </sect2>

    <sect2 xml:id="porting-master-sites-n">
      <title xml:lang="en">Multiple Distribution or Patches Files from Multiple
	Locations</title>

      <para xml:lang="en">(Consider this to be a somewhat
	<quote>advanced topic</quote>; those new to this document
	may wish to skip this section at first).</para>

      <para xml:lang="en">This section has information on the fetching mechanism
	known as both <literal>MASTER_SITES:n</literal> and
	<literal>MASTER_SITES_NN</literal>.  We will refer to this
	mechanism as <literal>MASTER_SITES:n</literal>.</para>

      <para xml:lang="en">A little background first.  OpenBSD has a neat feature
	inside <varname>DISTFILES</varname> and
	<varname>PATCHFILES</varname> which allows files and
	patches to be postfixed with <literal>:n</literal>
	identifiers.  Here, <literal>n</literal> can be both
	<literal>[0-9]</literal> and denote a group designation.  For
	example:</para>

      <programlisting xml:lang="en">DISTFILES=	alpha:0 beta:1</programlisting>

      <para xml:lang="en">In OpenBSD, distribution file <filename>alpha</filename>
	will be associated with variable
	<varname>MASTER_SITES0</varname> instead of our common
	<varname>MASTER_SITES</varname> and
	<filename>beta</filename> with
	<varname>MASTER_SITES1</varname>.</para>

      <para xml:lang="en">This is a very interesting feature which can decrease
	that endless search for the correct download site.</para>

      <para xml:lang="en">Just picture 2 files in <varname>DISTFILES</varname> and
	20 sites in <varname>MASTER_SITES</varname>, the sites slow as
	hell where <filename>beta</filename> is carried by all sites
	in <varname>MASTER_SITES</varname>, and
	<filename>alpha</filename> can only be found in the 20th site.
	It would be such a waste to check all of them if the
	maintainer knew this beforehand, would it not?  Not a good
	start for that lovely weekend!</para>

      <para xml:lang="en">Now that you have the idea, just imagine more
	<varname>DISTFILES</varname> and more
	<varname>MASTER_SITES</varname>.  Surely our
	<quote>distfiles survey meister</quote> would appreciate the
	relief to network strain that this would bring.</para>

      <para xml:lang="en">In the next sections, information will follow on the
	FreeBSD implementation of this idea.  We improved a bit on
	OpenBSD's concept.</para>

      <sect3 xml:id="porting-master-sites-n-simplified">
	<title xml:lang="en">Simplified Information</title>

	<para xml:lang="en">This section explains how to quickly prepare fine
	  grained fetching of multiple distribution files and patches
	  from different sites and subdirectories.  We describe here a
	  case of simplified <literal>MASTER_SITES:n</literal> usage.
	  This will be sufficient for most scenarios.  More detailed
	  information are available in <xref linkend="ports-master-sites-n-detailed"/>.</para>

	<para xml:lang="en">Some applications consist of multiple distribution files
	  that must be downloaded from a number of different sites.
	  For example, <application>Ghostscript</application> consists
	  of the core of the program, and then a large number of
	  driver files that are used depending on the user's printer.
	  Some of these driver files are supplied with the core, but
	  many others must be downloaded from a variety of different
	  sites.</para>

	<para xml:lang="en">To support this, each entry in
	  <varname>DISTFILES</varname> may be followed by a colon and
	  a <quote>tag name</quote>.  Each site listed in
	  <varname>MASTER_SITES</varname> is then followed by a colon,
	  and the tag that indicates which distribution files are
	  downloaded from this site.</para>

	<para xml:lang="en">For example, consider an application with the source
	  split in two parts, <filename>source1.tar.gz</filename> and
	  <filename>source2.tar.gz</filename>, which must be
	  downloaded from two different sites.  The port's
	  <filename>Makefile</filename> would include lines like <xref linkend="ports-master-sites-n-example-simple-use-one-file-per-site"/>.</para>

	<example xml:id="ports-master-sites-n-example-simple-use-one-file-per-site">

	  <title xml:lang="en">Simplified Use of <literal>MASTER_SITES:n</literal>
	    with One File Per Site</title>

	  <programlisting>MASTER_SITES=	ftp://ftp1.example.com/:source1 \
		http://www.example.com/:source2
DISTFILES=	source1.tar.gz:source1 \
		source2.tar.gz:source2</programlisting>
	</example>

	<para xml:lang="en">Multiple distribution files can have the same tag.
	  Continuing the previous example, suppose that there was a
	  third distfile, <filename>source3.tar.gz</filename>, that
	  is downloaded from
	  <systemitem>ftp.example2.com</systemitem>.  The
	  <filename>Makefile</filename> would then be written like
	  <xref linkend="ports-master-sites-n-example-simple-use-more-than-one-file-per-site"/>.</para>

	<example xml:id="ports-master-sites-n-example-simple-use-more-than-one-file-per-site">

	  <title xml:lang="en">Simplified Use of <literal>MASTER_SITES:n</literal>
	    with More Than One File Per Site</title>

	  <programlisting>MASTER_SITES=	ftp://ftp.example.com/:source1 \
		http://www.example.com/:source2
DISTFILES=	source1.tar.gz:source1 \
		source2.tar.gz:source2 \
		source3.tar.gz:source2</programlisting>
	</example>
      </sect3>

      <sect3 xml:id="ports-master-sites-n-detailed">
	<title xml:lang="en">Detailed Information</title>

	<para xml:lang="en">Okay, so the previous example did not reflect the new
	  port's needs?  In this section we will explain in detail how
	  the fine grained fetching mechanism
	  <literal>MASTER_SITES:n</literal> works and how it can
	  be used.</para>

	<orderedlist>
	  <listitem>
	    <para xml:lang="en">Elements can be postfixed with
	      <literal>:<replaceable>n</replaceable></literal> where
	      <replaceable>n</replaceable> is
	      <literal>[^:,]+</literal>, that is,
	      <replaceable>n</replaceable> could conceptually be any
	      alphanumeric string but we will limit it to
	      <literal>[a-zA-Z_][0-9a-zA-Z_]+</literal> for
	      now.</para>

	    <para xml:lang="en">Moreover, string matching is case sensitive; that
	      is, <literal>n</literal> is different from
	      <literal>N</literal>.</para>

	    <para xml:lang="en">However, these words cannot be used for
	      postfixing purposes since they yield special meaning:
	      <literal>default</literal>, <literal>all</literal> and
	      <literal>ALL</literal> (they are used internally in
	      item <xref linkend="porting-master-sites-n-what-changes-in-port-targets"/>).
	      Furthermore, <literal>DEFAULT</literal> is a special
	      purpose word (check item <xref linkend="porting-master-sites-n-DEFAULT-group"/>).</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">Elements postfixed with <literal>:n</literal>
	      belong to the group <literal>n</literal>,
	      <literal>:m</literal> belong to group
	      <literal>m</literal> and so forth.</para>
	  </listitem>

	  <listitem xml:id="porting-master-sites-n-DEFAULT-group">
	    <para xml:lang="en">Elements without a postfix are groupless, they
	      all belong to the special group
	      <literal>DEFAULT</literal>.  Any elements postfixed
	      with <literal>DEFAULT</literal>, is just being
	      redundant unless an element belongs
	      to both <literal>DEFAULT</literal> and other groups at
	      the same time (check item <xref linkend="porting-master-sites-n-comma-operator"/>).</para>

	    <para xml:lang="en">These examples are equivalent but the first
	      one is preferred:</para>

	    <programlisting>MASTER_SITES=	alpha</programlisting>

	    <programlisting>MASTER_SITES=	alpha:DEFAULT</programlisting>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">Groups are not exclusive, an element may belong to
	      several different groups at the same time and a group
	      can either have either several different elements or
	      none at all.</para>
	  </listitem>

	  <listitem xml:id="porting-master-sites-n-comma-operator">
	    <para xml:lang="en">When an element belongs to several groups
	      at the same time, use the comma operator
	      (<literal>,</literal>).</para>

	    <para xml:lang="en">Instead of repeating it several times, each time
	      with a different postfix, we can list several groups at
	      once in a single postfix.  For instance,
	      <literal>:m,n,o</literal> marks an element that belongs
	      to group <literal>m</literal>, <literal>n</literal> and
	      <literal>o</literal>.</para>

	    <para xml:lang="en">All these examples are equivalent but the
	      last one is preferred:</para>

	    <programlisting>MASTER_SITES=	alpha alpha:SOME_SITE</programlisting>

	    <programlisting>MASTER_SITES=	alpha:DEFAULT alpha:SOME_SITE</programlisting>

	    <programlisting>MASTER_SITES=	alpha:SOME_SITE,DEFAULT</programlisting>

	    <programlisting>MASTER_SITES=	alpha:DEFAULT,SOME_SITE</programlisting>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">All sites within a given group are sorted according
	      to <varname>MASTER_SORT_AWK</varname>.  All groups
	      within <varname>MASTER_SITES</varname> and
	      <varname>PATCH_SITES</varname> are sorted as
	      well.</para>
	  </listitem>

	  <listitem xml:id="porting-master-sites-n-group-semantics">
	    <para xml:lang="en">Group semantics can be used in any of the
	      variables <varname>MASTER_SITES</varname>,
	      <varname>PATCH_SITES</varname>,
	      <varname>MASTER_SITE_SUBDIR</varname>,
	      <varname>PATCH_SITE_SUBDIR</varname>,
	      <varname>DISTFILES</varname>, and
	      <varname>PATCHFILES</varname> according to this
	      syntax:</para>

	    <orderedlist>
	      <listitem>
		<para xml:lang="en">All <varname>MASTER_SITES</varname>,
		  <varname>PATCH_SITES</varname>,
		  <varname>MASTER_SITE_SUBDIR</varname> and
		  <varname>PATCH_SITE_SUBDIR</varname> elements must
		  be terminated with the forward slash
		  <literal>/</literal> character.  If any elements
		  belong to any groups, the group postfix
		  <literal>:<replaceable>n</replaceable></literal>
		  must come right after the terminator
		  <literal>/</literal>.  The
		  <literal>MASTER_SITES:n</literal> mechanism relies
		  on the existence of the terminator
		  <literal>/</literal> to avoid confusing elements
		  where a <literal>:n</literal> is a valid part of the
		  element with occurrences where <literal>:n</literal>
		  denotes group <literal>n</literal>.  For
		  compatibility purposes, since the
		  <literal>/</literal> terminator was not required
		  before in both <varname>MASTER_SITE_SUBDIR</varname>
		  and <varname>PATCH_SITE_SUBDIR</varname> elements,
		  if the postfix immediate preceding character is not
		  a <literal>/</literal> then <literal>:n</literal>
		  will be considered a valid part of the element
		  instead of a group postfix even if an element is
		  postfixed with <literal>:n</literal>.  See both
		  <xref linkend="ports-master-sites-n-example-detailed-use-master-site-subdir"/>
		  and <xref linkend="ports-master-sites-n-example-detailed-use-complete-example-master-sites"/>.</para>

		<example xml:id="ports-master-sites-n-example-detailed-use-master-site-subdir">

		  <title xml:lang="en">Detailed Use of
		    <literal>MASTER_SITES:n</literal> in
		    <varname>MASTER_SITE_SUBDIR</varname></title>

		  <programlisting>MASTER_SITE_SUBDIR=	old:n new/:NEW</programlisting>

		  <itemizedlist>
		    <listitem>
		      <para xml:lang="en">Directories within group
			<literal>DEFAULT</literal> -&gt;
			old:n</para>
		    </listitem>

		    <listitem>
		      <para xml:lang="en">Directories within group
			<literal>NEW</literal> -&gt; new</para>
		    </listitem>
		  </itemizedlist>
		</example>

		<example xml:id="ports-master-sites-n-example-detailed-use-complete-example-master-sites">

		  <title xml:lang="en">Detailed Use of
		    <literal>MASTER_SITES:n</literal> with Comma
		    Operator, Multiple Files, Multiple Sites and
		    Multiple Subdirectories</title>

		  <programlisting>MASTER_SITES=	http://site1/%SUBDIR%/ http://site2/:DEFAULT \
		http://site3/:group3 http://site4/:group4 \
		http://site5/:group5 http://site6/:group6 \
		http://site7/:DEFAULT,group6 \
		http://site8/%SUBDIR%/:group6,group7 \
		http://site9/:group8
DISTFILES=	file1 file2:DEFAULT file3:group3 \
		file4:group4,group5,group6 file5:grouping \
		file6:group7
MASTER_SITE_SUBDIR=	directory-trial:1 directory-n/:groupn \
		directory-one/:group6,DEFAULT \
		directory</programlisting>

		  <para xml:lang="en">The previous example results in this
		    fine grained fetching.  Sites are listed in the
		    exact order they will be used.</para>

		  <itemizedlist>
		    <listitem>
		      <para xml:lang="en"><filename>file1</filename> will be
			fetched from</para>

		      <itemizedlist>
			<listitem>
			  <para><varname>MASTER_SITE_OVERRIDE</varname></para>
			</listitem>

			<listitem>
			  <para>http://site1/directory-trial:1/</para>
			</listitem>

			<listitem>
			  <para>http://site1/directory-one/</para>
			</listitem>

			<listitem>
			  <para>http://site1/directory/</para>
			</listitem>

			<listitem>
			  <para>http://site2/</para>
			</listitem>

			<listitem>
			  <para>http://site7/</para>
			</listitem>

			<listitem>
			  <para><varname>MASTER_SITE_BACKUP</varname></para>
			</listitem>
		      </itemizedlist>
		    </listitem>

		    <listitem>
		      <para xml:lang="en"><filename>file2</filename> will be fetched
			exactly as <filename>file1</filename> since
			they both belong to the same group</para>

		      <itemizedlist>
			<listitem>
			  <para><varname>MASTER_SITE_OVERRIDE</varname></para>
			</listitem>

			<listitem>
			  <para>http://site1/directory-trial:1/</para>
			</listitem>

			<listitem>
			  <para>http://site1/directory-one/</para>
			</listitem>

			<listitem>
			  <para>http://site1/directory/</para>
			</listitem>

			<listitem>
			  <para>http://site2/</para>
			</listitem>

			<listitem>
			  <para>http://site7/</para>
			</listitem>

			<listitem>
			  <para><varname>MASTER_SITE_BACKUP</varname></para>
			</listitem>
		      </itemizedlist>
		    </listitem>

		    <listitem>
		      <para xml:lang="en"><filename>file3</filename> will be fetched
			from</para>

		      <itemizedlist>
			<listitem>
			  <para><varname>MASTER_SITE_OVERRIDE</varname></para>
			</listitem>

			<listitem>
			  <para>http://site3/</para>
			</listitem>

			<listitem>
			  <para><varname>MASTER_SITE_BACKUP</varname></para>
			</listitem>
		      </itemizedlist>
		    </listitem>

		    <listitem>
		      <para xml:lang="en"><filename>file4</filename> will be
			fetched from</para>

		      <itemizedlist>
			<listitem>
			  <para><varname>MASTER_SITE_OVERRIDE</varname></para>
			</listitem>

			<listitem>
			  <para>http://site4/</para>
			</listitem>

			<listitem>
			  <para>http://site5/</para>
			</listitem>

			<listitem>
			  <para>http://site6/</para>
			</listitem>

			<listitem>
			  <para>http://site7/</para>
			</listitem>

			<listitem>
			  <para>http://site8/directory-one/</para>
			</listitem>

			<listitem>
			  <para><varname>MASTER_SITE_BACKUP</varname></para>
			</listitem>
		      </itemizedlist>
		    </listitem>

		    <listitem>
		      <para xml:lang="en"><filename>file5</filename> will be fetched
			from</para>

		      <itemizedlist>
			<listitem>
			  <para><varname>MASTER_SITE_OVERRIDE</varname></para>
			</listitem>

			<listitem>
			  <para><varname>MASTER_SITE_BACKUP</varname></para>
			</listitem>
		      </itemizedlist>
		    </listitem>

		    <listitem>
		      <para xml:lang="en"><filename>file6</filename> will be fetched
			from</para>

		      <itemizedlist>
			<listitem>
			  <para><varname>MASTER_SITE_OVERRIDE</varname></para>
			</listitem>

			<listitem>
			  <para>http://site8/</para>
			</listitem>

			<listitem>
			  <para><varname>MASTER_SITE_BACKUP</varname></para>
			</listitem>
		      </itemizedlist>
		    </listitem>
		  </itemizedlist>
		</example>
	      </listitem>
	    </orderedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">How do I group one of the special macros from
	      <filename>bsd.sites.mk</filename>, for example,
	      SourceForge (<literal>SF</literal>)?</para>

	    <para xml:lang="en">This has been simplified as much as possible.  See
	      <xref linkend="ports-master-sites-n-example-detailed-use-master-site-sourceforge"/>.</para>

	    <example xml:id="ports-master-sites-n-example-detailed-use-master-site-sourceforge">

	      <title xml:lang="en">Detailed Use of <literal>MASTER_SITES:n</literal>
		with SourceForge (<literal>SF</literal>)</title>

	      <programlisting>MASTER_SITES=	http://site1/ SF/something/1.0:sourceforge,TEST
DISTFILES=	something.tar.gz:sourceforge</programlisting>

	      <para xml:lang="en"><filename>something.tar.gz</filename> will be
		fetched from all sites within SourceForge.</para>
	    </example>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">How do I use this with
	      <varname>PATCH<replaceable>*</replaceable></varname>?</para>

	    <para xml:lang="en">All examples were done with
	      <varname>MASTER<replaceable>*</replaceable></varname>
	      but they work exactly the same for
	      <varname>PATCH<replaceable>*</replaceable></varname>
	      ones as can be seen in <xref linkend="ports-master-sites-n-example-detailed-use-patch-sites"/>.</para>

	    <example xml:id="ports-master-sites-n-example-detailed-use-patch-sites">

	      <title xml:lang="en">Simplified Use of
		<literal>MASTER_SITES:n</literal> with
		<varname>PATCH_SITES</varname></title>

	      <programlisting>PATCH_SITES=	http://site1/ http://site2/:test
PATCHFILES=	patch1:test</programlisting>
	    </example>
	  </listitem>
	</orderedlist>
      </sect3>

      <sect3 xml:id="port-master-sites-n-what-changed">
	<title xml:lang="en">What Does Change for Ports?  What Does Not?</title>

	<orderedlist numeration="lowerroman">
	  <listitem>
	    <para xml:lang="en">All current ports remain the same.  The
	      <literal>MASTER_SITES:n</literal> feature code is only
	      activated if there are elements postfixed with
	      <literal>:<replaceable>n</replaceable></literal> like
	      elements according to the aforementioned syntax rules,
	      especially as shown in item <xref linkend="porting-master-sites-n-group-semantics"/>.</para>
	  </listitem>

	  <listitem xml:id="porting-master-sites-n-what-changes-in-port-targets">
	    <para xml:lang="en">The port targets remain the same:
	      <buildtarget xml:lang="en">checksum</buildtarget>,
	      <buildtarget xml:lang="en">makesum</buildtarget>,
	      <buildtarget xml:lang="en">patch</buildtarget>,
	      <buildtarget xml:lang="en">configure</buildtarget>,
	      <buildtarget xml:lang="en">build</buildtarget>, etc.  With the obvious
	      exceptions of <buildtarget xml:lang="en">do-fetch</buildtarget>,
	      <buildtarget xml:lang="en">fetch-list</buildtarget>,
	      <buildtarget xml:lang="en">master-sites</buildtarget> and
	      <buildtarget xml:lang="en">patch-sites</buildtarget>.</para>

	    <itemizedlist>
	      <listitem>
		<para xml:lang="en"><buildtarget xml:lang="en">do-fetch</buildtarget>: deploys
		  the new grouping postfixed
		  <varname>DISTFILES</varname> and
		  <varname>PATCHFILES</varname> with their matching
		  group elements within both
		  <varname>MASTER_SITES</varname> and
		  <varname>PATCH_SITES</varname> which use matching
		  group elements within both
		  <varname>MASTER_SITE_SUBDIR</varname> and
		  <varname>PATCH_SITE_SUBDIR</varname>.  Check <xref linkend="ports-master-sites-n-example-detailed-use-complete-example-master-sites"/>.</para>
	      </listitem>

	      <listitem>
		<para xml:lang="en"><buildtarget xml:lang="en">fetch-list</buildtarget>: works
		  like old <buildtarget xml:lang="en">fetch-list</buildtarget> with
		  the exception that it groups just like
		  <buildtarget xml:lang="en">do-fetch</buildtarget>.</para>
	      </listitem>

	      <listitem>
		<para xml:lang="en"><buildtarget xml:lang="en">master-sites</buildtarget> and
		  <buildtarget xml:lang="en">patch-sites</buildtarget>:
		  (incompatible with older versions) only return the
		  elements of group <literal>DEFAULT</literal>; in
		  fact, they execute targets
		  <buildtarget xml:lang="en">master-sites-default</buildtarget> and
		  <buildtarget xml:lang="en">patch-sites-default</buildtarget>
		  respectively.</para>

		<para xml:lang="en">Furthermore, using target either
		  <buildtarget xml:lang="en">master-sites-all</buildtarget> or
		  <buildtarget xml:lang="en">patch-sites-all</buildtarget> is
		  preferred to directly checking either
		  <buildtarget xml:lang="en">MASTER_SITES</buildtarget> or
		  <buildtarget xml:lang="en">PATCH_SITES</buildtarget>.  Also,
		  directly checking is not guaranteed to work in any
		  future versions.  Check item <xref linkend="porting-master-sites-n-new-port-targets-master-sites-all"/>
		  for more information on these new port
		  targets.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para xml:lang="en">New port targets</para>

	    <orderedlist>
	      <listitem>
		<para xml:lang="en">There are
		  <buildtarget xml:lang="en">master-sites-<replaceable>n</replaceable></buildtarget>
		  and
		  <buildtarget xml:lang="en">patch-sites-<replaceable>n</replaceable></buildtarget>
		  targets which will list the elements of the
		  respective group <replaceable>n</replaceable>
		  within <varname>MASTER_SITES</varname> and
		  <varname>PATCH_SITES</varname> respectively.  For
		  instance, both
		  <buildtarget xml:lang="en">master-sites-DEFAULT</buildtarget>
		  and <buildtarget xml:lang="en">patch-sites-DEFAULT</buildtarget>
		  will return the elements of group
		  <literal>DEFAULT</literal>,
		  <buildtarget xml:lang="en">master-sites-test</buildtarget> and
		  <buildtarget xml:lang="en">patch-sites-test</buildtarget> of
		  group <literal>test</literal>, and thereon.</para>
	      </listitem>

	      <listitem xml:id="porting-master-sites-n-new-port-targets-master-sites-all">
		<para xml:lang="en">There are new targets
		  <buildtarget xml:lang="en">master-sites-all</buildtarget> and
		  <buildtarget xml:lang="en">patch-sites-all</buildtarget> which do
		  the work of the old
		  <buildtarget xml:lang="en">master-sites</buildtarget> and
		  <buildtarget xml:lang="en">patch-sites</buildtarget> ones.  They
		  return the elements of all groups as if they all
		  belonged to the same group with the caveat that it
		  lists as many <varname>MASTER_SITE_BACKUP</varname>
		  and <varname>MASTER_SITE_OVERRIDE</varname> as there
		  are groups defined within either
		  <varname>DISTFILES</varname> or
		  <varname>PATCHFILES</varname>; respectively for
		  <buildtarget xml:lang="en">master-sites-all</buildtarget> and
		  <buildtarget xml:lang="en">patch-sites-all</buildtarget>.</para>
	      </listitem>
	    </orderedlist>
	  </listitem>
	</orderedlist>
      </sect3>
    </sect2>

    <sect2 xml:id="makefile-dist_subdir">
      <title><varname>DIST_SUBDIR</varname></title>

      <para xml:lang="en">Do not let the port clutter
	<filename>/usr/ports/distfiles</filename>.  If the port
	requires a lot of files to be fetched, or contains a file that
	has a name that might conflict with other ports (for example,
	<filename>Makefile</filename>), set
	<varname>DIST_SUBDIR</varname> to the name of the port
	(<literal>${PORTNAME}</literal> or
	<literal>${PKGNAMEPREFIX}${PORTNAME}</literal> are
	fine).  This will change <varname>DISTDIR</varname> from the
	default <filename>/usr/ports/distfiles</filename> to
	<filename>/usr/ports/distfiles/${DIST_SUBDIR}</filename>, and
	in effect puts everything that is required for the port into
	that subdirectory.</para>

      <para xml:lang="en">It will also look at the subdirectory with the same name
	on the backup master site at
	<filename>ftp.FreeBSD.org</filename>.  (Setting
	<varname>DISTDIR</varname> explicitly in
	<filename>Makefile</filename> will not accomplish this, so
	please use <varname>DIST_SUBDIR</varname>.)</para>

      <note>
	<para xml:lang="en">This does not affect
	  <varname>MASTER_SITES</varname> defined in the
	  <filename>Makefile</filename>.</para>
      </note>
    </sect2>

    <sect2 xml:id="makefile-always_keep_distfiles">
      <title><varname>ALWAYS_KEEP_DISTFILES</varname></title>

      <para xml:lang="en">If the port uses binary distfiles and has a license that
	requires that the source code is provided with packages
	distributed in binary form, like <acronym>GPL</acronym>,
	<varname>ALWAYS_KEEP_DISTFILES</varname> will instruct the
	FreeBSD build cluster to keep a copy of the files specified in
	<varname>DISTFILES</varname>.  Users of these ports will
	generally not need these files, so it is a good idea to only
	add the source distfiles to <varname>DISTFILES</varname> when
	<varname>PACKAGE_BUILDING</varname> is defined.</para>

      <example xml:id="ports-master-sites-n-example-always-keep-distfiles">

	<title xml:lang="en">Use of
	  <varname>ALWAYS_KEEP_DISTFILES</varname></title>

	<programlisting xml:lang="en">.if defined(PACKAGE_BUILDING)
DISTFILES+=		<replaceable>foo.tar.gz</replaceable>
ALWAYS_KEEP_DISTFILES=	yes
.endif</programlisting>
      </example>

      <para xml:lang="en">When adding extra files to <varname>DISTFILES</varname>,
	make sure to also add them to <filename>distinfo</filename>.
	Also, the additional files will normally be extracted into
	<varname>WRKDIR</varname> as well, which for some ports may
	lead to undesirable side effects and require special
	handling.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="makefile-maintainer">
    <title><varname>MAINTAINER</varname></title>

    <para> 請在這裡設定你的 email 地址<emphasis>:-)</emphasis></para>

    <para xml:lang="en">Only a single address without the comment part is
      allowed as a <varname>MAINTAINER</varname> value.  The format
      used is <literal>user@hostname.domain</literal>.  Please
      do not include any descriptive text such as a real name in
      this entry.  That merely confuses the Ports infrastructure
      and most tools using it.</para>

    <para xml:lang="en">The maintainer is responsible for keeping the port up to
      date and making sure that it works correctly.  For a detailed
      description of the responsibilities of a port maintainer, refer
      to <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/articles/contributing/ports-contributing.html#maintain-port">The
	challenge for port maintainers</link>.</para>

    <note>
      <para xml:lang="en">A maintainer volunteers to keep a port in good working
	order.  Maintainers have the primary responsibility for their
	ports, but not exclusive ownership.  Ports exist for the
	benefit of the community and, in reality, belong to the
	community.  What this means is that people other than the
	maintainer can make changes to a port.  Large changes to the
	Ports Collection might require changes to many ports.  The
	FreeBSD Ports Management Team or members of other teams might
	modify ports to fix dependency issues or other problems, like
	a version bump for a shared library update.</para>

      <para xml:lang="en">Some types of fixes have <quote>blanket approval</quote>
	from the Ports Management Team <email>portmgr@FreeBSD.org</email>, allowing any committer to fix those
	categories of problems on any port.  These fixes do not need
	approval from the maintainer.  Blanket approval does not apply
	to ports that are maintained by teams like <email role="nolink">autotools@FreeBSD.org</email>, <email role="nolink">x11@FreeBSD.org</email>, <email role="nolink">gnome@FreeBSD.org</email>, or <email role="nolink">kde@FreeBSD.org</email>.  These teams use
	external repositories and can have work that would conflict
	with changes that would normally fall under blanket
	approval.</para>

      <para xml:lang="en">Blanket approval for most ports applies to these types of
	fixes:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en">Most infrastructure changes to a port (that is,
	    modernizing, but not changing the functionality).  For
	    example, converting to staging,
	    <varname>USE_GMAKE</varname> to
	    <literal>USES=gmake</literal>, the new
	    <varname>LIB_DEPENDS</varname> format...</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">Trivial and <emphasis>tested</emphasis> build and
	    runtime fixes.</para>
	</listitem>
      </itemizedlist>
    </note>

    <para xml:lang="en">Other changes to the port will be sent to the maintainer
      for review and approval before being committed.  If the
      maintainer does not respond to an update request after two weeks
      (excluding major public holidays), then that is considered a
      maintainer timeout, and the update may be made without explicit
      maintainer approval.  If the maintainer does not respond within
      three months, or if there have been three consecutive timeouts,
      then that maintainer is considered absent without
      leave, and can be replaced as the maintainer of the particular
      port in question.  Exceptions to this are anything maintained by
      the Ports Management Team <email>portmgr@FreeBSD.org</email>, or the Security Officer Team <email>security-officer@FreeBSD.org</email>.  No unauthorized
      commits may ever be made to ports maintained by those
      groups.</para>

    <para xml:lang="en">We reserve the right to modify the maintainer's submission
      to better match existing policies and style of the Ports
      Collection without explicit blessing from the submitter or the
      maintainer.  Also,
      large infrastructural changes can result in a port being
      modified without the maintainer's consent.  These kinds of
      changes will never affect the port's functionality.</para>

    <para xml:lang="en">The Ports Management Team <email>portmgr@FreeBSD.org</email> reserves the right to revoke or override
      anyone's maintainership for any reason, and the
      Security Officer Team <email>security-officer@FreeBSD.org</email> reserves the right to revoke or override
      maintainership for security reasons.</para>
  </sect1>

  <sect1 xml:id="makefile-comment">
    <title><varname>COMMENT</varname></title>

    <para>這是關於這個 port的一行描述。請遵守這些原則：</para>

    <orderedlist>
      <listitem>
	<para xml:lang="en">Try to keep the COMMENT value at no longer than 70
	  characters, as this line will be used by
	  <command>pkg info</command> (see <citerefentry><refentrytitle>pkg-info</refentrytitle><manvolnum>8</manvolnum></citerefentry>) to
	  display a one-line summary of the port;</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Do <emphasis>not</emphasis> include the package name (or
	  version number of the software);</para>
      </listitem>

      <listitem>
	<para xml:lang="en">The comment must begin with a capital and end without
	  a period;</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Do not start with an indefinite article (that is, A or
	  An);</para>
      </listitem>

      <listitem>
	<para>名字首字大寫 (例如， Apache, JavaScript, Perl)；</para>
      </listitem>

      <listitem>
	<para xml:lang="en">For lists of words, use the Oxford comma (for example,
	  green, red<emphasis>,</emphasis> and blue);</para>
      </listitem>

      <listitem>
	<para>請檢查拼字。</para>
      </listitem>
    </orderedlist>

    <para>以下是範例：</para>

    <programlisting xml:lang="en">COMMENT=	Cat chasing a mouse all over the screen</programlisting>

    <para xml:lang="en">The COMMENT variable immediately follows the
      MAINTAINER variable in the <filename>Makefile</filename>.</para>
  </sect1>

  <sect1 xml:id="makefile-portscout">
    <title><varname>PORTSCOUT</varname></title>

    <para xml:lang="en"><application>Portscout</application> is an automated
      distfile check utility for the FreeBSD Ports Collection,
      described in detail in <xref linkend="distfile-survey"/>.</para>

    <para xml:lang="en"><varname>PORTSCOUT</varname> defines special
      conditions within which the <application>Portscout</application>
      distfile scanner is restricted.</para>

    <para xml:lang="en">Situations where <varname>PORTSCOUT</varname>
      is set include:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en">When distfiles have to be ignored, whether for specific
	  versions, or specific minor revisions.  For example, to
	  exclude version <replaceable>8.2</replaceable> from distfile
	  version checks because it is known to be broken, add:</para>

	<programlisting>PORTSCOUT=	ignore:8.2</programlisting>
      </listitem>

      <listitem>
	<para xml:lang="en">When specific versions or specific major and minor
	  revisions of a distfile must be checked.  For example, if
	  only version <replaceable>0.6.4</replaceable> must be
	  monitored because newer versions have compatibility issues
	  with FreeBSD, add:</para>

	<programlisting>PORTSCOUT=	limit:^0\.6\.4</programlisting>
      </listitem>

      <listitem>
	<para xml:lang="en">When URLs listing the available versions differ from the
	  download URLs.  For example, to limit distfile version
	  checks to the download page for the
	  <package role="port">databases/pgtune</package> port,
	  add:</para>

	<programlisting>PORTSCOUT=	site:http://pgfoundry.org/frs/?group_id=1000416</programlisting>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 xml:id="makefile-depend">
    <title>相依性</title>

    <para xml:lang="en">Many ports depend on other ports.  This is a very convenient
      feature of most Unix-like operating systems, including FreeBSD.
      Multiple ports can share a common dependency, rather than
      bundling that dependency with every port or package that needs
      it.  There are seven variables that can be used to ensure that
      all the required bits will be on the user's machine.  There are
      also some pre-supported dependency variables for common cases,
      plus a few more to control the behavior of dependencies.</para>

    <sect2 xml:id="makefile-lib_depends">
      <title xml:lang="en"><varname>LIB_DEPENDS</varname></title>

      <para xml:lang="en">This variable specifies the shared libraries this port
	depends on.  It is a list of
	<replaceable>lib</replaceable>:<replaceable>dir</replaceable>
	tuples where <replaceable>lib</replaceable> is the name of
	the shared library, <replaceable>dir</replaceable> is the
	directory in which to find it in case it is not available.
	For example,</para>

      <programlisting xml:lang="en">LIB_DEPENDS=   libjpeg.so:${PORTSDIR}/graphics/jpeg</programlisting>

      <para xml:lang="en">will check for a shared jpeg library with any version, and
	descend into the <filename>graphics/jpeg</filename>
	subdirectory of the ports tree to build and install it if it
	is not found.</para>

      <para xml:lang="en">The dependency is checked twice, once from within the
	<buildtarget xml:lang="en">build</buildtarget> target and then from within
	the <buildtarget xml:lang="en">install</buildtarget> target.  Also, the name
	of the dependency is put into the package so that
	<command>pkg install</command> (see <citerefentry><refentrytitle>pkg-install</refentrytitle><manvolnum>8</manvolnum></citerefentry>) will
	automatically install it if it is not on the user's
	system.</para>
    </sect2>

    <sect2 xml:id="makefile-run_depends">
      <title><varname>RUN_DEPENDS</varname></title>

      <para xml:lang="en">This variable specifies executables or files this port
	depends on during run-time.  It is a list of
	<replaceable>path</replaceable>:<replaceable>dir</replaceable><optional>:<replaceable>target</replaceable></optional>
	tuples where <replaceable>path</replaceable> is the name of
	the executable or file, <replaceable>dir</replaceable> is the
	directory in which to find it in case it is not available, and
	<replaceable>target</replaceable> is the target to call in
	that directory.  If <replaceable>path</replaceable> starts
	with a slash (<literal>/</literal>), it is treated as a file
	and its existence is tested with <command>test -e</command>;
	otherwise, it is assumed to be an executable, and
	<command>which -s</command> is used to determine if the
	program exists in the search path.</para>

      <para>例如，</para>

      <programlisting>RUN_DEPENDS=	${LOCALBASE}/news/bin/innd:${PORTSDIR}/news/inn \
		xmlcatmgr:${PORTSDIR}/textproc/xmlcatmgr</programlisting>

      <para xml:lang="en">will check if the file or directory
	<filename>/usr/local/news/bin/innd</filename> exists, and
	build and install it from the <filename>news/inn</filename>
	subdirectory of the ports tree if it is not found.  It will
	also see if an executable called <command>xmlcatmgr</command>
	is in the search path, and descend into
	<filename>textproc/xmlcatmgr</filename>
	to build and install it if it is not found.</para>

      <note>
	<para xml:lang="en">In this case, <command>innd</command> is actually an
	  executable; if an executable is in a place that is not
	  expected to be in the search path, use the full
	  pathname.</para>
      </note>

      <note>
	<para xml:lang="en">The official search <envar>PATH</envar> used on the
	  ports build cluster is</para>

	<programlisting>/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin</programlisting>
      </note>

      <para xml:lang="en">The dependency is checked from within the
	<buildtarget xml:lang="en">install</buildtarget> target.  Also, the name of
	the dependency is put into the package so that
	<command>pkg install</command> (see <citerefentry><refentrytitle>pkg-install</refentrytitle><manvolnum>8</manvolnum></citerefentry>) will
	automatically install it if it is not on the user's system.
	The <replaceable>target</replaceable> part can be omitted if
	it is the same as <varname>DEPENDS_TARGET</varname>.</para>

      <para xml:lang="en">A quite common situation is when
	<varname>RUN_DEPENDS</varname> is literally the same as
	<varname>BUILD_DEPENDS</varname>, especially if ported
	software is written in a scripted language or if it requires
	the same build and run-time environment.  In this case, it is
	both tempting and intuitive to directly assign one to the
	other:</para>

      <programlisting>RUN_DEPENDS=	${BUILD_DEPENDS}</programlisting>

      <para xml:lang="en">However, such assignment can pollute run-time
	dependencies with entries not defined in the port's original
	<varname>BUILD_DEPENDS</varname>.  This happens because of
	<citerefentry><refentrytitle>make</refentrytitle><manvolnum>1</manvolnum></citerefentry>'s lazy evaluation of variable assignment.
	Consider a <filename>Makefile</filename> with
	<varname>USE_<replaceable>*</replaceable></varname>,
	which are processed by <filename>ports/Mk/bsd.*.mk</filename>
	to augment initial build dependencies.  For example,
	<literal>USES= gmake</literal> adds
	<package role="port">devel/gmake</package> to
	<varname>BUILD_DEPENDS</varname>.  To prevent such additional
	dependencies from polluting <varname>RUN_DEPENDS</varname>,
	create another variable with the current content of
	<varname>BUILD_DEPENDS</varname> and assign it to both
	<varname>BUILD_DEPENDS</varname> and
	<varname>RUN_DEPENDS</varname>:</para>

      <programlisting>MY_DEPENDS=	some:${PORTSDIR}/devel/some \
		other:${PORTSDIR}/lang/other
BUILD_DEPENDS=	${MY_DEPENDS}
RUN_DEPENDS=	${MY_DEPENDS}</programlisting>

      <important>
	<para xml:lang="en"><emphasis>Do not</emphasis> use <literal>:=</literal>
	  to assign <varname>BUILD_DEPENDS</varname> to
	  <varname>RUN_DEPENDS</varname> or vice-versa.  All
	  variables are expanded immediately, which is exactly the
	  wrong thing to do and almost always a failure.</para>
      </important>
    </sect2>

    <sect2 xml:id="makefile-build_depends">
      <title><varname>BUILD_DEPENDS</varname></title>

      <para xml:lang="en">This variable specifies executables or files this port
	requires to build.  Like <varname>RUN_DEPENDS</varname>, it
	is a list of
	<replaceable>path</replaceable>:<replaceable>dir</replaceable><optional>:<replaceable>target</replaceable></optional>
	tuples.  For example,</para>

      <programlisting>BUILD_DEPENDS=	unzip:${PORTSDIR}/archivers/unzip</programlisting>

      <para xml:lang="en">will check for an executable called
	<command>unzip</command>, and descend into the
	<filename>archivers/unzip</filename> subdirectory of the
	ports tree to build and install it if it is not found.</para>

      <note>
	<para xml:lang="en"><quote>build</quote> here means everything from
	  extraction to compilation.  The dependency is checked from
	  within the <buildtarget xml:lang="en">extract</buildtarget> target.  The
	  <replaceable>target</replaceable> part can be omitted if it
	  is the same as <varname>DEPENDS_TARGET</varname></para>
      </note>
    </sect2>

    <sect2 xml:id="makefile-fetch_depends">
      <title><varname>FETCH_DEPENDS</varname></title>

      <para xml:lang="en">This variable specifies executables or files this port
	requires to fetch.  Like the previous two, it is a list of
	<replaceable>path</replaceable>:<replaceable>dir</replaceable><optional>:<replaceable>target</replaceable></optional>
	tuples.  For example,</para>

      <programlisting>FETCH_DEPENDS=	ncftp2:${PORTSDIR}/net/ncftp2</programlisting>

      <para xml:lang="en">will check for an executable called
	<command>ncftp2</command>, and descend into the
	<filename>net/ncftp2</filename> subdirectory of the ports
	tree to build and install it if it is not found.</para>

      <para xml:lang="en">The dependency is checked from within the
	<buildtarget xml:lang="en">fetch</buildtarget> target.  The
	<replaceable>target</replaceable> part can be omitted if it is
	the same as <varname>DEPENDS_TARGET</varname>.</para>
    </sect2>

    <sect2 xml:id="makefile-extract_depends">
      <title><varname>EXTRACT_DEPENDS</varname></title>

      <para xml:lang="en">This variable specifies executables or files this port
	requires for extraction.  Like the previous, it is a list of
	<replaceable>path</replaceable>:<replaceable>dir</replaceable><optional>:<replaceable>target</replaceable></optional>
	tuples.  For example,</para>

      <programlisting xml:lang="en">EXTRACT_DEPENDS=	unzip:${PORTSDIR}/archivers/unzip</programlisting>

      <para xml:lang="en">will check for an executable called
	<command>unzip</command>, and descend into the
	<filename>archivers/unzip</filename> subdirectory of the
	ports tree to build and install it if it is not found.</para>

      <para xml:lang="en">The dependency is checked from within the
	<buildtarget xml:lang="en">extract</buildtarget> target.  The
	<replaceable>target</replaceable> part can be omitted if it
	is the same as <varname>DEPENDS_TARGET</varname>.</para>

      <note>
	<para xml:lang="en">Use this variable only if the extraction does not
	  already work (the default assumes <command>tar</command>)
	  and cannot be made to work using
	  <literal>USES=tar</literal>, <literal>USES=lha</literal> or
	  <literal>USES=zip</literal> described in <xref linkend="uses-values"/>.</para>
      </note>
    </sect2>

    <sect2 xml:id="makefile-patch_depends">
      <title><varname>PATCH_DEPENDS</varname></title>

      <para xml:lang="en">This variable specifies executables or files this port
	requires to patch.  Like the previous, it is a list of
	<replaceable>path</replaceable>:<replaceable>dir</replaceable><optional>:<replaceable>target</replaceable></optional>
	tuples.  For example,</para>

      <programlisting>PATCH_DEPENDS=	${NONEXISTENT}:${PORTSDIR}/java/jfc:extract</programlisting>

      <para xml:lang="en">will descend into the <filename>java/jfc</filename>
	subdirectory of the ports tree to extract it.</para>

      <para xml:lang="en">The dependency is checked from within the
	<buildtarget xml:lang="en">patch</buildtarget> target.  The
	<replaceable>target</replaceable> part can be omitted if it
	is the same as <varname>DEPENDS_TARGET</varname>.</para>
    </sect2>

    <sect2 xml:id="makefile-uses">
      <title><varname>USES</varname></title>

      <para xml:lang="en">Parameters can be added to define different features and
	dependencies used by the port.  They are specified by adding
	this line to the <filename>Makefile</filename>:</para>

      <programlisting>USES= feature[:arguments]</programlisting>

      <para xml:lang="en">For the complete list of values, please see
	<xref linkend="uses-values"/>.</para>

      <warning>
	<para xml:lang="en"><varname>USES</varname> cannot be assigned after
	  inclusion of <filename>bsd.port.pre.mk</filename>.</para>
      </warning>
    </sect2>

    <sect2 xml:id="makefile-use-vars">
      <title><varname>USE_<replaceable>*</replaceable></varname></title>

      <para xml:lang="en">Several variables exist to define common dependencies
	shared by many ports.  Their use is optional, but helps to
	reduce the verbosity of the port
	<filename>Makefile</filename>s.  Each of them is styled as
	<varname>USE_<replaceable>*</replaceable></varname>.  These
	variables may be used only in the port
	<filename>Makefile</filename>s and
	<filename>ports/Mk/bsd.*.mk</filename>.  They are not meant
	for user-settable options — use
	<varname>PORT_OPTIONS</varname> for that purpose.</para>

      <note>
	<para xml:lang="en">It is <emphasis>always</emphasis> incorrect to set any
	  <varname>USE_<replaceable>*</replaceable></varname> in
	  <filename>/etc/make.conf</filename>.  For instance,
	  setting</para>

	<programlisting>USE_GCC=X.Y</programlisting>

	<para xml:lang="en">(where X.Y is version number) would add a dependency
	  on gccXY for every port, including
	  <literal>lang/gccXY</literal> itself!</para>
      </note>

      <table frame="none" xml:id="makefile-use-vars-table">
	<title><varname>USE_<replaceable>*</replaceable></varname></title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry xml:lang="en">Variable</entry>
	      <entry xml:lang="en">Means</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>USE_GCC</varname></entry>
	      <entry xml:lang="en">The port requires GCC (<command>gcc</command> or
		<command>g++</command>) to build.  Some ports need any
		GCC version, some require modern, recent versions.  It
		is typically set to <literal>any</literal> (in this
		case, GCC from base would be used on versions of FreeBSD
		that still have it, or <literal>lang/gcc</literal>
		port would be installed when default C/C++ compiler is
		Clang); or <literal>yes</literal> (means always use
		stable, modern GCC from <literal>lang/gcc</literal>
		port).  The exact version can also be specified, with
		a value such as <literal>4.7</literal>.  The minimal
		required version can be specified as
		<literal>4.6+</literal>.  The GCC from the base system
		is used when it satisfies the requested version,
		otherwise an appropriate compiler is built from the
		port, and <varname>CC</varname> and
		<varname>CXX</varname> are adjusted
		accordingly.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para xml:lang="en">Variables related to <application>gmake</application> and
	<filename>configure</filename> are described in
	<xref linkend="building"/>, while
	<application>autoconf</application>,
	<application>automake</application> and
	<application>libtool</application> are described in
	<xref linkend="using-autotools"/>.
	<application>Perl</application> related variables are
	described in <xref linkend="using-perl"/>.  X11 variables are
	listed in <xref linkend="using-x11"/>.
	<xref linkend="using-gnome"/> deals with GNOME and
	<xref linkend="using-kde"/> with KDE related variables.
	<xref linkend="using-java"/> documents Java variables, while
	<xref linkend="using-php"/> contains information on
	<application>Apache</application>,
	<application>PHP</application> and PEAR modules.
	<application>Python</application> is discussed in
	<xref linkend="using-python"/>, while
	<application>Ruby</application> in
	<xref linkend="using-ruby"/>.  <xref linkend="using-sdl"/>
	provides variables used for <application>SDL</application>
	applications and finally, <xref linkend="using-xfce"/>
	contains information on
	<application>Xfce</application>.</para>
    </sect2>

    <sect2 xml:id="makefile-version-dependency">
      <title xml:lang="en">Minimal Version of a Dependency</title>

      <para xml:lang="en">A minimal version of a dependency can be specified in any
	<varname><replaceable>*</replaceable>_DEPENDS</varname>
	except <varname>LIB_DEPENDS</varname> using this
	syntax:</para>

      <programlisting xml:lang="en">p5-Spiffy&gt;=0.26:${PORTSDIR}/devel/p5-Spiffy</programlisting>

      <para xml:lang="en">The first field contains a dependent package name, which
	must match the entry in the package database, a comparison
	sign, and a package version.  The dependency is satisfied if
	p5-Spiffy-0.26 or newer is installed on the machine.</para>
    </sect2>

    <sect2 xml:id="makefile-note-on-dependencies">
      <title xml:lang="en">Notes on Dependencies</title>

      <para xml:lang="en">As mentioned above, the default target to call when a
	dependency is required is
	<buildtarget xml:lang="en">DEPENDS_TARGET</buildtarget>.  It defaults to
	<literal>install</literal>.  This is a user variable; it is
	never defined in a port's <filename>Makefile</filename>.  If
	the port needs a special way to handle a dependency, use the
	<literal>:target</literal> part of
	<varname><replaceable>*</replaceable>_DEPENDS</varname>
	instead of redefining
	<varname>DEPENDS_TARGET</varname>.</para>

      <para xml:lang="en">When running <command>make clean</command>, the port
	dependencies are automatically cleaned too.  If this is not
	desirable, define
	<varname>NOCLEANDEPENDS</varname> in the environment.  This
	may be particularly desirable if the port has something that
	takes a long time to rebuild in its dependency list, such as
	KDE, GNOME or Mozilla.</para>

      <para xml:lang="en">To depend on another port unconditionally, use the
	variable <literal>${NONEXISTENT}</literal> as the first field
	of <varname>BUILD_DEPENDS</varname> or
	<varname>RUN_DEPENDS</varname>.  Use this only when
	the source of the other port is needed.  Compilation time can
	be saved by specifying the target too.  For
	instance</para>

      <programlisting xml:lang="en">BUILD_DEPENDS=	${NONEXISTENT}:${PORTSDIR}/graphics/jpeg:extract</programlisting>

      <para xml:lang="en">will always descend to the <literal>jpeg</literal> port
	and extract it.</para>
    </sect2>

    <sect2 xml:id="makefile-circular-dependencies">
      <title xml:lang="en">Circular Dependencies Are Fatal</title>

      <important>
	<para xml:lang="en">Do not introduce any circular dependencies into the
	  ports tree!</para>
      </important>

      <para xml:lang="en">The ports building technology does not tolerate circular
	dependencies.  If one is introduced, someone, somewhere in the
	world, will have their FreeBSD installation broken
	almost immediately, with many others quickly to follow.  These
	can really be hard to detect.  If in doubt, before making
	that change, make sure to run:
	<command>cd /usr/ports; make index</command>.  That process
	can be quite slow on older machines, but it may be able to
	save a large number of people, including yourself,
	a lot of grief in the process.</para>
    </sect2>

    <sect2 xml:id="makefile-automatic-dependencies">
      <title xml:lang="en">Problems Caused by Automatic Dependencies</title>

      <para xml:lang="en">Dependencies must be declared either explicitly or by
	using the
	<link linkend="makefile-options">OPTIONS framework</link>.
	Using other methods like automatic detection complicates
	indexing, which causes problems for port and package
	management.</para>

      <example xml:id="makefile-automatic-dependencies-bad">
	<title xml:lang="en">Wrong Declaration of an Optional Dependency</title>

	<programlisting xml:lang="en">.include &lt;bsd.port.pre.mk&gt;

.if exists(${LOCALBASE}/bin/foo)
LIB_DEPENDS=	libbar.so:${PORTSDIR}/foo/bar
.endif</programlisting>
      </example>

      <para xml:lang="en">The problem with trying to automatically add dependencies
	is that files and settings outside an individual port can
	change at any time.  For example: an index is built, then a
	batch of ports are installed.  But one of the ports installs
	the tested file.  The index is now incorrect, because an
	installed port unexpectedly has a new dependency.  The index
	may still be wrong even after rebuilding if other ports also
	determine their need for dependencies based on the existence
	of other files.</para>

      <example xml:id="makefile-automatic-dependencies-good">
	<title xml:lang="en">Correct Declaration of an Optional Dependency</title>

	<programlisting xml:lang="en">OPTIONS_DEFINE=	BAR
BAR_DESC=	Calling cellphones via bar

BAR_LIB_DEPENDS=	libbar.so:${PORTSDIR}/foo/bar</programlisting>
      </example>

      <para xml:lang="en">Testing option variables is the correct method.  It will
	not cause inconsistencies in the index of a batch of ports,
	provided the options were defined prior to the index build.
	Simple scripts can then be used to automate the building,
	installation, and updating of these ports and their
	packages.</para>
    </sect2>

    <sect2 xml:id="use-want">
      <title xml:lang="en"><varname>USE_<replaceable>*</replaceable></varname> and
	<varname>WANT_<replaceable>*</replaceable></varname></title>

      <para xml:lang="en"><varname>USE_<replaceable>*</replaceable></varname> are
	set by the port maintainer to define software on which this
	port depends.  A port that needs Firefox would set</para>

      <programlisting>USE_FIREFOX=	yes</programlisting>

      <para xml:lang="en">Some <varname>USE_<replaceable>*</replaceable></varname>
	can accept version numbers or other parameters.  For example,
	a port that requires Apache 2.2 would set</para>

      <programlisting>USE_APACHE=	22</programlisting>

      <para xml:lang="en">For more control over dependencies in some cases,
	<varname>WANT_<replaceable>*</replaceable></varname> are
	available to more precisely specify what is needed.  For
	example, consider the <package role="port">mail/squirrelmail</package> port.  This
	port needs some PHP modules, which are listed in
	<varname>USE_PHP</varname>:</para>

      <programlisting xml:lang="en">USE_PHP=	session mhash gettext mbstring pcre openssl xml</programlisting>

      <para xml:lang="en">Those modules may be available in CLI or web versions, so
	the web version is selected with
	<varname>WANT_<replaceable>*</replaceable></varname>:</para>

      <programlisting>WANT_PHP_WEB=	yes</programlisting>

      <para xml:lang="en">Available
	<varname>USE_<replaceable>*</replaceable></varname> and
	<varname>WANT_<replaceable>*</replaceable></varname> are
	defined in the files in
	<filename>/usr/ports/Mk</filename>.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="makefile-masterdir">
    <title><varname>MASTERDIR</varname></title>

    <para xml:lang="en">If the port needs to build slightly different versions of
      packages by having a variable (for instance, resolution, or
      paper size) take different values, create one subdirectory per
      package to make it easier for users to see what to do, but try
      to share as many files as possible between ports.  Typically, by
      using variables cleverly, only a very short
      <filename>Makefile</filename> is needed in all but one of the
      directories.  In the sole <filename>Makefile</filename>, use
      <varname>MASTERDIR</varname> to specify the directory where the
      rest of the files are.  Also, use a variable as part of <link linkend="porting-pkgname"><varname>PKGNAMESUFFIX</varname></link>
      so the packages will have different names.</para>

    <para xml:lang="en">This will be best demonstrated by an example.  This is part
      of <filename>japanese/xdvi300/Makefile</filename>;</para>

    <programlisting>PORTNAME=	xdvi
PORTVERSION=	17
PKGNAMEPREFIX=	ja-
PKGNAMESUFFIX=	${RESOLUTION}

# default
RESOLUTION?=	300
.if ${RESOLUTION} != 118 &amp;&amp; ${RESOLUTION} != 240 &amp;&amp; \
    ${RESOLUTION} != 300 &amp;&amp; ${RESOLUTION} != 400
pre-everything::
	@${ECHO_MSG} "Error: invalid value for RESOLUTION: \"${RESOLUTION}\""
	@${ECHO_MSG} "Possible values are: 118, 240, 300 (default) and 400."
	@${FALSE}
.endif</programlisting>

    <para xml:lang="en"><package role="port">japanese/xdvi300</package> also has all
      the regular patches, package files, etc.  Running
      <command>make</command> there, it will take the default value
      for the resolution (300) and build the port normally.</para>

    <para xml:lang="en">As for other resolutions, this is the
      <emphasis>entire</emphasis>
      <filename>xdvi118/Makefile</filename>:</para>

    <programlisting>RESOLUTION=	118
MASTERDIR=	${.CURDIR}/../xdvi300

.include "${MASTERDIR}/Makefile"</programlisting>

    <para xml:lang="en">(<filename>xdvi240/Makefile</filename> and
      <filename>xdvi400/Makefile</filename> are similar).
      <varname>MASTERDIR</varname> definition tells
      <filename>bsd.port.mk</filename> that the regular set of
      subdirectories like <varname>FILESDIR</varname> and
      <varname>SCRIPTDIR</varname> are to be found under
      <filename>xdvi300</filename>.  The
      <literal>RESOLUTION=118</literal> line will override the
      <literal>RESOLUTION=300</literal> line in
      <filename>xdvi300/Makefile</filename> and the port will be built
      with resolution set to 118.</para>
  </sect1>

  <sect1 xml:id="makefile-manpages">
    <title xml:lang="en">Man Pages</title>

    <para xml:lang="en">If the port anchors its man tree somewhere other than
      <varname>PREFIX</varname>, use
      <varname>MANDIRS</varname> to specify those directories.  Note
      that the files corresponding to manual pages must be placed in
      <filename>pkg-plist</filename> along with the rest of the files.
      The purpose of <varname>MANDIRS</varname> is to enable automatic
      compression of manual pages, therefore the file names are
      suffixed with <filename>.gz</filename>.</para>
  </sect1>

  <sect1 xml:id="makefile-info">
    <title xml:lang="en">Info Files</title>

    <para xml:lang="en">If the package needs to install <acronym>GNU</acronym> info
      files, list them in <varname>INFO</varname> (without the
      trailing <literal>.info</literal>), one entry per document.
      These files are assumed to be installed to
      <filename>PREFIX/INFO_PATH</filename>.  Change
      <varname>INFO_PATH</varname> if the package uses a different
      location.  However, this is not recommended.  These entries
      contain just the path relative to
      <filename>PREFIX/INFO_PATH</filename>.  For example,
      <package role="port">lang/gcc34</package> installs info files to
      <filename>PREFIX/INFO_PATH/gcc34</filename>, and
      <varname>INFO</varname> will be something like this:</para>

    <programlisting xml:lang="en">INFO=	gcc34/cpp gcc34/cppinternals gcc34/g77 ...</programlisting>

    <para xml:lang="en">Appropriate installation/de-installation code will be
      automatically added to the temporary
      <filename>pkg-plist</filename> before package
      registration.</para>
  </sect1>

  <sect1 xml:id="makefile-options">
    <title xml:lang="en">Makefile Options</title>

    <para xml:lang="en">Many applications can be built with optional or differing
      configurations.  Examples include choice of natural (human)
      language, GUI versus command-line, or type of database to
      support.  Users may need a different configuration than the
      default, so the ports system provides hooks the port author can
      use to control which variant will be built.  Supporting these
      options properly will make users happy, and effectively provide
      two or more ports for the price of one.</para>

    <sect2 xml:id="makefile-options-options">
      <title><varname>OPTIONS</varname></title>

      <sect3 xml:id="makefile-options-background">
	<title xml:lang="en">Background</title>

	<para xml:lang="en"><varname>OPTIONS_<replaceable>*</replaceable></varname>
	  give the user installing the port a dialog showing the
	  available options, and then saves those options to
	  <filename>${PORT_DBDIR}/${OPTIONS_NAME}/options</filename>.
	  The next time the port is built, the options are
	  reused.  <varname>PORT_DBDIR</varname> defaults to
	  <filename>/var/db/ports</filename>.
	  <varname>OPTIONS_NAME</varname> is to the port origin with
	  an underscore as the space separator, for example, for
	  <package role="port">dns/bind99</package> it will be
	  <literal>dns_bind99</literal>.</para>

	<para xml:lang="en">When the user runs <command>make config</command> (or
	  runs <command>make build</command> for the first time), the
	  framework checks for
	  <filename>${PORT_DBDIR}/${OPTIONS_NAME}/options</filename>.
	  If that file does not exist, the values of
	  <varname>OPTIONS_<replaceable>*</replaceable></varname>
	  are used, and a dialog box is
	  displayed where the options can be enabled or disabled.
	  Then <filename>options</filename> is saved and the
	  configured variables are used when building the port.</para>

	<para xml:lang="en">If a new version of the port adds new
	  <varname>OPTIONS</varname>, the dialog will be presented to
	  the user with the saved values of old
	  <varname>OPTIONS</varname> prefilled.</para>

	<para xml:lang="en"><command>make showconfig</command> shows the saved
	  configuration.  Use <command>make rmconfig</command>
	  to remove the saved configuration.</para>
      </sect3>

      <sect3 xml:id="makefile-options-syntax">
	<title xml:lang="en">Syntax</title>

	<para xml:lang="en"><varname>OPTIONS_DEFINE</varname> contains a list of
	  <varname>OPTIONS</varname> to be used.  These are
	  independent of each other and are not grouped:</para>

	<programlisting xml:lang="en">OPTIONS_DEFINE=	OPT1 OPT2</programlisting>

	<para xml:lang="en">Once defined, <varname>OPTIONS</varname> are
	  described (optional, but strongly recommended):</para>

	<programlisting xml:lang="en">OPT1_DESC=	Describe OPT1
OPT2_DESC=	Describe OPT2
OPT3_DESC=	Describe OPT3
OPT4_DESC=	Describe OPT4
OPT5_DESC=	Describe OPT5
OPT6_DESC=	Describe OPT6</programlisting>

	<para xml:lang="en"><filename>ports/Mk/bsd.options.desc.mk</filename>
	  has descriptions for many common <varname>OPTIONS</varname>.
	  While often useful, override them if the
	  description is insufficient for the port.</para>

	<tip>
	  <para xml:lang="en">When describing options, view it from the
	    perspective of the user: <quote>What functionality does it
	      change?</quote>
	    and <quote>Why would I want to enable this?</quote>
	    Do not just repeat the name.  For example, describing the
	    <literal>NLS</literal> option as
	    <quote>include NLS support</quote> does not help the user,
	    who can already see the option name but may not know what
	    it means.  Describing it as <quote>Native Language Support
	      via gettext utilities</quote> is much more
	    helpful.</para>
	</tip>

	<important>
	  <para xml:lang="en">Option names are always in all uppercase.  They
	    cannot use mixed case or lowercase.</para>
	</important>

	<para xml:lang="en"><varname>OPTIONS</varname> can be grouped as radio
	  choices, where only one choice from each group is
	  allowed:</para>

	<programlisting xml:lang="en">OPTIONS_SINGLE=		SG1
OPTIONS_SINGLE_SG1=	OPT3 OPT4</programlisting>

	<warning>
	  <para xml:lang="en">There <emphasis>must</emphasis> be one of each
	    <literal>OPTIONS_SINGLE</literal> group selected at all
	    times for the options to be valid.  One option of each
	    group <emphasis>must</emphasis> be added to
	    <varname>OPTIONS_DEFAULT</varname>.</para>
	</warning>

	<para xml:lang="en"><varname>OPTIONS</varname> can be grouped as radio
	  choices, where none or only one choice from each group
	  is allowed:</para>

	<programlisting xml:lang="en">OPTIONS_RADIO=		RG1
OPTIONS_RADIO_RG1=	OPT7 OPT8</programlisting>

	<para xml:lang="en"><varname>OPTIONS</varname> can also be grouped as
	  <quote>multiple-choice</quote> lists, where
	  <emphasis>at least one</emphasis> option must be
	  enabled:</para>

	<programlisting xml:lang="en">OPTIONS_MULTI=		MG1
OPTIONS_MULTI_MG1=	OPT5 OPT6</programlisting>

	<para xml:lang="en"><varname>OPTIONS</varname> can also be grouped as
	  <quote>multiple-choice</quote> lists, where none or any
	  option can be enabled:</para>

	<programlisting xml:lang="en">OPTIONS_GROUP=		GG1
OPTIONS_GROUP_GG1=	OPT9 OPT10</programlisting>

	<para xml:lang="en"><varname>OPTIONS</varname> are unset by default,
	  unless they are listed in
	  <varname>OPTIONS_DEFAULT</varname>:</para>

	<programlisting xml:lang="en">OPTIONS_DEFAULT=	OPT1 OPT3 OPT6</programlisting>

	<para xml:lang="en"><varname>OPTIONS</varname> definitions must appear
	  before the inclusion of
	  <filename>bsd.port.options.mk</filename>.
	  <varname>PORT_OPTIONS</varname> values can only be tested
	  after the inclusion of
	  <filename>bsd.port.options.mk</filename>.  Inclusion of
	  <filename>bsd.port.pre.mk</filename> can be used instead,
	  too, and is still widely used in ports written before the
	  introduction of <filename>bsd.port.options.mk</filename>.
	  But be aware that some variables will not work as expected
	  after the inclusion of <filename>bsd.port.pre.mk</filename>,
	  typically some
	  <varname>USE_<replaceable>*</replaceable></varname>
	  flags.</para>

	<example xml:id="ports-options-simple-use">
	  <title xml:lang="en">Simple Use of <varname>OPTIONS</varname></title>

	  <programlisting xml:lang="en">OPTIONS_DEFINE=	FOO BAR
FOO_DESC=	Option foo support
BAR_DESC=	Feature bar support

OPTIONS_DEFAULT=FOO

# Will add --with-foo / --without-foo
FOO_CONFIGURE_WITH=	foo
BAR_RUN_DEPENDS=	bar:${PORTSDIR}/bar/bar

.include &lt;bsd.port.mk&gt;</programlisting>
	</example>

	<example xml:id="ports-options-check-unset">
	  <title xml:lang="en">Check for Unset Port
	    <varname>OPTIONS</varname></title>

	  <programlisting xml:lang="en">.if ! ${PORT_OPTIONS:MEXAMPLES}
CONFIGURE_ARGS+=--without-examples
.endif</programlisting>

	  <para xml:lang="en">The form shown above is discouraged.  The preferred
	    method is using a configure knob to really enable and
	    disable the feature to match the option:</para>

	  <programlisting xml:lang="en"># Will add --with-examples / --without-examples
EXAMPLES_CONFIGURE_WITH=	examples</programlisting>
	</example>

	<example xml:id="ports-options-practical-use">
	  <title xml:lang="en">Practical Use of <varname>OPTIONS</varname></title>

	  <programlisting>OPTIONS_DEFINE=		EXAMPLES

OPTIONS_SINGLE=		BACKEND
OPTIONS_SINGLE_BACKEND=	MYSQL PGSQL BDB

OPTIONS_MULTI=		AUTH
OPTIONS_MULTI_AUTH=	LDAP PAM SSL

EXAMPLES_DESC=		Install extra examples
MYSQL_DESC=		Use MySQL as backend
PGSQL_DESC=		Use PostgreSQL as backend
BDB_DESC=		Use Berkeley DB as backend
LDAP_DESC=		Build with LDAP authentication support
PAM_DESC=		Build with PAM support
SSL_DESC=		Build with OpenSSL support

OPTIONS_DEFAULT=	PGSQL LDAP SSL

# Will add USE_PGSQL=yes
PGSQL_USE=	pgsql=yes
# Will add --enable-postgres / --disable-postgres
PGSQL_CONFIGURE_ENABLE=	postgres

ICU_LIB_DEPENDS=	libicuuc.so:${PORTSDIR}/devel/icu

# Will add --with-examples / --without-examples
EXAMPLES_CONFIGURE_WITH=	examples

# Check other OPTIONS

.include &lt;bsd.port.mk&gt;</programlisting>
	</example>
      </sect3>

      <sect3 xml:id="makefile-options-default">
	<title xml:lang="en">Default Options</title>

	<para xml:lang="en">These options are always on by default.</para>

	<itemizedlist>
	  <listitem>
	    <para xml:lang="en"><literal>DOCS</literal> — build and install
	      documentation.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><literal>NLS</literal> — Native Language
	      Support.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><literal>EXAMPLES</literal> — build and
	      install examples.</para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><literal>IPV6</literal> — IPv6 protocol
	      support.</para>
	  </listitem>
	</itemizedlist>

	<note>
	  <para xml:lang="en">There is no need to add these to
	    <varname>OPTIONS_DEFAULT</varname>.  To have them active,
	    and show up in the options selection dialog, however, they
	    must be added to <varname>OPTIONS_DEFINE</varname>.</para>
	</note>
      </sect3>
    </sect2>

    <sect2 xml:id="makefile-options-auto-activation">
      <title xml:lang="en">Feature Auto-Activation</title>

      <para xml:lang="en">When using a GNU configure script, keep an eye on which
	optional features are activated by auto-detection.  Explicitly
	disable optional features that are not needed by
	adding <literal>--without-xxx</literal> or
	<literal>--disable-xxx</literal> in
	<varname>CONFIGURE_ARGS</varname>.</para>

      <example xml:id="makefile-options-auto-activation-bad">
	<title xml:lang="en">Wrong Handling of an Option</title>

	<programlisting xml:lang="en">.if ${PORT_OPTIONS:MFOO}
LIB_DEPENDS+=		libfoo.so:${PORTSDIR}/devel/foo
CONFIGURE_ARGS+=	--enable-foo
.endif</programlisting>
      </example>

      <para xml:lang="en">In the example above, imagine a library libfoo is
	installed on the system.  The user does not want this
	application to use libfoo, so he toggled the option off in the
	<literal>make config</literal> dialog.  But the application's
	configure script detects the library present in the system and
	includes its support in the resulting executable.  Now when
	the user decides to remove libfoo from the system, the ports
	system does not protest (no dependency on libfoo was recorded)
	but the application breaks.</para>

      <example xml:id="makefile-options-auto-activation-good">
	<title xml:lang="en">Correct Handling of an Option</title>

	<programlisting xml:lang="en">FOO_LIB_DEPENDS=		libfoo.so:${PORTSDIR}/devel/foo
# Will add --enable-foo / --disable-foo
FOO_CONFIGURE_ENABLE=	foo</programlisting>
      </example>

      <note>
	<para xml:lang="en">Under some circumstances, the shorthand conditional
	  syntax can cause problems with complex constructs.  The
	  errors are usually
	  <literal>Malformed conditional</literal>, an alternative
	  syntax can be used.</para>

	<programlisting xml:lang="en">.if !empty(VARIABLE:MVALUE)</programlisting>

	<para xml:lang="en">as an alternative to</para>

	<programlisting xml:lang="en">.if ${VARIABLE:MVALUE}</programlisting>
      </note>
    </sect2>

    <sect2 xml:id="options-helpers">
      <title xml:lang="en">Options Helpers</title>

      <para xml:lang="en">There are some macros to help simplify conditional values
	which differ based on the options set.</para>

      <sect3 xml:id="options_sub">
	<title><varname>OPTIONS_SUB</varname></title>

	<para xml:lang="en">If <varname>OPTIONS_SUB</varname> is set to
	  <literal>yes</literal> then each of the options added to
	  <varname>OPTIONS_DEFINE</varname> will be added to
	  <varname>PLIST_SUB</varname> and
	  <varname>SUB_LIST</varname>, for example:</para>

	<programlisting xml:lang="en">OPTIONS_DEFINE=	OPT1
OPTIONS_SUB=	yes</programlisting>

	<para xml:lang="en">is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
PLIST_SUB+=	OPT1="" NO_OPT1="@comment "
SUB_LIST+=	OPT1="" NO_OPT1="@comment "
.else
PLIST_SUB+=	OPT1="@comment " NO_OPT1=""
SUB_LIST+=	OPT1="@comment " NO_OPT1=""
.endif</programlisting>

	<note>
	  <para xml:lang="en">The value of <varname>OPTIONS_SUB</varname> is
	    ignored.  Setting it to any value will add
	    <varname>PLIST_SUB</varname> and
	    <varname>SUB_LIST</varname> entries for
	    <emphasis>all</emphasis> options.</para>
	</note>
      </sect3>

      <sect3 xml:id="options-use">
	<title><varname><replaceable>OPT</replaceable>_USE</varname> and <varname><replaceable>OPT</replaceable>_USE_OFF</varname></title>

	<para xml:lang="en">When option <replaceable>OPT</replaceable> is selected,
	  for each
	  <literal><replaceable>key</replaceable>=<replaceable>value</replaceable></literal>
	  pair in
	  <varname><replaceable>OPT</replaceable>_USE</varname>,
	  <replaceable>value</replaceable> is appended to the
	  corresponding
	  <varname>USE_<replaceable>KEY</replaceable></varname>.  If
	  <replaceable>value</replaceable> has spaces in it, replace
	  them with commas and they will be changed back to spaces
	  during processing.
	  <varname><replaceable>OPT</replaceable>_USE_OFF</varname>
	  works the same way, but when <literal>OPT</literal> is
	  <emphasis>not</emphasis> selected.   For example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1
OPT1_USE=	mysql=yes xorg=x11,xextproto,xext,xrandr
OPT1_USE_OFF=	openssl=yes</programlisting>

	<para xml:lang="en">is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
USE_MYSQL=	yes
USE_XORG=	x11 xextproto xext xrandr
.else
USE_OPENSSL=	yes
.endif</programlisting>
      </sect3>

      <sect3 xml:id="options-configure_enable">
	<title xml:lang="en"><varname><replaceable>OPT</replaceable>_CONFIGURE_ENABLE</varname></title>

	<para xml:lang="en">When option <replaceable>OPT</replaceable> is selected,
	  for each <replaceable>entry</replaceable> in
	  <varname><replaceable>OPT</replaceable>_CONFIGURE_ENABLE</varname>
	  then
	  <literal>--enable-<replaceable>entry</replaceable></literal>
	  is appended to <varname>CONFIGURE_ARGS</varname>.  When
	  option <replaceable>OPT</replaceable> is
	  <emphasis>not</emphasis> selected,
	  <literal>--disable-<replaceable>entry</replaceable></literal>
	  is appended to <varname>CONFIGURE_ARGS</varname>.  An
	  optional argument can be specified with an
	  <literal>=</literal> symbol.  This argument is only appended
	  to the
	  <literal>--enable-<replaceable>entry</replaceable></literal>
	  configure option.  For example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1 OPT2
OPT1_CONFIGURE_ENABLE=	test1 test2
OPT2_CONFIGURE_ENABLE=	test2=exhaustive</programlisting>

	<para xml:lang="en">is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
CONFIGURE_ARGS+=	--enable-test1 --enable-test2
.else
CONFIGURE_ARGS+=	--disable-test1 --disable-test2
.endif

.if ${PORT_OPTIONS:MOPT2}
CONFIGURE_ARGS+=	--enable-test2=exhaustive
.else
CONFIGURE_ARGS+=	--disable-test2
.endif</programlisting>
      </sect3>

      <sect3 xml:id="options-configure_with">
	<title xml:lang="en"><varname><replaceable>OPT</replaceable>_CONFIGURE_WITH</varname></title>

	<para xml:lang="en">When option <replaceable>OPT</replaceable> is selected,
	  for each <replaceable>entry</replaceable> in
	  <varname><replaceable>OPT</replaceable>_CONFIGURE_WITH</varname>
	  then
	  <literal>--with-<replaceable>entry</replaceable></literal>
	  is appended to <varname>CONFIGURE_ARGS</varname>.  When
	  option <replaceable>OPT</replaceable> is
	  <emphasis>not</emphasis> selected,
	  <literal>--without-<replaceable>entry</replaceable></literal>
	  is appended to <varname>CONFIGURE_ARGS</varname>.  An
	  optional argument can be specified with an
	  <literal>=</literal> symbol.  This argument is only appended
	  to the
	  <literal>--with-<replaceable>entry</replaceable></literal>
	  configure option.  For example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1 OPT2
OPT1_CONFIGURE_WITH=	test1
OPT2_CONFIGURE_WITH=	test2=exhaustive</programlisting>

	<para xml:lang="en">is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1 OPT2

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
CONFIGURE_ARGS+=	--with-test1
.else
CONFIGURE_ARGS+=	--without-test1
.endif

.if ${PORT_OPTIONS:MOPT2}
CONFIGURE_ARGS+=	--with-test2=exhaustive
.else
CONFIGURE_ARGS+=	--without-test2
.endif</programlisting>
      </sect3>

      <sect3 xml:id="options-configure_on">
	<title><varname><replaceable>OPT</replaceable>_CONFIGURE_ON</varname> and <varname><replaceable>OPT</replaceable>_CONFIGURE_OFF</varname></title>

	<para xml:lang="en">When option <replaceable>OPT</replaceable> is selected,
	  the value of
	  <varname><replaceable>OPT</replaceable>_CONFIGURE_ON</varname>,
	  if defined, is appended to
	  <varname>CONFIGURE_ARGS</varname>.
	  <varname><replaceable>OPT</replaceable>_CONFIGURE_OFF</varname>
	  works the same way, but when <literal>OPT</literal> is
	  <emphasis>not</emphasis> selected.  For example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1
OPT1_CONFIGURE_ON=	--add-test
OPT1_CONFIGURE_OFF=	--no-test</programlisting>

	<para xml:lang="en">is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
CONFIGURE_ARGS+=	--add-test
.else
CONFIGURE_ARGS+=	--no-test
.endif</programlisting>
      </sect3>

      <sect3 xml:id="options-cmake_on">
	<title xml:lang="en"><varname><replaceable>OPT</replaceable>_CMAKE_ON</varname>
	  and
	  <varname><replaceable>OPT</replaceable>_CMAKE_OFF</varname></title>

	<para xml:lang="en">When option <replaceable>OPT</replaceable> is selected,
	  the value of
	  <varname><replaceable>OPT</replaceable>_CMAKE_ON</varname>,
	  if defined, is appended to <varname>CMAKE_ARGS</varname>.
	  <varname><replaceable>OPT</replaceable>_CMAKE_OFF</varname>
	  works the same way, but when <literal>OPT</literal> is
	  <emphasis>not</emphasis> selected.  For example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1
OPT1_CMAKE_ON=	-DTEST:BOOL=true
OPT1_CMAKE_OFF=	-DOPTIMIZE:BOOL=true</programlisting>

	<para xml:lang="en">is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
CMAKE_ARGS+=	-DTEST:BOOL=true
.else
CMAKE_ARGS+=	-DOPTIMIZE:BOOL=true
.endif</programlisting>
      </sect3>

      <sect3 xml:id="options-qmake_on">
	<title xml:lang="en"><varname><replaceable>OPT</replaceable>_QMAKE_ON</varname>
	  and
	  <varname><replaceable>OPT</replaceable>_QMAKE_OFF</varname></title>

	<para xml:lang="en">When option <replaceable>OPT</replaceable> is selected,
	  the value of
	  <varname><replaceable>OPT</replaceable>_QMAKE_ON</varname>,
	  if defined, is appended to <varname>QMAKE_ARGS</varname>.
	  <varname><replaceable>OPT</replaceable>_QMAKE_OFF</varname>
	  works the same way, but when <literal>OPT</literal> is
	  <emphasis>not</emphasis> selected.  For example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1
OPT1_QMAKE_ON=	-DTEST:BOOL=true
OPT1_QMAKE_OFF=	-DPRODUCTION:BOOL=true</programlisting>

	<para xml:lang="en">is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
QMAKE_ARGS+=	-DTEST:BOOL=true
.else
QMAKE_ARGS+=	-DPRODUCTION:BOOL=true
.endif</programlisting>
      </sect3>

      <sect3 xml:id="options-implies">
	<title xml:lang="en"><varname><replaceable>OPT</replaceable>_IMPLIES</varname></title>

	<para xml:lang="en">Provides a way to add dependencies between
	  options.</para>

	<para xml:lang="en">When <replaceable>OPT</replaceable> is selected, all the
	  options listed in this variable will be selected too.  Using
	  the <link linkend="options-configure_enable"><varname><replaceable>OPT</replaceable>_CONFIGURE_ENABLE</varname></link>
	  described earlier to illustrate:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1 OPT2
OPT1_IMPLIES=	OPT2

OPT1_CONFIGURE_ENABLE=	opt1
OPT2_CONFIGURE_ENABLE=	opt2</programlisting>

	<para xml:lang="en">Is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1 OPT2

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
CONFIGURE_ARGS+=	--enable-opt1
.else
CONFIGURE_ARGS+=	--disable-opt1
.endif

.if ${PORT_OPTIONS:MOPT2} || ${PORT_OPTIONS:MOPT1}
CONFIGURE_ARGS+=	--enable-opt2
.else
CONFIGURE_ARGS+=	--disable-opt2
.endif</programlisting>

	<example xml:id="options-implies-ex1">
	  <title xml:lang="en">Simple Use of
	    <varname><replaceable>OPT</replaceable>_IMPLIES</varname></title>

	  <para xml:lang="en">This port has a <literal>X11</literal> option, and a
	    <literal>GNOME</literal> option that needs the
	    <literal>X11</literal> option to be selected to
	    build.</para>

	  <programlisting>OPTIONS_DEFINE=	X11 GNOME
OPTIONS_DEFAULT=	X11

X11_USE=	xorg=xi,xextproto
GNOME_USE=	gnome=gtk30
GNOME_IMPLIES=	X11</programlisting>
	</example>
      </sect3>

      <sect3 xml:id="options-prevents">
	<title xml:lang="en"><varname><replaceable>OPT</replaceable>_PREVENTS</varname>
	  and
	  <varname><replaceable>OPT</replaceable>_PREVENTS_MSG</varname></title>

	<para xml:lang="en">Provides a way to add conflicts between options.</para>

	<para xml:lang="en">When <replaceable>OPT</replaceable> is selected, all the
	  options listed in this variable must be un-selected.  If
	  <varname><replaceable>OPT</replaceable>_PREVENTS_MSG</varname>
	  is also selected, its content will be shown, explaining why
	  they conflict.  For example:</para>

	<programlisting xml:lang="en">OPTIONS_DEFINE=	OPT1 OPT2
OPT1_PREVENTS=	OPT2
OPT1_PREVENTS_MSG=	OPT1 and OPT2 enable conflicting options</programlisting>

	<para xml:lang="en">Is roughly equivalent to:</para>

	<programlisting xml:lang="en">OPTIONS_DEFINE=	OPT1 OPT2

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT2} || ${PORT_OPTIONS:MOPT1}
BROKEN=	Option OPT1 conflicts with OPT2 (select only one)
.endif</programlisting>

	<para xml:lang="en">The only difference is that the first one will write an
	  error after running <command>make config</command>,
	  suggesting changing the selected options.</para>

	<example xml:id="options-prevents-ex1">
	  <title xml:lang="en">Simple Use of
	    <varname><replaceable>OPT</replaceable>_PREVENTS</varname></title>

	  <para xml:lang="en">This port has <literal>X509</literal> and
	    <literal>SCTP</literal> options.  Both options add
	    patches, but the patches conflict with each other, so they
	    cannot be selected at the same time.</para>

	  <programlisting>OPTIONS_DEFINE=	X509 SCTP

SCTP_PATCHFILES=	${PORTNAME}-6.8p1-sctp-2573.patch.gz:-p1
SCTP_CONFIGURE_WITH=	sctp

X509_PATCH_SITES=	http://www.roumenpetrov.info/openssh/x509/:x509
X509_PATCHFILES=	${PORTNAME}-7.0p1+x509-8.5.diff.gz:-p1:x509
X509_PREVENTS=		SCTP
X509_PREVENTS_MSG=	X509 and SCTP patches conflict</programlisting>
	</example>
      </sect3>

      <sect3 xml:id="options-vars">
	<title xml:lang="en"><varname><replaceable>OPT</replaceable>_VARS</varname>
	  and
	  <varname><replaceable>OPT</replaceable>_VARS_OFF</varname></title>

	<para xml:lang="en">Provides a generic way to set and append to
	  variables.</para>

	<warning><para xml:lang="en">Before using
	  <varname><replaceable>OPT</replaceable>_VARS</varname> and
	  <varname><replaceable>OPT</replaceable>_VARS_OFF</varname>,
	  see if there is already a more specific helper available in
	  <xref linkend="options-variables"/>.</para></warning>

	<para xml:lang="en">When option <replaceable>OPT</replaceable> is selected,
	  and <varname><replaceable>OPT</replaceable>_VARS</varname>
	  defined,
	  <literal><replaceable>key</replaceable>=<replaceable>value</replaceable></literal>
	  and
	  <literal><replaceable>key</replaceable>+=<replaceable>value</replaceable></literal>
	  pairs are evaluated from
	  <varname><replaceable>OPT</replaceable>_VARS</varname>.  An
	  <literal>=</literal> cause the existing value of
	  <literal>KEY</literal> to be overwritten, an
	  <literal>+=</literal> appends to the value.
	  <varname><replaceable>OPT</replaceable>_VARS_OFF</varname>
	  works the same way, but when <literal>OPT</literal> is
	  <emphasis>not</emphasis> selected.</para>

	<programlisting xml:lang="en">OPTIONS_DEFINE=	OPT1 OPT2 OPT3
OPT1_VARS=	also_build+=bin1
OPT2_VARS=	also_build+=bin2
OPT3_VARS=	bin3_build=yes
OPT3_VARS_OFF=	bin3_build=no

MAKE_ARGS=	ALSO_BUILD="${ALSO_BUILD}" BIN3_BUILD="${BIN3_BUILD}"</programlisting>

	<para xml:lang="en">is equivalent to:</para>

	<programlisting xml:lang="en">OPTIONS_DEFINE=	OPT1 OPT2

MAKE_ARGS=	ALSO_BUILD="${ALSO_BUILD}" BIN3_BUILD="${BIN3_BUILD}"

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
ALSO_BUILD+=	bin1
.endif

.if ${PORT_OPTIONS:MOPT2}
ALSO_BUILD+=	bin2
.endif

.if ${PORT_OPTIONS:MOPT2}
BIN3_BUILD=	yes
.else
BIN3_BUILD=	no
.endif</programlisting>

	<tip>
	  <para xml:lang="en">Values containing whitespace must be enclosed in
	    quotes:</para>

	  <programlisting xml:lang="en">OPT_VARS=	foo="bar baz"</programlisting>

	  <para xml:lang="en">This is due to the way <citerefentry><refentrytitle>make</refentrytitle><manvolnum>1</manvolnum></citerefentry> variable expansion
	    deals with whitespace.  When <literal>OPT_VARS= foo=bar
	      baz</literal> is expanded, the variable ends up
	    containing two strings, <literal>foo=bar</literal> and
	    <literal>baz</literal>.  But the submitter probably
	    intended there to be only one string, <literal>foo=bar
	      baz</literal>.  Quoting the value prevents whitespace
	    from being used as a delimiter.</para>
	</tip>
      </sect3>

      <sect3 xml:id="options-dependencies">
	<title xml:lang="en">Dependencies,
	  <varname><replaceable>OPT</replaceable>_<replaceable>DEPTYPE</replaceable></varname>
	  and
	  <varname><replaceable>OPT</replaceable>_<replaceable>DEPTYPE</replaceable>_OFF</varname></title>

	<para xml:lang="en">For any of these dependency types:</para>

	<itemizedlist>
	  <listitem>
	    <para><varname>PKG_DEPENDS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>EXTRACT_DEPENDS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PATCH_DEPENDS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>FETCH_DEPENDS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>BUILD_DEPENDS</varname></para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><varname>LIB_DEPENDS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>RUN_DEPENDS</varname></para>
	  </listitem>
	</itemizedlist>

	<para xml:lang="en">When option <replaceable>OPT</replaceable> is
	  selected, the value of
	  <varname><replaceable>OPT</replaceable>_<replaceable>DEPTYPE</replaceable></varname>,
	  if defined, is appended to
	  <literal><replaceable>DEPTYPE</replaceable></literal>.
	  <varname><replaceable>OPT</replaceable>_<replaceable>DEPTYPE</replaceable>_OFF</varname>
	  works the same, but when <literal>OPT</literal> is
	  <emphasis>not</emphasis>
	  selected.  For example:</para>

	<programlisting xml:lang="en">OPTIONS_DEFINE=	OPT1
OPT1_LIB_DEPENDS=	liba.so:${PORTSDIR}/devel/a
OPT1_LIB_DEPENDS_OFF=	libb.so:${PORTSDIR}/devel/b</programlisting>

	<para xml:lang="en">is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
LIB_DEPENDS+=	liba.so:${PORTSDIR}/devel/a
.else
LIB_DEPENDS+=	libb.so:${PORTSDIR}/devel/b
.endif</programlisting>
      </sect3>

      <sect3 xml:id="options-variables">
	<title xml:lang="en">Generic Variables Replacement,
	  <varname><replaceable>OPT</replaceable>_<replaceable>VARIABLE</replaceable></varname>
	  and
	  <varname><replaceable>OPT</replaceable>_<replaceable>VARIABLE</replaceable>_OFF</varname></title>

	<para xml:lang="en">For any of these variables:</para>

	<itemizedlist>
	  <listitem>
	    <para><varname>ALL_TARGET</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>BROKEN</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CATEGORIES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CFLAGS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CONFIGURE_ENV</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CONFLICTS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CONFLICTS_BUILD</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CONFLICTS_INSTALL</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CPPFLAGS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CXXFLAGS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>DESKTOP_ENTRIES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>DISTFILES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>EXTRA_PATCHES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>EXTRACT_ONLY</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GH_ACCOUNT</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GH_PROJECT</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GH_TAGNAME</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GH_TUPLE</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>IGNORE</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>INFO</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>INSTALL_TARGET</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>LDFLAGS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>LIBS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>MAKE_ARGS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>MAKE_ENV</varname></para>
	  </listitem>

	  <listitem>
	    <para xml:lang="en"><varname>PATCHFILES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PATCH_SITES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PLIST_DIRS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PLIST_DIRSTRY</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PLIST_FILES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PLIST_SUB</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PORTDOCS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PORTEXAMPLES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>SUB_FILES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>SUB_LIST</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>TEST_TARGET</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>USES</varname></para>
	  </listitem>
	</itemizedlist>

	<para xml:lang="en">When option <replaceable>OPT</replaceable> is
	  selected, the value of
	  <varname><replaceable>OPT</replaceable>_<replaceable>ABOVEVARIABLE</replaceable></varname>,
	  if defined, is appended to
	  <literal><replaceable>ABOVEVARIABLE</replaceable></literal>.
	  <varname><replaceable>OPT</replaceable>_<replaceable>ABOVEVARIABLE</replaceable>_OFF</varname>
	  works the same way, but when <literal>OPT</literal> is
	  <emphasis>not</emphasis>
	  selected.  For example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1
OPT1_USES=	gmake
OPT1_CFLAGS_OFF=	-DTEST</programlisting>

	<para xml:lang="en">is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
USES+=		gmake
.else
CFLAGS+=	-DTEST
.endif</programlisting>

	<note>
	  <para xml:lang="en">Some variables are not in this list, in particular
	    <varname>PKGNAMEPREFIX</varname> and
	    <varname>PKGNAMESUFFIX</varname>.  This is intentional.  A
	    port <emphasis>must not</emphasis> change its name when
	    its option set changes.</para>
	</note>

	<warning>
	  <para xml:lang="en">Some of these variables, at least
	    <varname>ALL_TARGET</varname> and
	    <varname>INSTALL_TARGET</varname>, have their default
	    values set <emphasis>after</emphasis> the options are
	    processed.</para>

	  <para xml:lang="en">With these lines in the
	    <filename>Makefile</filename>:</para>

	  <programlisting>ALL_TARGET=	all

DOCS_ALL_TARGET=	doc</programlisting>

	  <para xml:lang="en">If the <literal>DOCS</literal> option is enabled,
	    <varname>ALL_TARGET</varname> will have a final value of
	    <literal>all doc</literal>; if the option is disabled, it
	    would have a value of <literal>all</literal>.</para>

	  <para xml:lang="en">With only the options helper line in the
	    <filename>Makefile</filename>:</para>

	  <programlisting>DOCS_ALL_TARGET=	doc</programlisting>

	  <para xml:lang="en">If the <literal>DOCS</literal> option is enabled,
	    <varname>ALL_TARGET</varname> will have a final value of
	    <literal>doc</literal>; if the option is disabled, it
	    would have a value of <literal>all</literal>.</para>
	</warning>

      </sect3>

      <sect3 xml:id="options-targets">
	<title xml:lang="en">Additional Build Targets,
	  <buildtarget xml:lang="en"><replaceable>TARGET</replaceable>-<replaceable>OPT</replaceable>-on</buildtarget>
	  and
	  <buildtarget xml:lang="en"><replaceable>TARGET</replaceable>-<replaceable>OPT</replaceable>-on</buildtarget></title>

	<para xml:lang="en">These <filename>Makefile</filename> targets can accept
	  optional extra build targets:</para>

	<itemizedlist>
	  <listitem>
	    <para><buildtarget>pre-fetch</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget xml:lang="en">do-fetch</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-fetch</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>pre-extract</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget xml:lang="en">do-extract</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget xml:lang="en">post-extract</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>pre-patch</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>do-patch</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-patch</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>pre-configure</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>do-configure</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-configure</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>pre-build</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>do-build</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-build</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>pre-install</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>do-install</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-install</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-stage</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>pre-package</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>do-package</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-package</buildtarget></para>
	  </listitem>
	</itemizedlist>

	<para xml:lang="en">When option <replaceable>OPT</replaceable> is
	  selected, the target
	  <buildtarget xml:lang="en"><replaceable>TARGET</replaceable>-<replaceable>OPT</replaceable>-on</buildtarget>,
	  if defined, is executed after
	  <buildtarget xml:lang="en"><replaceable>TARGET</replaceable></buildtarget>.
	  <buildtarget xml:lang="en"><replaceable>TARGET</replaceable>-<replaceable>OPT</replaceable>-off</buildtarget>
	  works the same way, but when <literal>OPT</literal> is
	  <emphasis>not</emphasis> selected.  For example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

post-patch-OPT1-on:
	@${REINPLACE_CMD} -e '/opt1/d' ${WRKSRC}/Makefile
post-patch-OPT1-off:
	@${REINPLACE_CMD} -e '/opt1/s|/usr/bin/|${LOCALBASE}/bin/|' ${WRKSRC}/Makefile</programlisting>

	<para xml:lang="en">is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

post-patch:
.if ${PORT_OPTIONS:MOPT1}
	@${REINPLACE_CMD} -e '/opt1/d' ${WRKSRC}/Makefile
.else
	@${REINPLACE_CMD} -e '/opt1/s|/usr/bin/|${LOCALBASE}/bin/|' ${WRKSRC}/Makefile
.endif</programlisting>
      </sect3>
    </sect2>
  </sect1>

  <sect1 xml:id="makefile-wrkdir">
    <title xml:lang="en">Specifying the Working Directory</title>

    <para xml:lang="en">Each port is extracted into a working directory, which must
      be writable.  The ports system defaults to having
      <varname>DISTFILES</varname> unpack in to a directory called
      <literal>${DISTNAME}</literal>.  In other words, if the
      <filename>Makefile</filename> has:</para>

    <programlisting xml:lang="en">PORTNAME=	foo
PORTVERSION=	1.0</programlisting>

    <para xml:lang="en">then the port's distribution files contain a top-level
      directory, <filename>foo-1.0</filename>, and the rest of the
      files are located under that directory.</para>

    <para xml:lang="en">A number of variables can be overridden if that is
      not the case.</para>

    <sect2 xml:id="makefile-wrksrc">
      <title><varname>WRKSRC</varname></title>

      <para xml:lang="en">The variable lists the name of the directory that is
	created when the application's distfiles are extracted.  If
	our previous example extracted into a directory called
	<filename>foo</filename> (and not
	<filename>foo-1.0</filename>) write:</para>

      <programlisting>WRKSRC=	${WRKDIR}/foo</programlisting>

      <para xml:lang="en">or possibly</para>

      <programlisting>WRKSRC=	${WRKDIR}/${PORTNAME}</programlisting>
    </sect2>

    <sect2 xml:id="makefile-wrksrc_subdir">
      <title xml:lang="en"><varname>WRKSRC_SUBDIR</varname></title>

      <para xml:lang="en">If the source files needed for the port are in a
	subdirectory of the extracted distribution file, set
	<varname>WRKSRC_SUBDIR</varname> to that directory.</para>

      <programlisting>WRKSRC_SUBDIR=	src</programlisting>
    </sect2>

    <sect2 xml:id="makefile-no_wrksubdir">
      <title><varname>NO_WRKSUBDIR</varname></title>

      <para xml:lang="en">If the port does not extract in to a subdirectory at all,
	then set <varname>NO_WRKSUBDIR</varname> to
	indicate that.</para>

      <programlisting>NO_WRKSUBDIR=	yes</programlisting>

      <note>
	<para xml:lang="en">Because <varname>WRKDIR</varname> is the only directory
	  that is supposed to be writable during the build, and is
	  used to store many files recording the status of the build,
	  the port's extraction will be forced into a
	  subdirectory.</para>
      </note>
    </sect2>
  </sect1>

  <sect1 xml:id="conflicts">
    <title xml:lang="en">Conflict Handling</title>

    <para xml:lang="en">There are three different variables to register a conflict
      between packages and ports: <varname>CONFLICTS</varname>,
      <varname>CONFLICTS_INSTALL</varname> and
      <varname>CONFLICTS_BUILD</varname>.</para>

    <note>
      <para xml:lang="en">The conflict variables automatically set the variable
	<varname>IGNORE</varname>, which is more fully documented in
	<xref linkend="dads-noinstall"/>.</para>
    </note>

    <para xml:lang="en">When removing one of several conflicting ports, it is
      advisable to retain <varname>CONFLICTS</varname> in
      those other ports for a few months to cater for users who only
      update once in a while.</para>

    <sect2 xml:id="conflicts-conflicts_install">
      <title><varname>CONFLICTS_INSTALL</varname></title>

      <para xml:lang="en">If the package cannot coexist with other packages
	(because of file conflicts, runtime incompatibilities, etc.),
	list the other package names in
	<varname>CONFLICTS_INSTALL</varname>.  Use
	shell globs like <literal>*</literal> and <literal>?</literal>
	here.  Enumerate package names in there, not port names or
	origins.  Please make sure
	that <varname>CONFLICTS_INSTALL</varname> does not match this
	port's package itself.  Otherwise enforcing its installation
	with <varname>FORCE_PKG_REGISTER</varname> will no longer
	work.  <varname>CONFLICTS_INSTALL</varname> check is done
	after the build stage and prior to the install stage.</para>
    </sect2>

    <sect2 xml:id="conflicts-conflicts_build">
      <title><varname>CONFLICTS_BUILD</varname></title>

      <para xml:lang="en">If the port cannot be built when other specific ports are
	already installed, list the other port names in
	<varname>CONFLICTS_BUILD</varname>.  Use
	shell globs like <literal>*</literal> and <literal>?</literal>
	here.  Use package names, not port names or origins.
	<varname>CONFLICTS_BUILD</varname> check is done prior to the
	build stage.  Build conflicts are not recorded in the
	resulting package.</para>
    </sect2>

    <sect2 xml:id="conflicts-conflicts">
      <title><varname>CONFLICTS</varname></title>

      <para xml:lang="en">If the port cannot be built if a certain port is already
	installed and the resulting package cannot coexist with the
	other package, list the other package name in
	<varname>CONFLICTS</varname>.  use shell
	globs like <literal>*</literal> and <literal>?</literal> here.
	Enumerate package names in there, not port names or
	origins.  Please make sure that
	<varname>CONFLICTS</varname> does not match this
	port's package itself.  Otherwise enforcing its installation
	with <varname>FORCE_PKG_REGISTER</varname> will no longer
	work.  <varname>CONFLICTS</varname> check is done prior to the
	build stage and prior to the install stage.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="install">
    <title xml:lang="en">Installing Files</title>

    <sect2 xml:id="install-macros">
      <title xml:lang="en"><varname>INSTALL_<replaceable>*</replaceable></varname>
	Macros</title>

      <para xml:lang="en">Use the macros provided in
	<filename>bsd.port.mk</filename> to ensure correct modes of
	files in the port's <buildtarget xml:lang="en">*-install</buildtarget>
	targets.  Set ownership directly in
	<filename>pkg-plist</filename> with the corresponding entries,
	such as
	<literal>@(<replaceable>owner</replaceable>,<replaceable>group</replaceable>,)</literal>,
	<literal>@owner <replaceable>owner</replaceable></literal>,
	and <literal>@group
	  <replaceable>group</replaceable></literal>.
	These operators work until overridden, or until the end
	of <filename>pkg-plist</filename>, so do not forget to reset
	them after they are no longer needed.  The default ownership
	is <literal>root:wheel</literal>.  See <xref linkend="plist-keywords-base"/> for more information.</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en"><varname>INSTALL_PROGRAM</varname> is a command to
	    install binary executables.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><varname>INSTALL_SCRIPT</varname> is a command to
	    install executable scripts.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><varname>INSTALL_LIB</varname> is a command to install
	    shared libraries (but not static libraries).</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><varname>INSTALL_KLD</varname> is a command to
	    install kernel loadable modules.  Some architectures
	    do not like having the modules stripped, so
	    use this command instead of
	    <varname>INSTALL_PROGRAM</varname>.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><varname>INSTALL_DATA</varname> is a command to
	    install sharable data, including static libraries.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><varname>INSTALL_MAN</varname> is a command to
	    install manpages and other documentation (it does not
	    compress anything).</para>
	</listitem>
      </itemizedlist>

      <para xml:lang="en">These variables are set to the <citerefentry><refentrytitle>install</refentrytitle><manvolnum>1</manvolnum></citerefentry> command
	with the appropriate flags for each situation.</para>

      <important>
	<para xml:lang="en">Do not use <varname>INSTALL_LIB</varname> to install
	  static libraries, because stripping them renders them
	  useless.  Use <varname>INSTALL_DATA</varname>
	  instead.</para>
      </important>
    </sect2>

    <sect2 xml:id="install-strip">
      <title xml:lang="en">Stripping Binaries and Shared Libraries</title>

      <para xml:lang="en">Installed binaries should be stripped.  Do not strip
	binaries manually unless absolutely required.  The
	<varname>INSTALL_PROGRAM</varname> macro installs and
	strips a binary at the same time.  The
	<varname>INSTALL_LIB</varname> macro does the same thing to
	shared libraries.</para>

      <para xml:lang="en">When a file must be stripped, but neither
	<varname>INSTALL_PROGRAM</varname> nor
	<varname>INSTALL_LIB</varname> macros are desirable,
	<literal>${STRIP_CMD}</literal> strips the program or
	shared library.  This is typically done within the
	<buildtarget xml:lang="en">post-install</buildtarget> target.  For
	example:</para>

      <programlisting xml:lang="en">post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/xdl</programlisting>

      <para xml:lang="en">When multiple files need to be stripped:</para>

      <programlisting xml:lang="en">post-install:
.for l in geometry media body track world
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/lib${PORTNAME}-${l}.so.0
.endfor</programlisting>

      <para xml:lang="en">Use <citerefentry><refentrytitle>file</refentrytitle><manvolnum>1</manvolnum></citerefentry> on a file to determine if it has been
	stripped.  Binaries are reported by <citerefentry><refentrytitle>file</refentrytitle><manvolnum>1</manvolnum></citerefentry> as
	<literal>stripped</literal>, or
	<literal>not stripped</literal>.  Additionally, <citerefentry><refentrytitle>strip</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	will detect programs that have already been stripped and exit
	cleanly.</para>
    </sect2>

    <sect2 xml:id="install-copytree">
      <title xml:lang="en">Installing a Whole Tree of Files</title>

      <para xml:lang="en">Sometimes, a large number of files must be installed while
	preserving their hierarchical organization.  For example,
	copying over a whole directory tree from
	<varname>WRKSRC</varname> to a target directory under
	<varname>PREFIX</varname>.  Note that
	<varname>PREFIX</varname>, <varname>EXAMPLESDIR</varname>,
	<varname>DATADIR</varname>, and other path variables must
	always be prepended with <varname>STAGEDIR</varname> to
	respect staging (see <xref linkend="staging"/>).</para>

      <para xml:lang="en">Two macros exist for this situation.  The advantage of
	using these macros instead of <command>cp</command> is that
	they guarantee proper file ownership and permissions on target
	files.  The first macro, <varname>COPYTREE_BIN</varname>, will
	set all the installed files to be executable, thus being
	suitable for installing into <filename>PREFIX/bin</filename>.
	The second macro, <varname>COPYTREE_SHARE</varname>, does not
	set executable permissions on files, and is therefore suitable
	for installing files under <filename>PREFIX/share</filename>
	target.</para>

      <programlisting>post-install:
	${MKDIR} ${STAGEDIR}${EXAMPLESDIR}
	(cd ${WRKSRC}/examples &amp;&amp; ${COPYTREE_SHARE} . ${STAGEDIR}${EXAMPLESDIR})</programlisting>

      <para xml:lang="en">This example will install the contents of the
	<filename>examples</filename> directory in the vendor distfile
	to the proper examples location of the port.</para>

      <programlisting>post-install:
	${MKDIR} ${STAGEDIR}${DATADIR}/summer
	(cd ${WRKSRC}/temperatures &amp;&amp; ${COPYTREE_SHARE} "June July August" ${STAGEDIR}${DATADIR}/summer)</programlisting>

      <para xml:lang="en">And this example will install the data of summer months to
	the <filename>summer</filename> subdirectory of a
	<filename>DATADIR</filename>.</para>

      <para xml:lang="en">Additional <command>find</command> arguments can be
	passed via the third argument to
	<varname>COPYTREE_<replaceable>*</replaceable></varname>
	macros.  For example, to install
	all files from the first example except Makefiles, one can use
	these commands.</para>

      <programlisting>post-install:
	${MKDIR} ${STAGEDIR}${EXAMPLESDIR}
	(cd ${WRKSRC}/examples &amp;&amp; \
	${COPYTREE_SHARE} . ${STAGEDIR}${EXAMPLESDIR} "! -name Makefile")</programlisting>

      <para xml:lang="en">These macros do not add the installed files to
	<filename>pkg-plist</filename>.  They must be added manually.
	For optional documentation (<varname>PORTDOCS</varname>, see
	<xref linkend="install-documentation"/>) and examples
	(<varname>PORTEXAMPLES</varname>), the
	<literal>%%PORTDOCS%%</literal> or
	<literal>%%PORTEXAMPLES%%</literal> prefixes must be prepended
	in <filename>pkg-plist</filename>.</para>
    </sect2>

    <sect2 xml:id="install-documentation">
      <title xml:lang="en">Install Additional Documentation</title>

      <para xml:lang="en">If the software has some documentation other than the
	standard man and info pages that is useful for the
	user, install it under <varname>DOCSDIR</varname>
	This can be done, like the previous item, in the
	<buildtarget xml:lang="en">post-install</buildtarget> target.</para>

      <para xml:lang="en">Create a new directory for the port.  The directory name
	is <varname>DOCSDIR</varname>.  This usually equals
	<varname>PORTNAME</varname>.  However, if the user
	might want different versions of the port to be installed at
	the same time, the whole
	<varname>PKGNAME</varname> can be used.</para>

      <para xml:lang="en">Since only the files listed in
	<filename>pkg-plist</filename> are installed, it is safe to
	always install documentation to <varname>STAGEDIR</varname>
	(see <xref linkend="staging"/>).  Hence <literal>.if</literal>
	blocks are only needed when the installed files are large
	enough to cause significant I/O overhead.</para>

      <programlisting xml:lang="en">post-install:
	${MKDIR} ${STAGEDIR}${DOCSDIR}
	${INSTALL_MAN} ${WRKSRC}/docs/xvdocs.ps ${STAGEDIR}${DOCSDIR}</programlisting>

      <para xml:lang="en">Here are some handy variables and how they are expanded by
	default when used in the <filename>Makefile</filename>:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en"><varname>DATADIR</varname> gets expanded to
	    <filename>PREFIX/share/PORTNAME</filename>.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><varname>DATADIR_REL</varname> gets expanded to
	    <filename>share/PORTNAME</filename>.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><varname>DOCSDIR</varname> gets expanded to
	    <filename>PREFIX/share/doc/PORTNAME</filename>.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><varname>DOCSDIR_REL</varname> gets expanded to
	    <filename>share/doc/PORTNAME</filename>.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><varname>EXAMPLESDIR</varname> gets expanded to
	    <filename>PREFIX/share/examples/PORTNAME</filename>.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><varname>EXAMPLESDIR_REL</varname> gets expanded to
	    <filename>share/examples/PORTNAME</filename>.</para>
	</listitem>
      </itemizedlist>

      <note>
	<para xml:lang="en">The <literal>DOCS</literal> option only controls
	  additional documentation installed in
	  <varname>DOCSDIR</varname>.  It does not apply to standard
	  man pages and info pages.  Things installed in
	  <varname>DATADIR</varname> and
	  <varname>EXAMPLESDIR</varname> are controlled by
	  <literal>DATA</literal> and <literal>EXAMPLES</literal>
	  options, respectively.</para>
      </note>

      <para xml:lang="en">These variables are exported to
	<varname>PLIST_SUB</varname>.  Their values will appear there
	as pathnames relative to <filename>PREFIX</filename> if
	possible.  That is, <filename>share/doc/PORTNAME</filename>
	will be substituted for <literal>%%DOCSDIR%%</literal> in the
	packing list by default, and so on.  (See more on
	<filename>pkg-plist</filename> substitution
	<link linkend="plist-sub">here</link>.)</para>

      <para xml:lang="en">All conditionally installed documentation files and
	directories are included in
	<filename>pkg-plist</filename> with the
	<literal>%%PORTDOCS%%</literal> prefix, for example:</para>

      <programlisting xml:lang="en">%%PORTDOCS%%%%DOCSDIR%%/AUTHORS
%%PORTDOCS%%%%DOCSDIR%%/CONTACT</programlisting>

      <para xml:lang="en">As an alternative to enumerating the documentation files
	in <filename>pkg-plist</filename>, a port can set the variable
	<varname>PORTDOCS</varname> to a list of file names and shell
	glob patterns to add to the final packing list.  The names
	will be relative to <varname>DOCSDIR</varname>.  Therefore, a
	port that utilizes <varname>PORTDOCS</varname>, and uses a
	non-default location for its documentation, must set
	<varname>DOCSDIR</varname> accordingly.  If a directory is
	listed in <varname>PORTDOCS</varname> or matched by a glob
	pattern from this variable, the entire subtree of contained
	files and directories will be registered in the final packing
	list.  If the <literal>DOCS</literal> option has been unset
	then files and directories listed in
	<varname>PORTDOCS</varname> would not be installed or added to
	port packing list.  Installing the documentation at
	<varname>PORTDOCS</varname> as shown above remains up to the
	port itself.  A typical example of utilizing
	<varname>PORTDOCS</varname> looks as follows:</para>

      <programlisting xml:lang="en">PORTDOCS=	README.* ChangeLog docs/*</programlisting>

      <note>
	<para xml:lang="en">The equivalents of <varname>PORTDOCS</varname> for files
	  installed under <varname>DATADIR</varname> and
	  <varname>EXAMPLESDIR</varname> are
	  <varname>PORTDATA</varname> and
	  <varname>PORTEXAMPLES</varname>, respectively.</para>

	<para xml:lang="en">The contents of <filename>pkg-message</filename> are
	  displayed upon installation.  See
	  <link linkend="porting-message">the section on using
	  <filename>pkg-message</filename></link> for details.
	  <filename>pkg-message</filename> does not need to be added
	  to <filename>pkg-plist</filename>.</para>
      </note>
    </sect2>

    <sect2 xml:id="install-subdirs">
      <title xml:lang="en">Subdirectories Under <varname>PREFIX</varname></title>

      <para xml:lang="en">Try to let the port put things in the right subdirectories
	of <varname>PREFIX</varname>.  Some ports lump everything and
	put it in the subdirectory with the port's name, which is
	incorrect.  Also, many ports put everything except binaries,
	header files and manual pages in a subdirectory of
	<filename>lib</filename>, which does not work well with the
	BSD paradigm.  Many of the files must be moved to one of these
	directories: <filename>etc</filename> (setup/configuration
	files), <filename>libexec</filename> (executables started
	internally), <filename>sbin</filename> (executables for
	superusers/managers), <filename>info</filename> (documentation
	for info browser) or <filename>share</filename> (architecture
	independent files).  See <citerefentry><refentrytitle>hier</refentrytitle><manvolnum>7</manvolnum></citerefentry> for details; the rules
	governing <filename>/usr</filename> pretty much apply to
	<filename>/usr/local</filename> too.  The exception are ports
	dealing with USENET <quote>news</quote>.  They may use
	<filename>PREFIX/news</filename> as a destination for their
	files.</para>
    </sect2>
  </sect1>
</chapter>

  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter version="5.0" xml:id="special">

  <title xml:lang="en">Special Considerations</title>

  <para xml:lang="en">This section explains the most common things to consider when
    creating a port.</para>

  <sect1 xml:id="staging">
    <title xml:lang="en">Staging</title>

    <para xml:lang="en"><filename>bsd.port.mk</filename> expects ports to work
      with a <quote>stage directory</quote>.  This means that a port
      must not install files directly to the regular destination
      directories (that is, under <varname>PREFIX</varname>, for
      example) but instead into a separate directory from which the
      package is then built.  In many cases, this does not require
      root privileges, making it possible to build packages as an
      unprivileged user.  With staging, the port is built and
      installed into the stage directory,
      <varname>STAGEDIR</varname>.  A package is created from the
      stage directory and then installed on the system.  Automake
      tools refer to this concept as <varname>DESTDIR</varname>, but
      in FreeBSD, <varname>DESTDIR</varname> has a different meaning
      (see <xref linkend="porting-prefix"/>).</para>

    <note>
      <para xml:lang="en">No port <emphasis>really</emphasis> needs to be root.  It
	can mostly be avoided by using <link linkend="uses-uidfix"><literal>USES=uidfix</literal></link>.
	If the port still runs commands like <citerefentry><refentrytitle>chown</refentrytitle><manvolnum>8</manvolnum></citerefentry>,
	<citerefentry><refentrytitle>chgrp</refentrytitle><manvolnum>1</manvolnum></citerefentry>, or forces owner or group with <citerefentry><refentrytitle>install</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	then use <link linkend="uses-fakeroot"><literal>USES=fakeroot</literal></link>
	to fake those calls.  Some patching of the port's
	<filename>Makefiles</filename> will be needed.</para>
    </note>

    <para xml:lang="en">Meta ports, or ports that do not install files themselves
      but only depend on other ports, must avoid needlessly
      extracting the <citerefentry><refentrytitle>mtree</refentrytitle><manvolnum>8</manvolnum></citerefentry> to the stage directory.  This is
      the basic directory layout of the package, and these empty
      directories will be seen as orphans.  To prevent
      <citerefentry><refentrytitle>mtree</refentrytitle><manvolnum>8</manvolnum></citerefentry> extraction, add this line:</para>

    <programlisting>NO_MTREE=	yes</programlisting>

    <tip>
      <para xml:lang="en">Metaports should use <link linkend="uses-metaport"><literal>USES=metaport</literal></link>.
	It sets up defaults for ports that do not fetch, build, or
	install anything.</para>
    </tip>

    <para xml:lang="en">Staging is enabled by prepending
      <varname>STAGEDIR</varname> to paths used in the
      <buildtarget xml:lang="en">pre-install</buildtarget>,
      <buildtarget xml:lang="en">do-install</buildtarget>, and
      <buildtarget xml:lang="en">post-install</buildtarget> targets (see the
      examples through the book).  Typically, this includes
      <varname>PREFIX</varname>, <varname>ETCDIR</varname>,
      <varname>DATADIR</varname>, <varname>EXAMPLESDIR</varname>,
      <varname>MANPREFIX</varname>, <varname>DOCSDIR</varname>, and
      so on.  Directories should be created as part of the
      <buildtarget xml:lang="en">post-install</buildtarget> target.  Avoid using
      absolute paths whenever possible.</para>

    <para xml:lang="en">When creating a symlink, <varname>STAGEDIR</varname>
      is prepended to the target path only.  For
      example:</para>

    <programlisting xml:lang="en">${LN} -sf <replaceable>libfoo.so.42</replaceable> ${STAGEDIR}${PREFIX}/lib/<replaceable>libfoo.so</replaceable></programlisting>

    <para xml:lang="en">The source path
      <filename>${PREFIX}/lib/<replaceable>libfoo.so.42</replaceable></filename>
      looks fine but could, in fact, be incorrect.  Absolute paths can
      point to a wrong location, like when a remote file system has
      been mounted with <acronym>NFS</acronym> under a non-root mount
      point.  Relative paths are less fragile, and often much
      shorter.</para>

    <para xml:lang="en">Ports that install kernel modules must prepend
      <varname>STAGEDIR</varname> to their destination, by default
      <filename>/boot/modules</filename>.</para>
  </sect1>

  <sect1 xml:id="bundled-libs">
    <title xml:lang="en">Bundled Libraries</title>

    <para xml:lang="en">This section explains why bundled dependencies are
      considered bad and what to do about them.</para>

    <sect2 xml:id="bundled-libs-why-bad">
      <title xml:lang="en">Why Bundled Libraries Are Bad</title>

      <para xml:lang="en">Some software requires the porter to locate third-party
	libraries and add the required dependencies to the port.
	Other software bundles all necessary libraries into the
	distribution file.  The second approach seems easier at
	first, but there are some serious drawbacks:</para>

      <para xml:lang="en">This list is loosely based on the <link xlink:href="https://fedoraproject.org/wiki/Packaging:No_Bundled_Libraries">Fedora</link>
	and <link xlink:href="http://wiki.gentoo.org/wiki/Why_not_bundle_dependencies">Gentoo</link>
	wikis, both licensed under the <link xlink:href="http://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA
	  3.0</link> license.</para>

      <variablelist>
	<varlistentry>
	  <term>安全性</term>

	  <listitem>
	    <para xml:lang="en">If vulnerabilities are found in the upstream library
	      and fixed there, they might not be fixed in the library
	      bundled with the port.  One reason could be that the
	      author is not aware of the problem.  This means that the
	      porter must fix them, or upgrade to a non-vulnerable
	      version, and send a patch to the author.  This all takes
	      time, which results in software being vulnerable longer
	      than necessary.  This in turn makes it harder to
	      coordinate a fix without unnecessarily leaking
	      information about the vulnerability.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>臭蟲</term>

	  <listitem>
	    <para xml:lang="en">This problem is similar to the problem with security
	      in the last paragraph, but generally less severe.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en">Forking</term>

	  <listitem>
	    <para xml:lang="en">It is easier for the author to fork the upstream
	      library once it is bundled.  While convenient on first
	      sight, it means that the code diverges from upstream
	      making it harder to address security or other problems
	      with the software.  A reason for this is that patching
	      becomes harder.</para>

	    <para xml:lang="en">Another problem of forking is that because code
	      diverges from upstream, bugs get solved over and over
	      again instead of just once at a central location.  This
	      defeats the idea of open source software in the first
	      place.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en">Symbol collision</term>

	  <listitem>
	    <para xml:lang="en">When a library is installed on the system, it might
	      collide with the bundled version.  This can cause
	      immediate errors at compile or link time.  It can also
	      cause errors when running the program which might be
	      harder to track down.  The latter problem could be
	      caused because the versions of the two libraries are
	      incompatible.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en">Licensing</term>

	  <listitem>
	    <para xml:lang="en">When bundling projects from different sources,
	      license issues can arise more easily, especially when
	      licenses are incompatible.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>浪費資源</term>

	  <listitem>
	    <para xml:lang="en">Bundled libraries waste resources on several levels.
	      It takes longer to build the actual application,
	      especially if these libraries are already present on the
	      system.  At run-time, they can take up unnecessary
	      memory when the system-wide library is already loaded by
	      one program and the bundled library is loaded by another
	      program.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>浪費努力</term>

	  <listitem>
	    <para xml:lang="en">When a library needs patches for FreeBSD, these patches
	      have to be duplicated again in the bundled library.
	      This wastes developer time because the patches might not
	      apply cleanly.  It can also be hard to notice that these
	      patches are required in the first place.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 xml:id="bundled-libs-practices">
      <title xml:lang="en">What to do About Bundled Libraries</title>

      <para xml:lang="en">Whenever possible, use the unbundled version of the
	library by adding a <varname>LIB_DEPENDS</varname> to the
	port.  If such a port does not exist yet, consider creating
	it.</para>

      <para xml:lang="en">Only use bundled libraries if the upstream has a
	good track record on security and using unbundled versions
	leads to overly complex patches.</para>

      <note>
	<para xml:lang="en">In some very special cases, for example emulators, like
	  <application>Wine</application>, a port has to bundle
	  libraries, because they are in a different architecture, or
	  they have been modified to fit the software's use.  In that
	  case, those libraries should not be exposed to other ports
	  for linking.  Add <literal>BUNDLE_LIBS=yes</literal> to the
	  port's <filename>Makefile</filename>.  This will tell
	  <citerefentry><refentrytitle>pkg</refentrytitle><manvolnum>8</manvolnum></citerefentry> to not compute provided libraries.  Always ask
	  the Ports Management Team <email>portmgr@FreeBSD.org</email> before adding this to a port.</para>
      </note>
    </sect2>
  </sect1>

  <sect1 xml:id="porting-shlibs">
    <title>共用函式庫</title>

    <para xml:lang="en">If the port installs one or more shared libraries, define
      a <varname>USE_LDCONFIG</varname> make variable, which will
      instruct a <filename>bsd.port.mk</filename> to run
      <literal>${LDCONFIG} -m</literal> on the directory
      where the new library is installed (usually
      <filename>PREFIX/lib</filename>) during
      <buildtarget xml:lang="en">post-install</buildtarget> target to register it
      into the shared library cache.  This variable, when defined,
      will also facilitate addition of an appropriate
      <literal>@exec /sbin/ldconfig -m</literal> and
      <literal>@unexec /sbin/ldconfig -R</literal> pair into
      <filename>pkg-plist</filename>, so that a user who
      installed the package can start using the shared library
      immediately and de-installation will not cause the system to
      still believe the library is there.</para>

    <programlisting xml:lang="en">USE_LDCONFIG=	yes</programlisting>

    <para xml:lang="en">The default directory can be overridden by
      setting <varname>USE_LDCONFIG</varname> to a list of
      directories into which shared libraries are to be installed.
      For example, if the port installs shared libraries into
      <filename>PREFIX/lib/foo</filename> and
      <filename>PREFIX/lib/bar</filename>
      use this in
      <filename>Makefile</filename>:</para>

    <programlisting xml:lang="en">USE_LDCONFIG=	${PREFIX}/lib/foo ${PREFIX}/lib/bar</programlisting>

    <para xml:lang="en">Please double-check, often this is not necessary at all or
      can be avoided through <literal>-rpath</literal> or setting
      <envar>LD_RUN_PATH</envar> during linking (see
      <package role="port">lang/moscow_ml</package> for an
      example), or through a shell-wrapper which sets
      <varname>LD_LIBRARY_PATH</varname> before invoking the binary,
      like <package role="port">www/seamonkey</package>
      does.</para>

    <para xml:lang="en">When installing 32-bit libraries on 64-bit system, use
      <varname>USE_LDCONFIG32</varname> instead.</para>

    <para xml:lang="en">If the software uses <link linkend="using-autotools">autotools</link>, and specifically
      <command>libtool</command>, add <link linkend="uses-libtool"><literal>USES=libtool</literal></link>.</para>

    <para xml:lang="en">When the major library version number increments in the
      update to the new port version, all other ports that link to
      the affected library must have their
      <varname>PORTREVISION</varname> incremented, to force
      recompilation with the new library version.</para>
  </sect1>

  <sect1 xml:id="porting-restrictions">
    <title xml:lang="en">Ports with Distribution Restrictions or Legal
      Concerns</title>

    <para xml:lang="en">Licenses vary, and some of them place restrictions on how
      the application can be packaged, whether it can be sold for
      profit, and so on.</para>

    <important>
      <para xml:lang="en">It is the responsibility of a porter to read the
	licensing terms of the software and make sure that the
	FreeBSD project will not be held accountable for violating
	them by redistributing the source or compiled binaries
	either via FTP/HTTP or CD-ROM.  If in doubt, please contact
	the <link xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-ports">FreeBSD ports mailing list</link>.</para>
    </important>

    <para xml:lang="en">In situations like this, the variables described in the
      next sections can be set.</para>

    <sect2 xml:id="porting-restrictions-no_package">
      <title><varname>NO_PACKAGE</varname></title>

      <para xml:lang="en">This variable indicates that we may not generate a
	binary package of the application.  For instance, the
	license may disallow binary redistribution, or it may
	prohibit distribution of packages created from patched
	sources.</para>

      <para xml:lang="en">However, the port's <varname>DISTFILES</varname> may be
	freely mirrored on FTP/HTTP.  They may also be distributed
	on a CD-ROM (or similar media) unless
	<varname>NO_CDROM</varname> is set as well.</para>

      <para xml:lang="en">If the
	binary package is not generally useful, and the application
	must always be compiled from the source code, use
	<varname>NO_PACKAGE</varname>.  For
	example, if the application has configuration information
	that is site specific hard coded into it at compile time,
	set <varname>NO_PACKAGE</varname>.</para>

      <para xml:lang="en">Set <varname>NO_PACKAGE</varname> to a string
	describing the reason why the package cannot be
	generated.</para>
    </sect2>

    <sect2 xml:id="porting-restrictions-no_cdrom">
      <title><varname>NO_CDROM</varname></title>

      <para xml:lang="en">This variable alone indicates that, although we are
	allowed to generate binary packages, we may put neither
	those packages nor the port's <varname>DISTFILES</varname>
	onto a CD-ROM (or similar media) for resale.  However, the
	binary packages and the port's <varname>DISTFILES</varname>
	will still be available via FTP/HTTP.</para>

      <para xml:lang="en"> If this variable is set along with
	<varname>NO_PACKAGE</varname>, then only the port's
	<varname>DISTFILES</varname> will be available, and only via
	FTP/HTTP.</para>

      <para xml:lang="en">Set <varname>NO_CDROM</varname> to a string
	describing the reason why the port cannot be redistributed
	on CD-ROM.  For instance, use this if the port's
	license is for <quote>non-commercial</quote> use
	only.</para>
    </sect2>

    <sect2 xml:id="porting-restrictions-nofetchfiles">
      <title><varname>NOFETCHFILES</varname></title>

      <para xml:lang="en">Files defined in <varname>NOFETCHFILES</varname>
	are not fetchable from any of
	<varname>MASTER_SITES</varname>.  An example of such a file
	is when the file is supplied on CD-ROM by the vendor.</para>

      <para xml:lang="en">Tools which check for the availability of these files
	on <varname>MASTER_SITES</varname> have to ignore these
	files and not report about them.</para>
    </sect2>

    <sect2 xml:id="porting-restrictions-restricted">
      <title><varname>RESTRICTED</varname></title>

      <para xml:lang="en">Set this variable alone if the application's license
	permits neither mirroring the application's
	<varname>DISTFILES</varname> nor distributing the binary
	package in any way.</para>

      <para xml:lang="en">Do not set <varname>NO_CDROM</varname> or
	<varname>NO_PACKAGE</varname> along with
	<varname>RESTRICTED</varname>, since the latter variable
	implies the former ones.</para>

      <para xml:lang="en">Set <varname>RESTRICTED</varname> to a string
	describing the reason why the port cannot be redistributed.
	Typically, this indicates that the port contains proprietary
	software and that the user will need to manually download
	the <varname>DISTFILES</varname>, possibly after registering
	for the software or agreeing to accept the terms of an
	<acronym>EULA</acronym>.</para>
    </sect2>

    <sect2 xml:id="porting-restrictions-restricted_files">
      <title><varname>RESTRICTED_FILES</varname></title>

      <para xml:lang="en">When <varname>RESTRICTED</varname> or
	<varname>NO_CDROM</varname> is set, this variable defaults
	to <literal>${DISTFILES} ${PATCHFILES}</literal>, otherwise
	it is empty.  If only some of the distribution files are
	restricted, then set this variable to list them.</para>

    </sect2>

    <sect2 xml:id="porting-restrictions-legal_text">
      <title><varname>LEGAL_TEXT</varname></title>

      <para xml:lang="en">If the port has legal concerns not addressed by the
	above variables, set <varname>LEGAL_TEXT</varname>
	to a string explaining the concern.  For
	example, if special permission was obtained for FreeBSD to
	redistribute the binary, this variable must indicate
	so.</para>
    </sect2>

    <sect2 xml:id="porting-restrictions-legal">
      <title><filename>/usr/ports/LEGAL</filename> 和 <varname>LEGAL</varname></title>

      <para xml:lang="en">A port which sets any of the above variables must also
	be added to <filename>/usr/ports/LEGAL</filename>.  The
	first column is a glob which matches the restricted
	distfiles.  The second column is the port's origin.  The
	third column is the output of
	<command>make -VLEGAL</command>.</para>
    </sect2>

    <sect2 xml:id="porting-restrictions-examples">
      <title>範例</title>

      <para xml:lang="en">The preferred way to state "the distfiles for this port
	must be fetched manually" is as follows:</para>

      <programlisting xml:lang="en">.if !exists(${DISTDIR}/${DISTNAME}${EXTRACT_SUFX})
IGNORE=	may not be redistributed because of licensing reasons. Please visit <replaceable>some-website</replaceable> to accept their license and download ${DISTFILES} into ${DISTDIR}
.endif</programlisting>

      <para xml:lang="en">This both informs the user, and sets the proper metadata
	on the user's machine for use by automated programs.</para>

      <para xml:lang="en">Note that this stanza must be preceded by an inclusion
	of <filename>bsd.port.pre.mk</filename>.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="building">
    <title xml:lang="en">Building Mechanisms</title>

    <sect2 xml:id="parallel-builds">
      <title xml:lang="en">Building Ports in Parallel</title>

      <para xml:lang="en">The FreeBSD ports framework supports parallel building
	using multiple <command>make</command> sub-processes, which
	allows <acronym>SMP</acronym> systems to utilize all of
	their available <acronym>CPU</acronym> power, allowing port
	builds to be faster and more effective.</para>

      <para xml:lang="en">This is achieved by passing <varname>-jX</varname> flag
	to <citerefentry><refentrytitle>make</refentrytitle><manvolnum>1</manvolnum></citerefentry> running on vendor code.  This is the default
	build behavior of ports.  Unfortunately, not all ports
	handle parallel building well and it may be required to
	explicitly disable this feature by adding the
	<literal>MAKE_JOBS_UNSAFE=yes</literal> variable.  It is
	used when a port is known to be broken with
	<varname>-jX</varname>.</para>
    </sect2>

    <sect2 xml:id="using-make">
      <title><command>make</command>, <command>gmake</command>, <command>fmake</command>, 和 <command>imake</command></title>

      <para xml:lang="en">Several differing <literal>make</literal>
	implementations exist.  Ported software often requires a
	particular implementation, like <acronym>GNU</acronym>
	<command>make</command>, known in FreeBSD as
	<command>gmake</command>, or <command>fmake</command>, the
	legacy FreeBSD <command>make</command>.</para>

      <para xml:lang="en">If the port uses <application>GNU make</application>,
	add <literal>gmake</literal> to <literal>USES</literal>.  If
	the legacy FreeBSD <command>make</command> is needed, add
	<literal>fmake</literal> there.</para>

      <para xml:lang="en"><varname>MAKE_CMD</varname> can be used to reference the
	specific command configured by the <literal>USES</literal>
	setting in the port's <filename>Makefile</filename>.  In
	rare cases when more than one <literal>make</literal>
	implementation is listed in <literal>USES</literal>, the
	variables <varname>GMAKE</varname> (for the
	<acronym>GNU</acronym> version) or <varname>FMAKE</varname>
	(for the legacy FreeBSD version) are available.
	Only use <varname>MAKE_CMD</varname> within the
	application <filename>Makefile</filename>s in
	<varname>WRKSRC</varname> to call the
	<command>make</command> implementation expected by the
	ported software.</para>

      <para xml:lang="en">If the port is an X application that uses
	<application>imake</application> to create
	<filename>Makefile</filename>s from
	<filename>Imakefile</filename>s, set <literal>USES=
	  imake</literal>..  See the <link linkend="uses-imake"><literal>USES=imake</literal></link>
	section of <xref linkend="uses"/> for more details.</para>

      <para xml:lang="en">If the port's source <filename>Makefile</filename> has
	something other than <buildtarget xml:lang="en">all</buildtarget> as the
	main build target, set <varname>ALL_TARGET</varname>
	accordingly.  The same goes for
	<buildtarget xml:lang="en">install</buildtarget> and
	<varname>INSTALL_TARGET</varname>.</para>
    </sect2>

    <sect2 xml:id="using-configure">
      <title xml:lang="en"><command>configure</command> Script</title>

      <para xml:lang="en">If the port uses the <command>configure</command>
	script to generate <filename>Makefile</filename> from
	<filename>Makefile.in</filename>, set
	<literal>GNU_CONFIGURE=yes</literal>.  To give
	extra arguments to the <command>configure</command> script
	(the default argument is <literal>--prefix=${PREFIX}
	  --infodir=${PREFIX}/${INFO_PATH}
	  --mandir=${MANPREFIX}/man
	  --build=${CONFIGURE_TARGET}</literal>), set those
	extra arguments in <varname>CONFIGURE_ARGS</varname>.  Extra
	environment variables can be passed using
	<varname>CONFIGURE_ENV</varname>.</para>

      <table frame="none" xml:id="using-configure-variables">
	<title xml:lang="en">Variables for Ports That Use
	  <command>configure</command></title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry xml:lang="en">Variable</entry>
	      <entry xml:lang="en">Means</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>GNU_CONFIGURE</varname></entry>
	      <entry xml:lang="en">The port uses <command>configure</command>
		script to prepare build.</entry>
	    </row>

	    <row>
	      <entry><varname>HAS_CONFIGURE</varname></entry>
	      <entry xml:lang="en">Same as <varname>GNU_CONFIGURE</varname>,
		except default configure target is not added to
		<varname>CONFIGURE_ARGS</varname>.</entry>
	    </row>

	    <row>
	      <entry><varname>CONFIGURE_ARGS</varname></entry>
	      <entry xml:lang="en">Additional arguments passed to
		<command>configure</command> script.</entry>
	    </row>

	    <row>
	      <entry><varname>CONFIGURE_ENV</varname></entry>
	      <entry xml:lang="en">Additional environment variables to be set
		for <command>configure</command> script run.</entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><varname>CONFIGURE_TARGET</varname></entry>
	      <entry xml:lang="en">Override default configure target.  Default
		value is
		<literal>${MACHINE_ARCH}-portbld-freebsd${OSREL}</literal>.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 xml:id="using-cmake">
      <title xml:lang="en">Using <command>cmake</command></title>

      <para xml:lang="en">For ports that use <application>CMake</application>,
	define <literal>USES= cmake</literal>, or
	<literal>USES= cmake:outsource</literal> to build in a
	separate directory (see below).</para>

      <table frame="none" xml:id="using-cmake-variables">
	<title xml:lang="en">Variables for Ports That Use
	  <command>cmake</command></title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry xml:lang="en">Variable</entry>
	      <entry xml:lang="en">Means</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>CMAKE_ARGS</varname></entry>
	      <entry xml:lang="en">Port specific <application>CMake</application>
		flags to be passed to the <command>cmake</command>
		binary.</entry>
	    </row>

	    <row>
	      <entry><varname>CMAKE_BUILD_TYPE</varname></entry>
	      <entry xml:lang="en">Type of build (<application>CMake</application>
		predefined build profiles).  Default is
		<literal>Release</literal>, or
		<literal>Debug</literal> if
		<varname>WITH_DEBUG</varname> is set.</entry>
	    </row>

	    <row>
	      <entry><varname>CMAKE_ENV</varname></entry>
	      <entry xml:lang="en">Environment variables to be set for the
		<command>cmake</command> binary.  Default is
		<literal>${CONFIGURE_ENV}</literal>.</entry>
	    </row>

	    <row>
	      <entry><varname>CMAKE_SOURCE_PATH</varname></entry>
	      <entry xml:lang="en">Path to the source directory.  Default is
		<literal>${WRKSRC}</literal>.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table frame="none" xml:id="using-cmake-user-variables">
	<title xml:lang="en">Variables the Users Can Define for
	  <command>cmake</command> Builds</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry xml:lang="en">Variable</entry>
	      <entry xml:lang="en">Means</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>CMAKE_VERBOSE</varname></entry>
	      <entry xml:lang="en">Enable verbose build output.  Default not set,
		unless <varname>BATCH</varname> or
		<varname>PACKAGE_BUILDING</varname> are set.</entry>
	    </row>

	    <row>
	      <entry><varname>CMAKE_NOCOLOR</varname></entry>
	      <entry xml:lang="en">Disables color build output.  Default not set,
		unless <varname>BATCH</varname> or
		<varname>PACKAGE_BUILDING</varname> are set.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para xml:lang="en"><application>CMake</application> supports these
	build profiles: <literal>Debug</literal>,
	<literal>Release</literal>,
	<literal>RelWithDebInfo</literal> and
	<literal>MinSizeRel</literal>.  <literal>Debug</literal> and
	<literal>Release</literal> profiles respect system
	<literal>*FLAGS</literal>, <literal>RelWithDebInfo</literal>
	and <literal>MinSizeRel</literal> will set
	<varname>CFLAGS</varname> to <literal>-O2 -g</literal> and
	<literal>-Os -DNDEBUG</literal> correspondingly.  The
	lower-cased value of <varname>CMAKE_BUILD_TYPE</varname> is
	exported to <varname>PLIST_SUB</varname> and must be
	used if the port installs
	<filename><replaceable>*</replaceable>.cmake</filename>
	depending on the build type (see
	<package role="port">deskutils/strigi</package> for an
	example).  Please note that some projects may define their own
	build profiles and/or force particular build type by setting
	<literal>CMAKE_BUILD_TYPE</literal> in
	<filename>CMakeLists.txt</filename>.  To make a port for such
	a project respect <varname>CFLAGS</varname> and
	<varname>WITH_DEBUG</varname>, the
	<literal>CMAKE_BUILD_TYPE</literal> definitions must be
	removed from those files.</para>

      <para xml:lang="en">Most <application>CMake</application>-based projects
	support an out-of-source method of building.  The
	out-of-source build for a port can be requested by using the
	<literal>:outsource</literal> suffix.  When enabled,
	<varname>CONFIGURE_WRKSRC</varname>,
	<varname>BUILD_WRKSRC</varname> and
	<varname>INSTALL_WRKSRC</varname> will be set to
	<literal>${WRKDIR}/.build</literal> and this
	directory will be used to keep all files generated during
	configuration and build stages, leaving the source directory
	intact.</para>

      <example xml:id="using-cmake-example">
	<title xml:lang="en"><literal>USES= cmake</literal> Example</title>

	<para xml:lang="en">This snippet demonstrates the use of
	  <application>CMake</application> for a port.
	  <varname>CMAKE_SOURCE_PATH</varname> is not usually
	  required, but can be set when the sources are not located
	  in the top directory, or if only a subset of the project
	  is intended to be built by the port.</para>

	<programlisting xml:lang="en">USES=			cmake:outsource
CMAKE_SOURCE_PATH=	${WRKSRC}/subproject</programlisting>
      </example>
    </sect2>

    <sect2 xml:id="using-scons">
      <title xml:lang="en">Using <command>scons</command></title>

      <para xml:lang="en">If the port uses <application>SCons</application>,
	define <literal>USE_SCONS=yes</literal>.</para>

      <table frame="none" xml:id="using-scons-variables">
	<title xml:lang="en">Variables for Ports That Use
	  <command>scons</command></title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry xml:lang="en">Variable</entry>
	      <entry xml:lang="en">Means</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>SCONS_ARGS</varname></entry>
	      <entry xml:lang="en">Port specific SCons flags passed to the SCons
		environment.</entry>
	    </row>

	    <row>
	      <entry><varname>SCONS_BUILDENV</varname></entry>
	      <entry xml:lang="en">Variables to be set in system
		environment.</entry>
	    </row>

	    <row>
	      <entry><varname>SCONS_ENV</varname></entry>
	      <entry xml:lang="en">Variables to be set in SCons
		environment.</entry>
	    </row>

	    <row>
	      <entry><varname>SCONS_TARGET</varname></entry>
	      <entry xml:lang="en">Last argument passed to SCons, similar to
		<varname>MAKE_TARGET</varname>.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para xml:lang="en">To make third party <filename>SConstruct</filename>
	respect everything that is passed to SCons in
	<varname>SCONS_ENV</varname> (that is, most importantly,
	<varname>CC/CXX/CFLAGS/CXXFLAGS</varname>), patch
	<filename>SConstruct</filename> so build
	<literal>Environment</literal> is constructed like
	this:</para>

      <programlisting xml:lang="en">env = Environment(**ARGUMENTS)</programlisting>

      <para xml:lang="en">It may be then modified with
	<literal>env.Append</literal> and
	<literal>env.Replace</literal>.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="using-autotools">
    <title>使用 GNU Autotools</title>

    <sect2 xml:id="using-autotools-introduction">
      <title>楔子</title>

      <para xml:lang="en">The various GNU autotools provide an abstraction
	mechanism for building a piece of software over a wide
	variety of operating systems and machine architectures.
	Within the Ports Collection, an individual port can make use
	of these tools via a simple construct:</para>

      <programlisting xml:lang="en">USE_AUTOTOOLS=	<replaceable>tool</replaceable>[:env] ...</programlisting>

      <para xml:lang="en">At the time of writing, <replaceable>tool</replaceable>
	can be one of <literal>autoconf</literal>,
	<literal>autoheader</literal>, <literal>automake</literal>,
	<literal>aclocal</literal>, <literal>libtoolize</literal>.
	It can also be one the older
	legacy of <literal>autoconf213</literal>,
	<literal>autoheader213</literal>,
	<literal>automake14</literal>,
	<literal>aclocal14</literal>.</para>

      <para xml:lang="en"><replaceable>env</replaceable> is used to specify that the
	environmental variables are needed.  It also adds a build
	dependency on the tool.  The relevant tool is
	<emphasis>not</emphasis> ran as part of the
	<buildtarget xml:lang="en">run-autotools</buildtarget> target.</para>

      <para xml:lang="en">Multiple tools can be specified at once, either by
	including them all on a single line, or using the
	<literal>+=</literal> Makefile construct.</para>
    </sect2>

    <sect2 xml:id="using-libtool">
      <title xml:lang="en"><command>libtool</command> and
	<command>libtoolize</command></title>

      <para xml:lang="en">Ports shipping with their own copy of libtool (search for
	a file named ltmain.sh) need to have
	<literal>USES=libtool</literal>.  If a port has
	<literal>USE_AUTOTOOLS=libtoolize</literal> it probably also
	needs <literal>USES=libtool</literal>.  See the <link linkend="uses-libtool">USES=libtool</link> section in <xref linkend="uses"/> for more details.</para>

    </sect2>

    <sect2 xml:id="using-libltdl">
      <title xml:lang="en"><filename>libltdl.so</filename></title>

      <para xml:lang="en">Some ports make use of the <filename>libltdl.so</filename>
	library package, which is part of the
	<command>libtool</command> suite.  Use of this library does
	not automatically necessitate the use of
	<command>libtool</command> itself.  If the port needs
	<filename>libltdl.so</filename>, add a dependency on
	it:</para>

      <programlisting xml:lang="en">LIB_DEPENDS=	libltdl.so:${PORTSDIR}/devel/libltdl</programlisting>
    </sect2>

    <sect2 xml:id="using-autoconf">
      <title xml:lang="en"><command>autoconf</command> and
	<command>autoheader</command></title>

      <para xml:lang="en">Some ports do not contain a configure script, but do
	contain an autoconf template in
	<filename>configure.ac</filename>.  Use these
	assignments to let <command>autoconf</command>
	create the configure script, and also have
	<command>autoheader</command> create template headers for
	use by the configure script.</para>

      <programlisting xml:lang="en">USE_AUTOTOOLS=	autoconf[:env]</programlisting>

      <para xml:lang="en">and</para>

      <programlisting xml:lang="en">USE_AUTOTOOLS=	autoheader</programlisting>

      <para xml:lang="en">which also implies the use of
	<literal>autoconf</literal>.</para>

      <para xml:lang="en">The additional optional variables
	<varname>AUTOCONF_ARGS</varname> and
	<varname>AUTOHEADER_ARGS</varname> can be overridden by the
	port <filename>Makefile</filename> if specifically
	requested.  Most ports are unlikely to need this.  See
	<filename>bsd.autotools.mk</filename> for further
	details.</para>
    </sect2>

    <sect2 xml:id="using-automake">
      <title xml:lang="en"><command>automake</command> and
	<command>aclocal</command></title>

      <para xml:lang="en">Some packages only contain
	<filename>Makefile.am</filename>.  These have to be
	converted into <filename>Makefile.in</filename> using
	<command>automake</command>, and the further processed by
	<command>configure</command> to generate an actual
	<filename>Makefile</filename>.</para>

      <para xml:lang="en">Similarly, packages occasionally do not ship with
	an included <filename>aclocal.m4</filename>, again
	required to build the software.  This can be achieved with
	<command>aclocal</command>, which scans
	<filename>configure.ac</filename> or
	<filename>configure.in</filename>.</para>

      <para xml:lang="en"><command>aclocal</command> has a similar relationship to
	<command>automake</command> as <command>autoheader</command>
	does to <command>autoconf</command>, described in the
	previous section.  <command>aclocal</command> implies the
	use of <command>automake</command>, thus we have:</para>

      <programlisting xml:lang="en">USE_AUTOTOOLS=	automake[:<replaceable>env</replaceable>]</programlisting>

      <para xml:lang="en">and</para>

      <programlisting xml:lang="en">USE_AUTOTOOLS=	aclocal</programlisting>

      <para xml:lang="en">As with <command>autoconf</command> and
	<command>autoheader</command>, both
	<command>automake</command> and <command>aclocal</command>
	have optional argument variables,
	<varname>AUTOMAKE_ARGS</varname> and
	<varname>ACLOCAL_ARGS</varname> respectively, which may be
	overridden by the port <filename>Makefile</filename> if
	required.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="using-gettext">
    <title>使用 GNU <literal>gettext</literal></title>

    <sect2 xml:id="using-gettext-basic">
      <title>基本用法</title>

      <para xml:lang="en">If the port requires <literal>gettext</literal>, set
	<literal>USES= gettext</literal>, and the port will inherit
	a dependency on <filename>libintl.so</filename> from
	<package role="port">devel/gettext</package>.  Other
	values for <literal>gettext</literal> usage are listed in
	<link linkend="uses-gettext"><literal>USES=gettext</literal></link>.</para>

      <para xml:lang="en">A rather common case is a port using
	<literal>gettext</literal> and <command>configure</command>.
	Generally, GNU <command>configure</command> should be able
	to locate <literal>gettext</literal> automatically.</para>

      <programlisting>USES=	gettext
GNU_CONFIGURE=	yes</programlisting>

      <para xml:lang="en">If it ever fails to, hints at the location of
	<literal>gettext</literal> can be passed in
	<envar>CPPFLAGS</envar> and <envar>LDFLAGS</envar> as
	follows:</para>

      <programlisting>USES=	gettext
CPPFLAGS+=	-I${LOCALBASE}/include
LDFLAGS+=	-L${LOCALBASE}/lib

GNU_CONFIGURE=	yes</programlisting>
    </sect2>

    <sect2 xml:id="using-gettext-optional">
      <title xml:lang="en">Optional Usage</title>

      <para xml:lang="en">Some software products allow for disabling
	<acronym>NLS</acronym>.  For example, through passing
	<option>--disable-nls</option> to
	<command>configure</command>.  In that case, the port must use
	<literal>gettext</literal> conditionally, depending on the
	status of the <literal>NLS</literal> option.  For ports of low
	to medium complexity, use this idiom:</para>

      <programlisting>GNU_CONFIGURE=		yes

OPTIONS_DEFINE=		NLS
OPTIONS_SUB=		yes

NLS_USES=		gettext
NLS_CONFIGURE_ENABLE=	nls

.include &lt;bsd.port.mk&gt;</programlisting>

      <para xml:lang="en">Or using the older way of using options:</para>

      <programlisting>GNU_CONFIGURE=		yes

OPTIONS_DEFINE=		NLS

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MNLS}
USES+=			gettext
PLIST_SUB+=		NLS=""
.else
CONFIGURE_ARGS+=	--disable-nls
PLIST_SUB+=		NLS="@comment "
.endif

.include &lt;bsd.port.mk&gt;</programlisting>

      <para xml:lang="en">The next item on the to-do list is to arrange so that
	the message catalog files are included in the packing list
	conditionally.  The <filename>Makefile</filename> part of
	this task is already provided by the idiom.  It is explained
	in the section on <link linkend="plist-sub">advanced
	  <filename>pkg-plist</filename> practices</link>.  In a
	nutshell, each occurrence of <literal>%%NLS%%</literal> in
	<filename>pkg-plist</filename> will be replaced by
	<quote><literal>@comment </literal></quote> if NLS is
	disabled, or by a null string if NLS is enabled.
	Consequently, the lines prefixed by
	<literal>%%NLS%%</literal> will become mere comments in the
	final packing list if NLS is off; otherwise the prefix will
	be just left out.  Then insert
	<literal>%%NLS%%</literal> before each path to a message
	catalog file in <filename>pkg-plist</filename>.  For
	example:</para>

      <programlisting>%%NLS%%share/locale/fr/LC_MESSAGES/foobar.mo
%%NLS%%share/locale/no/LC_MESSAGES/foobar.mo</programlisting>

      <para xml:lang="en">In high complexity cases, more advanced techniques
	may be needed, such as
	<link linkend="plist-dynamic">dynamic packing list
	  generation</link>.</para>
    </sect2>

    <sect2 xml:id="using-gettext-catalog-directories">
      <title xml:lang="en">Handling Message Catalog Directories</title>

      <para xml:lang="en">There is a point to note about installing message
	catalog files.  The target directories for them, which
	reside under
	<filename>LOCALBASE/share/locale</filename>,
	must not be created and removed by a port.  The most
	popular languages have their respective directories listed
	in
	<filename>PORTSDIR/Templates/BSD.local.dist</filename>.
	The directories for many other languages are governed by the
	<package role="port">devel/gettext</package> port.
	Consult its <filename>pkg-plist</filename> and see whether
	the port is going to install a message catalog file for a
	unique language.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="using-perl">
    <title>使用 <application>Perl</application></title>

    <para xml:lang="en">If <varname>MASTER_SITES</varname> is set to
      <literal>CPAN</literal>, the correct subdirectory is usually
      selected automatically.  If the default subdirectory is wrong,
      <literal>CPAN/Module</literal> can be used to change it.
      <varname>MASTER_SITES</varname> can also be set to the old
      <varname>MASTER_SITE_PERL_CPAN</varname>, then the preferred
      value of <varname>MASTER_SITE_SUBDIR</varname> is the
      top-level hierarchy name.  For example, the recommended value
      for <literal>p5-Module-Name</literal> is
      <literal>Module</literal>.  The top-level hierarchy can be
      examined at <link xlink:href="http://cpan.org/modules/by-module/">cpan.org</link>.
      This keeps the port working when the author of the module
      changes.</para>

    <para xml:lang="en">The exception to this rule is when the relevant directory
      does not exist or the distfile does not exist in that
      directory.  In such case, using author's id as
      <varname>MASTER_SITE_SUBDIR</varname> is allowed.
      The <literal>CPAN:AUTHOR</literal> macro can be used, which will
      be translated to the hashed author directory.  For example,
      <literal>CPAN:AUTHOR</literal> will be converted to
      <literal>authors/id/A/AU/AUTHOR</literal>.</para>

    <para xml:lang="en">When a port needs <application>Perl</application> support,
      it must set <literal>USES=perl5</literal> with the optional
      <varname>USE_PERL5</varname> described in <link linkend="uses-perl5">the perl5 USES description</link>.</para>

    <table frame="none" xml:id="using-perl-variables">
      <title xml:lang="en">Read-Only Variables for Ports That Use
	<application>Perl</application></title>

      <tgroup cols="2">
	<thead>
	  <row>
	    <entry>唯讀變數</entry>
	    <entry xml:lang="en">Means</entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><varname>PERL</varname></entry>
	    <entry xml:lang="en">The full path of the Perl 5 interpreter,
	      either in the system or installed from a port, but
	      without the version number.  Use this when the software
	      needs the path to the <application>Perl</application>
	      interpreter.  To replace
	      <quote><literal>#!</literal></quote>lines in scripts,
	      use <link linkend="uses-shebangfix">USES=shebangfix</link>.</entry>
	  </row>

	  <row>
	    <entry><varname>PERL_VERSION</varname></entry>
	    <entry xml:lang="en">The full version of Perl installed (for example,
	      <literal>5.8.9</literal>).</entry>
	  </row>

	  <row>
	    <entry><varname>PERL_LEVEL</varname></entry>
	    <entry xml:lang="en">The installed Perl version as
	      an integer of the form <literal>MNNNPP</literal>
	      (for example, <literal>500809</literal>).</entry>
	  </row>

	  <row>
	    <entry><varname>PERL_ARCH</varname></entry>
	    <entry xml:lang="en">Where Perl stores architecture
	      dependent libraries.  Defaults to
	      <literal>${ARCH}-freebsd</literal>.</entry>
	  </row>

	  <row>
	    <entry><varname>PERL_PORT</varname></entry>
	    <entry xml:lang="en">Name of the Perl port that is installed (for
	      example, <literal>perl5</literal>).</entry>
	  </row>

	  <row>
	    <entry><varname>SITE_PERL</varname></entry>
	    <entry xml:lang="en">Directory name where site specific
	      Perl packages go.  This value is
	      added to <varname>PLIST_SUB</varname>.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <note>
      <para xml:lang="en">Ports of Perl modules which do not have an official
	website must link to <systemitem>cpan.org</systemitem> in
	the WWW line of <filename>pkg-descr</filename>.  The
	preferred URL form is
	<literal>http://search.cpan.org/dist/Module-Name/</literal>
	(including the trailing slash).</para>
    </note>

    <note>
      <para xml:lang="en">Do not use <literal>${SITE_PERL}</literal> in dependency
	declarations.  Doing so assumes that
	<filename>perl5.mk</filename> has been included, which is
	not always true.  Ports depending on this port will have
	incorrect dependencies if this port's files move later in an
	upgrade.  The right way to declare Perl module dependencies
	is shown in the example below.</para>
    </note>

    <example xml:id="use-perl-dependency-example">
      <title>Perl 相依性範例</title>

      <programlisting>p5-IO-Tee&gt;=0.64:${PORTSDIR}/devel/p5-IO-Tee</programlisting>
    </example>

    <para xml:lang="en">For Perl ports that install manual pages, the macro
      <varname>PERL5_MAN3</varname> can be used
      inside <filename>pkg-plist</filename>.  For example,</para>

    <programlisting>lib/perl5/5.14/man/man3/AnyEvent::I3.3.gz</programlisting>

    <para xml:lang="en">can be replaced with</para>

    <programlisting>%%PERL5_MAN3%%/AnyEvent::I3.3.gz</programlisting>

    <note>
      <para xml:lang="en">There are no <varname>PERL5_MANx</varname> macros for the
	other sections (<replaceable>x</replaceable> in
	<literal>1</literal>, <literal>2</literal> and
	<literal>4</literal> to <literal>9</literal>) because those
	get installed in the regular directories.</para>
    </note>
  </sect1>

  <sect1 xml:id="using-x11">
    <title>使用 X11</title>

    <sect2 xml:id="x11-variables">
      <title xml:lang="en">X.Org Components</title>

      <para xml:lang="en">The X11 implementation available in The Ports Collection
	is X.Org.  If the application depends on X components, set
	<varname>USE_XORG</varname> to the list of required
	components.  Available components, at the time of writing,
	are:</para>

      <para xml:lang="en"><literal>bigreqsproto compositeproto damageproto dmx
	  dmxproto dri2proto dri3proto evieproto fixesproto
	  fontcacheproto fontenc fontsproto fontutil glproto ice
	  inputproto kbproto libfs oldx pciaccess pixman presentproto
	  printproto randrproto recordproto renderproto resourceproto
	  scrnsaverproto sm trapproto videoproto x11 xau xaw xaw6 xaw7
	  xbitmaps xcb xcmiscproto xcomposite xcursor xdamage xdmcp
	  xevie xext xextproto xf86bigfontproto xf86dgaproto
	  xf86driproto xf86miscproto xf86rushproto xf86vidmodeproto
	  xfixes xfont xfontcache xft xi xinerama xineramaproto
	  xkbfile xkbui xmu xmuu xorg-macros xorg-server xp xpm
	  xprintapputil xprintutil xproto xproxymngproto xrandr
	  xrender xres xscrnsaver xshmfence xt xtrans xtrap xtst xv
	  xvmc xxf86dga xxf86misc xxf86vm</literal>.</para>

      <para xml:lang="en">Always up-to-date list can be found in
	<filename>/usr/ports/Mk/bsd.xorg.mk</filename>.</para>

      <para xml:lang="en">The Mesa Project is an effort to provide free OpenGL
	implementation.  To specify a dependency on various
	components of this project, use <varname>USE_GL</varname>.
	Valid options are:
	<literal>egl, gl, glesv2, glew, glu, glut, glw</literal> and
	<literal>linux</literal>.  For backwards compatibility, the
	value of <literal>yes</literal> maps to
	<literal>glu</literal>.</para>

      <example xml:id="use-xorg-example">
	<title><varname>USE_XORG</varname> 範例</title>

	<programlisting xml:lang="en">USE_XORG=	xrender xft xkbfile xt xaw
USE_GL=		glu</programlisting>
      </example>

      <table frame="none" xml:id="using-xorg-variables">
	<title xml:lang="en">Variables for Ports That Use X</title>

	<tgroup cols="2">
	  <tbody>
	    <row>
	      <entry xml:lang="en"><varname>USES= imake</varname></entry>
	      <entry xml:lang="en">The port uses <command>imake</command>.</entry>
	    </row>

	    <row>
	      <entry><varname>XMKMF</varname></entry>
	      <entry xml:lang="en">Set to the path of <command>xmkmf</command> if
		not in the <envar>PATH</envar>.  Defaults to
		<literal>xmkmf -a</literal>.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <example xml:id="using-x11-vars">
	<title>使用 X11 相關變數</title>

	<programlisting># Use some X11 libraries
USE_XORG=	x11 xpm</programlisting>
      </example>
    </sect2>

    <sect2 xml:id="x11-motif">
      <title xml:lang="en">Ports That Require Motif</title>

      <para xml:lang="en">If the port requires a Motif library, define
	<varname>USES= motif</varname> in the
	<filename>Makefile</filename>.  Default Motif implementation
	is
	<package role="port">x11-toolkits/open-motif</package>.
	Users can choose
	<package role="port">x11-toolkits/lesstif</package>
	instead by setting <varname>WANT_LESSTIF</varname>
	in their <filename>make.conf</filename>.</para>

      <para xml:lang="en"><varname>MOTIFLIB</varname> will be set by
	<filename>motif.mk</filename> to reference the
	appropriate Motif library.  Please patch the source of the
	port to use <literal>${MOTIFLIB}</literal> wherever
	the Motif library is referenced in the original
	<filename>Makefile</filename> or
	<filename>Imakefile</filename>.</para>

      <para xml:lang="en">There are two common cases:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en">If the port refers to the Motif library as
	    <literal>-lXm</literal> in its
	    <filename>Makefile</filename> or
	    <filename>Imakefile</filename>, substitute
	    <literal>${MOTIFLIB}</literal> for it.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">If the port uses <literal>XmClientLibs</literal> in
	    its <filename>Imakefile</filename>, change it to
	    <literal>${MOTIFLIB} ${XTOOLLIB}
	      ${XLIB}</literal>.</para>
	</listitem>
      </itemizedlist>

      <para xml:lang="en">Note that <varname>MOTIFLIB</varname> (usually) expands
	to <literal>-L/usr/local/lib -lXm -lXp</literal> or
	<literal>/usr/local/lib/libXm.a</literal>, so there is no
	need to add <literal>-L</literal> or <literal>-l</literal>
	in front.</para>
    </sect2>

    <sect2 xml:id="x11-fonts">
      <title>X11 字型</title>

      <para xml:lang="en">If the port installs fonts for the X Window System, put
	them in
	<filename>LOCALBASE/lib/X11/fonts/local</filename>.</para>
    </sect2>

    <sect2 xml:id="x11-fake-display">
      <title xml:lang="en">Getting a Fake <envar>DISPLAY</envar> with Xvfb</title>

      <para xml:lang="en">Some applications require a working X11 display for
	compilation to succeed.  This pose a problem for machines
	that operate headless.  When this variable is used,
	the build infrastructure will start the virtual framebuffer
	X server.  The working <envar>DISPLAY</envar> is then passed
	to the build.  See <link linkend="uses-display"><literal>USES=display</literal></link>
	for the possible arguments.</para>

      <programlisting>USES=	display</programlisting>
    </sect2>

    <sect2 xml:id="desktop-entries">
      <title xml:lang="en">Desktop Entries</title>

      <para xml:lang="en">Desktop entries (<link xlink:href="http://standards.freedesktop.org/desktop-entry-spec/latest/">a
	  Freedesktop standard</link>) provide a way to
	automatically adjust desktop features when a new program is
	installed, without requiring user intervention.  For
	example, newly-installed programs automatically appear in
	the application menus of compatible desktop environments.
	Desktop entries originated in the
	<application>GNOME</application> desktop environment, but
	are now a standard and also work with
	<application>KDE</application> and
	<application>Xfce</application>.  This bit of automation
	provides a real benefit to the user, and desktop entries are
	encouraged for applications which can be used in a desktop
	environment.</para>

      <sect3 xml:id="desktop-entries-predefined">
	<title xml:lang="en">Using Predefined <filename>.desktop</filename>
	  Files</title>

	<para xml:lang="en">Ports that include predefined
	  <filename><replaceable>*</replaceable>.desktop</filename>
	  must include those files in <filename>pkg-plist</filename>
	  and install them in the
	  <filename>$LOCALBASE/share/applications</filename>
	  directory.  The <link linkend="install-macros"><varname>INSTALL_DATA</varname>
	    macro</link> is useful for installing these
	  files.</para>
      </sect3>

      <sect3 xml:id="updating-desktop-database">
	<title xml:lang="en">Updating Desktop Database</title>

	<para xml:lang="en">If a port has a MimeType entry in its
	  <filename><replaceable>portname</replaceable>.desktop</filename>,
	  the desktop database must be updated after install and
	  deinstall.  To do this, define <varname>USES</varname>=
	  desktop-file-utils.</para>
      </sect3>

      <sect3 xml:id="desktop-entries-macro">
	<title xml:lang="en">Creating Desktop Entries with
	  <varname>DESKTOP_ENTRIES</varname></title>

	<para xml:lang="en">Desktop entries can be easily created for applications
	  by using <varname>DESKTOP_ENTRIES</varname>.  A
	  file named
	  <filename><replaceable>name</replaceable>.desktop</filename>
	  will be created, installed, and added to
	  <filename>pkg-plist</filename> automatically.  Syntax
	  is:</para>

	<programlisting xml:lang="en">DESKTOP_ENTRIES=	"NAME" "COMMENT" "ICON" "COMMAND" "CATEGORY" StartupNotify</programlisting>

	<para xml:lang="en">The list of possible categories is available on the
	  <link xlink:href="http://standards.freedesktop.org/menu-spec/latest/apa.html">Freedesktop
	    website</link>.  <varname>StartupNotify</varname>
	  indicates whether the application is compatible with
	  <emphasis>startup notifications</emphasis>.  These are
	  typically a graphic indicator like a clock that appear at
	  the mouse pointer, menu, or panel to give the user an
	  indication when a program is starting.  A program that is
	  compatible with startup notifications clears the indicator
	  after it has started.  Programs that are not compatible
	  with startup notifications would never clear the indicator
	  (potentially confusing and infuriating the user), and
	  must have <varname>StartupNotify</varname> set to
	  <literal>false</literal> so the indicator is not shown at
	  all.</para>

	<para xml:lang="en">Example:</para>

	<programlisting xml:lang="en">DESKTOP_ENTRIES=	"ToME" "Roguelike game based on JRR Tolkien's work" \
			"${DATADIR}/xtra/graf/tome-128.png" \
			"tome -v -g" "Application;Game;RolePlaying;" \
			false</programlisting>
      </sect3>
    </sect2>
  </sect1>

  <sect1 xml:id="using-gnome">
    <title>使用 GNOME</title>

    <sect2>
      <title>楔子</title>

      <para xml:lang="en">This chapter explains the <acronym>GNOME</acronym>
	framework as used by ports.  The framework can be loosely
	divided into the base components, <acronym>GNOME</acronym>
	desktop components, and a few special macros that simplify the
	work of port maintainers.</para>

      <para xml:lang="en">While developing a port or changing one, please set</para>

      <programlisting>DEVELOPER=yes</programlisting>

      <para xml:lang="en">
	in the environment or in <filename>/etc/make.conf</filename>.
	This causes the ports framework to enable additional
	checks.</para>
    </sect2>

    <sect2 xml:id="use-gnome">
      <title xml:lang="en">Using <varname>USE_GNOME</varname></title>

      <para xml:lang="en">Adding this variable to the port allows the use of
	the macros and components defined in
	<filename>bsd.gnome.mk</filename>.  The code in
	<filename>bsd.gnome.mk</filename> adds the needed
	build-time, run-time or library dependencies
	or the handling of special files.
	<acronym>GNOME</acronym> applications under FreeBSD use the
	<varname>USE_GNOME</varname> infrastructure.  Include all the
	needed components as a space-separated list.  The
	<varname>USE_GNOME</varname> components are divided into
	these virtual lists: basic components, GNOME 3 components
	and legacy components.  If the port needs only GTK3 libraries,
	this is the shortest way to define it:</para>

      <programlisting>USE_GNOME=	gtk30</programlisting>

      <para xml:lang="en"><varname>USE_GNOME</varname> components automatically
	add the dependencies they need.  Please see
	<xref linkend="gnome-components"/> for an exhaustive
	list of all <varname>USE_GNOME</varname> components and which
	other components they imply and their dependencies.</para>

      <para xml:lang="en">Here is an example <filename>Makefile</filename> for a
	GNOME port that uses many of the techniques outlined in this
	document.  Please use it as a guide for creating new
	ports.</para>

      <programlisting># $FreeBSD$

PORTNAME=	 regexxer
PORTVERSION=	 0.10
CATEGORIES=	 devel textproc gnome
MASTER_SITES=	 GNOME

MAINTAINER=	 kwm@FreeBSD.org
COMMENT=	 Interactive tool for performing search and replace operations

USES=		 gettext gmake pathfix pkgconfig tar:xz
GNU_CONFIGURE=	yes
USE_GNOME=	 gnomeprefix intlhack gtksourceviewmm3
CPPFLAGS+=	 -I${LOCALBASE}/include
LDFLAGS+=	 -L${LOCALBASE}/lib
INSTALLS_ICONS= yes

GLIB_SCHEMAS=	 org.regexxer.gschema.xml

.include &lt;bsd.port.mk&gt;</programlisting>

      <note>
	<para xml:lang="en">The <varname>USE_GNOME</varname> macro without any
	  arguments does not add any dependencies to the port.
	  <varname>USE_GNOME</varname> cannot be set after
	  <filename>bsd.port.pre.mk</filename>.</para>
      </note>
    </sect2>

    <sect2>
      <title>變數</title>

      <para xml:lang="en">This section explains which macros are available and how
	they are used.  Like they are used in the above example.  The
	<xref linkend="gnome-components"/> has a more in-depth
	explanation.  <varname>USE_GNOME</varname> has to be set for
	these macros to be of use.</para>

      <variablelist>
	<varlistentry>
	  <term xml:id="gnome-icons"><varname>INSTALLS_ICONS</varname></term>

	  <listitem>
	    <para xml:lang="en"><application>GTK+</application> ports which install
	      <application>Freedesktop</application>-style icons to
	      <filename>${LOCALBASE}/share/icons</filename> should use
	      this macro to ensure that the icons are cached and will
	      display correctly.  The cache file is named
	      <filename>icon-theme.cache</filename>.  Do not include
	      that file in <filename>pkg-plist</filename>.  This macro
	      handles that automatically.  This macro is not needed
	      for <application>Qt</application>, which use a
	      internal method.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:id="gnome-glibschema"><varname>GLIB_SCHEMAS</varname></term>

	  <listitem>
	    <para xml:lang="en">List of all the glib schema files the port installs.
	      The macro will add the files to the port plist and
	      handle the registration of these files on install and
	      deinstall.</para>

	    <para xml:lang="en">The glib schema files are written in
	      <acronym>XML</acronym> and end with the
	      <filename>gschema.xml</filename> extension.  They are
	      installed in the
	      <filename>share/glib-2.0/schemas/</filename> directory.
	      These schema files contain all application config values
	      with there default settings.  The actual database used
	      by the applications is built by
	      <application>glib-compile-schema</application>, which is
	      run by the <varname>GLIB_SCHEMAS</varname> macro.</para>

	    <programlisting>GLIB_SCHEMAS=foo.gschema.xml</programlisting>

	    <note>
	      <para xml:lang="en">Do not add glib schemas to the
		<filename>pkg-plist</filename>.  If they are listed in
		<filename>pkg-plist</filename>, they will not be
		registered and the applications might not work
		properly.</para>
	    </note>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:id="gnome-gconfschema"><varname>GCONF_SCHEMAS</varname></term>

	  <listitem>
	    <para xml:lang="en">List all the gconf schema files.  The macro will add
	      the schema files to the port plist and will handle their
	      registration on install and deinstall.</para>

	    <para xml:lang="en">GConf is the <acronym>XML</acronym>-based database
	      that virtually all GNOME applications use for storing
	      their settings.  These files are installed into the
	      <filename>etc/gconf/schemas</filename> directory.  This
	      database is defined by installed schema files that are
	      used to generate <filename>%gconf.xml</filename> key
	      files.  For each schema file installed by the port,
	      there be an entry in the
	      <filename>Makefile</filename>:</para>

	    <programlisting xml:lang="en">GCONF_SCHEMAS=my_app.schemas my_app2.schemas my_app3.schemas</programlisting>

	    <note>
	      <para xml:lang="en">Gconf schemas are listed in the
		<varname>GCONF_SCHEMAS</varname> macro rather than
		<filename>pkg-plist</filename>.  If they are listed in
		<filename>pkg-plist</filename>, they will not be
		registered and the applications might not work
		properly.</para>
	    </note>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:id="gnome-omf"><varname>INSTALLS_OMF</varname></term>

	  <listitem>
	    <para xml:lang="en">Open Source Metadata Framework
	      (<acronym>OMF</acronym>) files are commonly used by
	      GNOME 2 applications.  These files contain the
	      application help file information, and require special
	      processing by ScrollKeeper/rarian.  To properly register
	      <acronym>OMF</acronym> files when installing GNOME
	      applications from packages, make sure that
	      <varname>omf</varname> files are listed in
	      <varname>pkg-plist</varname> and that the port
	      <filename>Makefile</filename> has
	      <varname>INSTALLS_OMF</varname> defined:</para>

	    <programlisting>INSTALLS_OMF=yes</programlisting>

	    <para xml:lang="en">When set, <filename>bsd.gnome.mk</filename>
	      automatically scans <filename>pkg-plist</filename> and
	      adds appropriate <literal>@exec</literal> and
	      <literal>@unexec</literal> directives for each
	      <filename>.omf</filename> to track in the
	      <acronym>OMF</acronym> registration database.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <sect1 xml:id="gnome-components">
    <title>GNOME 元件</title>

    <para xml:lang="en">For further help with a GNOME port, look at some of the
      <link xlink:href="@@URL_RELPREFIX@@/ports/gnome.html">existing
	ports</link> for examples.  The
      <link xlink:href="@@URL_RELPREFIX@@/gnome/">FreeBSD GNOME
	page</link> has contact information if more help is
      needed.  The components are divided into GNOME components
      that are currently in use and legacy components.  If the
      component supports argument, they are listed between
      parenthesis in the description.  The first is the default.
      "Both" is shown if the component defaults to adding to both
      build and run dependencies.</para>

    <table xml:id="gnome-components-list">
      <title>GNOME 元件</title>

      <tgroup cols="3">
	<thead>
	  <row>
	    <entry>元件</entry>
	    <entry>相關程式</entry>
	    <entry>描述</entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><literal>atk</literal></entry>
	    <entry>accessibility/atk</entry>
	    <entry xml:lang="en">Accessibility toolkit (ATK)</entry>
	  </row>

	  <row>
	    <entry><literal>atkmm</literal></entry>
	    <entry>accessibility/atkmm</entry>
	    <entry xml:lang="en">c++ bindings for atk</entry>
	  </row>

	  <row>
	    <entry><literal>cairo</literal></entry>
	    <entry>graphics/cairo</entry>
	    <entry xml:lang="en">Vector graphics library with cross-device output
	      support</entry>
	  </row>

	  <row>
	    <entry><literal>cairomm</literal></entry>
	    <entry>graphics/cairomm</entry>
	    <entry xml:lang="en">c++ bindings for cairo</entry>
	  </row>

	  <row>
	    <entry><literal>dconf</literal></entry>
	    <entry>devel/dconf</entry>
	    <entry xml:lang="en">Configuration database system
	      (both, build, run)</entry>
	  </row>

	  <row>
	    <entry><literal>evolutiondataserver3</literal></entry>
	    <entry xml:lang="en">databases/evolution-data-server</entry>
	    <entry xml:lang="en">Data backends for the Evolution integrated
	      mail/PIM suite</entry>
	  </row>

	  <row>
	    <entry><literal>gdkpixbuf2</literal></entry>
	    <entry>graphics/gdk-pixbuf2</entry>
	    <entry xml:lang="en">Graphics library for GTK+</entry>
	  </row>

	  <row>
	    <entry><literal>glib20</literal></entry>
	    <entry>devel/glib20</entry>
	    <entry xml:lang="en">GNOME core library
	      <literal>glib20</literal></entry>
	  </row>

	  <row>
	    <entry><literal>glibmm</literal></entry>
	    <entry>devel/glibmm</entry>
	    <entry xml:lang="en">c++ bindings for glib20</entry>
	  </row>

	  <row>
	    <entry><literal>gnomecontrolcenter3</literal></entry>
	    <entry>sysutils/gnome-control-center</entry>
	    <entry xml:lang="en">GNOME 3 Control Center</entry>
	  </row>

	  <row>
	    <entry><literal>gnomedesktop3</literal></entry>
	    <entry>x11/gnome-desktop</entry>
	    <entry>GNOME 3 桌面 UI 函式庫</entry>
	  </row>

	  <row>
	    <entry><literal>gsound</literal></entry>
	    <entry>audio/gsound</entry>
	    <entry xml:lang="en">GObject library for playing system sounds
	      (both, build, run)</entry>
	  </row>

	  <row>
	    <entry><literal>gtk-update-icon-cache</literal></entry>
	    <entry>graphics/gtk-update-icon-cache</entry>
	    <entry xml:lang="en">Gtk-update-icon-cache utility from the Gtk+
	      toolkit</entry>
	  </row>

	  <row>
	    <entry><literal>gtk20</literal></entry>
	    <entry>x11-toolkits/gtk20</entry>
	    <entry xml:lang="en">Gtk+ 2 toolkit</entry>
	  </row>

	  <row>
	    <entry><literal>gtk30</literal></entry>
	    <entry>x11-toolkits/gtk30</entry>
	    <entry xml:lang="en">Gtk+ 3 toolkit</entry>
	  </row>

	  <row>
	    <entry><literal>gtkmm20</literal></entry>
	    <entry>x11-toolkits/gtkmm20</entry>
	    <entry xml:lang="en">c++ bindings 2.0 for the gtk20 toolkit</entry>
	  </row>

	  <row>
	    <entry><literal>gtkmm24</literal></entry>
	    <entry>x11-toolkits/gtkmm24</entry>
	    <entry xml:lang="en">c++ bindings 2.4 for the gtk20 toolkit</entry>
	  </row>

	  <row>
	    <entry><literal>gtkmm30</literal></entry>
	    <entry xml:lang="en">x11-toolkits/gtkmm30</entry>
	    <entry xml:lang="en">c++ bindings 3.0 for the gtk30 toolkit</entry>
	  </row>

	  <row>
	    <entry><literal>gtksourceview2</literal></entry>
	    <entry>x11-toolkits/gtksourceview2</entry>
	    <entry xml:lang="en">Widget that adds syntax highlighting to
	      GtkTextView</entry>
	  </row>

	  <row>
	    <entry><literal>gtksourceview3</literal></entry>
	    <entry>x11-toolkits/gtksourceview3</entry>
	    <entry xml:lang="en">Text widget that adds syntax highlighting to
	      the GtkTextView widget</entry>
	  </row>

	  <row>
	    <entry><literal>gtksourceviewmm3</literal></entry>
	    <entry>x11-toolkits/gtksourceviewmm3</entry>
	    <entry xml:lang="en">c++ bindings for the gtksourceview3 library</entry>
	  </row>

	  <row>
	    <entry><literal>gvfs</literal></entry>
	    <entry>devel/gvfs</entry>
	    <entry>GNOME 虛擬檔案系統</entry>
	  </row>

	  <row>
	    <entry><literal>intltool</literal></entry>
	    <entry>textproc/intltool</entry>
	    <entry xml:lang="en">Tool for internationalization (also see
	      intlhack)</entry>
	  </row>

	  <row>
	    <entry><literal>introspection</literal></entry>
	    <entry>devel/gobject-introspection</entry>
	    <entry xml:lang="en">Basic introspection bindings and tools to
	      generate introspection bindings.  Most of the time
	      :build is enough, :both/:run is only need for
	      applications that use introspection bindings.
	      (both, build, run)</entry>
	  </row>

	  <row>
	    <entry><literal>libgda5</literal></entry>
	    <entry>databases/libgda5</entry>
	    <entry xml:lang="en">Provides uniform access to different kinds of
	      data sources</entry>
	  </row>

	  <row>
	    <entry><literal>libgda5-ui</literal></entry>
	    <entry>databases/libgda5-ui</entry>
	    <entry xml:lang="en">UI library from the libgda5 library</entry>
	  </row>

	  <row>
	    <entry><literal>libgdamm5</literal></entry>
	    <entry>databases/libgdamm5</entry>
	    <entry xml:lang="en">c++ bindings for the libgda5 library</entry>
	  </row>

	  <row>
	    <entry><literal>libgsf</literal></entry>
	    <entry>devel/libgsf</entry>
	    <entry xml:lang="en">Extensible I/O abstraction for dealing with
	      structured file formats</entry>
	  </row>

	  <row>
	    <entry><literal>librsvg2</literal></entry>
	    <entry>graphics/librsvg2</entry>
	    <entry xml:lang="en">Library for parsing and rendering SVG
	      vector-graphic files</entry>
	  </row>

	  <row>
	    <entry><literal>libsigc++20</literal></entry>
	    <entry>devel/libsigc++20</entry>
	    <entry xml:lang="en">Callback Framework for C++</entry>
	  </row>

	  <row>
	    <entry><literal>libxml++26</literal></entry>
	    <entry>textproc/libxml++26</entry>
	    <entry xml:lang="en">c++ bindings for the libxml2 library</entry>
	  </row>

	  <row>
	    <entry><literal>libxml2</literal></entry>
	    <entry>textproc/libxml2</entry>
	    <entry xml:lang="en">XML parser library (both, build, run)</entry>
	  </row>

	  <row>
	    <entry><literal>libxslt</literal></entry>
	    <entry>textproc/libxslt</entry>
	    <entry xml:lang="en">XSLT C library (both, build, run)</entry>
	  </row>

	  <row>
	    <entry><literal>metacity</literal></entry>
	    <entry>x11-wm/metacity</entry>
	    <entry>GNOME 視窗管理員</entry>
	  </row>

	  <row>
	    <entry><literal>nautilus3</literal></entry>
	    <entry>x11-fm/nautilus</entry>
	    <entry>GNOME 檔案管理員</entry>
	  </row>

	  <row>
	    <entry><literal>pango</literal></entry>
	    <entry>x11-toolkits/pango</entry>
	    <entry xml:lang="en">Open-source framework for the layout and
	      rendering of i18n text</entry>
	  </row>

	  <row>
	    <entry><literal>pangomm</literal></entry>
	    <entry>x11-toolkits/pangomm</entry>
	    <entry xml:lang="en">c++ bindings for the pango library</entry>
	  </row>

	  <row>
	    <entry><literal>py3gobject3</literal></entry>
	    <entry>devel/py3-gobject3</entry>
	    <entry xml:lang="en">Python 3, GObject 3.0 bindings</entry>
	  </row>

	  <row>
	    <entry><literal>pygobject3</literal></entry>
	    <entry>devel/py-gobject3</entry>
	    <entry xml:lang="en">Python 2, GObject 3.0 bindings</entry>
	  </row>

	  <row>
	    <entry><literal>vte3</literal></entry>
	    <entry>x11-toolkits/vte3</entry>
	    <entry xml:lang="en">Terminal widget with improved accessibility and
	      I18N support</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table xml:id="gnome-components-macro">
      <title xml:lang="en">GNOME Macro Components</title>

      <tgroup cols="2">
	<thead>
	  <row>
	    <entry>元件</entry>
	    <entry>描述</entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><literal>gnomeprefix</literal></entry>
	    <entry xml:lang="en">Supply <buildtarget xml:lang="en">configure</buildtarget> with
	      some default locations.</entry>
	  </row>

	  <row>
	    <entry><literal>intlhack</literal></entry>
	    <entry xml:lang="en">Same as intltool, but patches to make sure
	      <filename>share/locale/</filename> is used.  Please
	      only use when <literal>intltool</literal> alone is
	      not enough.</entry>
	  </row>

	  <row>
	    <entry><literal>referencehack</literal></entry>
	    <entry xml:lang="en">This macro is there to help splitting of the API or
	      reference documentation into its own port.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table xml:id="gnome-components-legacy">
      <title xml:lang="en">GNOME Legacy Components</title>

      <tgroup cols="3">
	<thead>
	  <row>
	    <entry>元件</entry>
	    <entry>相關程式</entry>
	    <entry>描述</entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><literal>atspi</literal></entry>
	    <entry>accessibility/at-spi</entry>
	    <entry xml:lang="en">Assistive Technology Service Provider
	      Interface</entry>
	  </row>

	  <row>
	    <entry><literal>esound</literal></entry>
	    <entry>audio/esound</entry>
	    <entry>Enlightenment 音效套件</entry>
	  </row>

	  <row>
	    <entry><literal>gal2</literal></entry>
	    <entry>x11-toolkits/gal2</entry>
	    <entry xml:lang="en">Collection of widgets taken from GNOME 2
	      gnumeric</entry>
	  </row>

	  <row>
	    <entry><literal>gconf2</literal></entry>
	    <entry>devel/gconf2</entry>
	    <entry xml:lang="en">Configuration database system for GNOME 2</entry>
	  </row>

	  <row>
	    <entry><literal>gconfmm26</literal></entry>
	    <entry>devel/gconfmm26</entry>
	    <entry xml:lang="en">c++ bindings for gconf2</entry>
	  </row>

	  <row>
	    <entry><literal>gdkpixbuf</literal></entry>
	    <entry>graphics/gdk-pixbuf</entry>
	    <entry xml:lang="en">Graphics library for GTK+</entry>
	  </row>

	  <row>
	    <entry><literal>glib12</literal></entry>
	    <entry>devel/glib12</entry>
	    <entry>glib 1.2 核心函式庫</entry>
	  </row>

	  <row>
	    <entry><literal>gnomedocutils</literal></entry>
	    <entry>textproc/gnome-doc-utils</entry>
	    <entry xml:lang="en">GNOME doc utils</entry>
	  </row>

	  <row>
	    <entry><literal>gnomemimedata</literal></entry>
	    <entry>misc/gnome-mime-data</entry>
	    <entry xml:lang="en">MIME and Application database for GNOME 2</entry>
	  </row>

	  <row>
	    <entry><literal>gnomesharp20</literal></entry>
	    <entry>x11-toolkits/gnome-sharp20</entry>
	    <entry xml:lang="en">GNOME 2 interfaces for the .NET runtime</entry>
	  </row>

	  <row>
	    <entry><literal>gnomespeech</literal></entry>
	    <entry>accessibility/gnome-speech</entry>
	    <entry xml:lang="en">GNOME 2 text-to-speech API</entry>
	  </row>

	  <row>
	    <entry><literal>gnomevfs2</literal></entry>
	    <entry>devel/gnome-vfs</entry>
	    <entry>GNOME 2 虛擬檔案系統</entry>
	  </row>

	  <row>
	    <entry><literal>gtk12</literal></entry>
	    <entry>x11-toolkits/gtk12</entry>
	    <entry xml:lang="en">Gtk+ 1.2 toolkit</entry>
	  </row>

	  <row>
	    <entry><literal>gtkhtml3</literal></entry>
	    <entry>www/gtkhtml3</entry>
	    <entry xml:lang="en">Lightweight HTML rendering/printing/editing
	      engine</entry>
	  </row>

	  <row>
	    <entry><literal>gtkhtml4</literal></entry>
	    <entry>www/gtkhtml4</entry>
	    <entry xml:lang="en">Lightweight HTML rendering/printing/editing
	      engine</entry>
	  </row>

	  <row>
	    <entry><literal>gtksharp20</literal></entry>
	    <entry>x11-toolkits/gtk-sharp20</entry>
	    <entry xml:lang="en">GTK+ and GNOME 2 interfaces for the .NET
	      runtime</entry>
	  </row>

	  <row>
	    <entry><literal>gtksourceview</literal></entry>
	    <entry>x11-toolkits/gtksourceview</entry>
	    <entry xml:lang="en">Widget that adds syntax highlighting to
	      GtkTextView</entry>
	  </row>

	  <row>
	    <entry><literal>libartgpl2</literal></entry>
	    <entry>graphics/libart_lgpl</entry>
	    <entry xml:lang="en">Library for high-performance 2D graphics</entry>
	  </row>

	  <row>
	    <entry><literal>libbonobo</literal></entry>
	    <entry>devel/libbonobo</entry>
	    <entry xml:lang="en">Component and compound document system for
	      GNOME 2</entry>
	  </row>

	  <row>
	    <entry><literal>libbonoboui</literal></entry>
	    <entry>x11-toolkits/libbonoboui</entry>
	    <entry xml:lang="en">GUI frontend to the libbonobo component of
	      GNOME 2</entry>
	  </row>

	  <row>
	    <entry><literal>libgda4</literal></entry>
	    <entry>databases/libgda4</entry>
	    <entry xml:lang="en">Provides uniform access to different kinds of
	      data sources</entry>
	  </row>

	  <row>
	    <entry><literal>libglade2</literal></entry>
	    <entry>devel/libglade2</entry>
	    <entry>GNOME 2 glade 函式庫</entry>
	  </row>

	  <row>
	    <entry><literal>libgnome</literal></entry>
	    <entry>x11/libgnome</entry>
	    <entry xml:lang="en">Libraries for GNOME 2, a GNU desktop
	      environment</entry>
	  </row>

	  <row>
	    <entry><literal>libgnomecanvas</literal></entry>
	    <entry>graphics/libgnomecanvas</entry>
	    <entry>GNOME 2 圖形函式庫</entry>
	  </row>

	  <row>
	    <entry><literal>libgnomekbd</literal></entry>
	    <entry>x11/libgnomekbd</entry>
	    <entry>GNOME 2 鍵盤共用函式庫</entry>
	  </row>

	  <row>
	    <entry><literal>libgnomeprint</literal></entry>
	    <entry>print/libgnomeprint</entry>
	    <entry xml:lang="en">Gnome 2 print support library</entry>
	  </row>

	  <row>
	    <entry><literal>libgnomeprintui</literal></entry>
	    <entry>x11-toolkits/libgnomeprintui</entry>
	    <entry xml:lang="en">Gnome 2 print support library</entry>
	  </row>

	  <row>
	    <entry><literal>libgnomeui</literal></entry>
	    <entry>x11-toolkits/libgnomeui</entry>
	    <entry xml:lang="en">Libraries for the GNOME 2 GUI, a GNU desktop
	      environment</entry>
	  </row>

	  <row>
	    <entry><literal>libgtkhtml</literal></entry>
	    <entry>www/libgtkhtml</entry>
	    <entry xml:lang="en">Lightweight HTML rendering/printing/editing
	      engine</entry>
	  </row>

	  <row>
	    <entry><literal>libgtksourceviewmm</literal></entry>
	    <entry>x11-toolkits/libgtksourceviewmm</entry>
	    <entry xml:lang="en">c++ binding of GtkSourceView</entry>
	  </row>

	  <row>
	    <entry><literal>libidl</literal></entry>
	    <entry>devel/libIDL</entry>
	    <entry xml:lang="en">Library for creating trees of CORBA IDL
	      file</entry>
	  </row>

	  <row>
	    <entry><literal>libsigc++12</literal></entry>
	    <entry>devel/libsigc++12</entry>
	    <entry xml:lang="en">Callback Framework for C++</entry>
	  </row>

	  <row>
	    <entry><literal>libwnck</literal></entry>
	    <entry>x11-toolkits/libwnck</entry>
	    <entry xml:lang="en">Library used for writing pagers and
	      taskslists</entry>
	  </row>

	  <row>
	    <entry><literal>libwnck3</literal></entry>
	    <entry>x11-toolkits/libwnck3</entry>
	    <entry xml:lang="en">Library used for writing pagers and
	      taskslists</entry>
	  </row>

	  <row>
	    <entry><literal>orbit2</literal></entry>
	    <entry>devel/ORBit2</entry>
	    <entry xml:lang="en">High-performance CORBA ORB with support for the
	      C language</entry>
	  </row>

	  <row>
	    <entry><literal>pygnome2</literal></entry>
	    <entry>x11-toolkits/py-gnome2</entry>
	    <entry xml:lang="en">Python bindings for GNOME 2</entry>
	  </row>

	  <row>
	    <entry><literal>pygobject</literal></entry>
	    <entry xml:lang="en">devel/py-gobject</entry>
	    <entry xml:lang="en">Python 2, GObject 2.0 bindings</entry>
	  </row>

	  <row>
	    <entry><literal>pygtk2</literal></entry>
	    <entry>x11-toolkits/py-gtk2</entry>
	    <entry xml:lang="en">Set of Python bindings for GTK+</entry>
	  </row>

	  <row>
	    <entry><literal>pygtksourceview</literal></entry>
	    <entry>x11-toolkits/py-gtksourceview</entry>
	    <entry xml:lang="en">Python bindings for GtkSourceView 2</entry>
	  </row>

	  <row>
	    <entry><literal>vte</literal></entry>
	    <entry>x11-toolkits/vte</entry>
	    <entry xml:lang="en">Terminal widget with improved accessibility and
	      I18N support</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table xml:id="gnome-components-deprecated">
      <title xml:lang="en">Deprecated Components: Do Not Use</title>

      <tgroup cols="2">
	<thead>
	  <row>
	    <entry>元件</entry>
	    <entry>描述</entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><literal>HAVE_GNOME</literal></entry>
	    <entry xml:lang="en">Deprecated, do not use.  Was used to check if a
	      component was installed.  This was used for ports
	      that did not have
	      <literal>--enable</literal>/<literal>--disable</literal>
	      switches for their configure script.  But the building
	      of parts of a port without a implicit request is
	      discouraged.</entry>
	  </row>

	  <row>
	    <entry><literal>WANT_GNOME</literal></entry>
	    <entry xml:lang="en">Deprecated, do not use.  Was used by ports that
	      needed <varname>USE_GNOME</varname> for optional
	      dependencies, which where defined after
	      <filename>bsd.port.pre.mk</filename>.  Since
	      <varname>USE_GNOME</varname> can be used after the
	      inclusion of <filename>bsd.port.options.mk</filename>,
	      there is little need for this macro any more.</entry>
	  </row>

	  <row>
	    <entry><literal>pangox-compat</literal></entry>
	    <entry><application>pangox-compat</application> has been deprecated and split off from the <application>pango</application> package.</entry>
	  </row>

	</tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 xml:id="using-qt">
    <title>使用 Qt</title>

    <sect2 xml:id="qt-common">
      <title>需要 Qt 的 Ports</title>

      <para xml:lang="en">The Ports Collection provides support for Qt 4 and Qt 5
	frameworks with
	<varname>USE_QT<replaceable>x</replaceable></varname>,
	where <replaceable>x</replaceable> is
	<literal>4</literal> or <literal>5</literal>.
	Set <varname>USE_QT<replaceable>x</replaceable></varname>
	to the list of required Qt components (libraries,
	tools, plugins).  The Qt 4 and Qt 5 frameworks are quite
	similar.  The main difference is the set of supported
	components.</para>

      <para xml:lang="en">The Qt framework exports a number of variables which can
	be used by ports, some of them listed below:</para>

      <table frame="none" xml:id="using-qt-variables">
	<title xml:lang="en">Variables Provided to Ports That Use Qt</title>

	<tgroup cols="2">
	  <tbody>
	    <row>
	      <entry><varname>QT_PREFIX</varname></entry>
	      <entry xml:lang="en">Set to the path where Qt was installed
		(<literal>${LOCALBASE}</literal>).</entry>
	    </row>

	    <row>
	      <entry><varname>QMAKE</varname></entry>
	      <entry xml:lang="en">Full path to <command>qmake</command>
		binary.</entry>
	    </row>

	    <row>
	      <entry><varname>LRELEASE</varname></entry>
	      <entry xml:lang="en">Full path to <command>lrelease</command>
		utility.</entry>
	    </row>

	    <row>
	      <entry><varname>MOC</varname></entry>
	      <entry xml:lang="en">Full path to <command>moc</command>.</entry>
	    </row>

	    <row>
	      <entry><varname>RCC</varname></entry>
	      <entry xml:lang="en">Full path to <command>rcc</command>.</entry>
	    </row>

	    <row>
	      <entry><varname>UIC</varname></entry>
	      <entry xml:lang="en">Full path to <command>uic</command>.</entry>
	    </row>

	    <row>
	      <entry><varname>QT_INCDIR</varname></entry>
	      <entry xml:lang="en">Qt include directory.</entry>
	    </row>

	    <row>
	      <entry><varname>QT_LIBDIR</varname></entry>
	      <entry xml:lang="en">Qt libraries path.</entry>
	    </row>

	    <row>
	      <entry><varname>QT_PLUGINDIR</varname></entry>
	      <entry xml:lang="en">Qt plugins path.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para xml:lang="en">When using the Qt framework, these
	settings are deployed:</para>

      <programlisting xml:lang="en">CONFIGURE_ARGS+=	--with-qt-includes=${QT_INCDIR} \
			--with-qt-libraries=${QT_LIBDIR} \
			--with-extra-libs=${LOCALBASE}/lib \
			--with-extra-includes=${LOCALBASE}/include

CONFIGURE_ENV+=	QTDIR="${QT_PREFIX}" QMAKE="${QMAKE}" \
		MOC="${MOC}" RCC="${RCC}" UIC="${UIC}" \
		QMAKESPEC="${QMAKESPEC}"

PLIST_SUB+=	QT_INCDIR=${QT_INCDIR_REL} \
		QT_LIBDIR=${QT_LIBDIR_REL} \
		QT_PLUGINDIR=${QT_PLUGINDIR_REL}</programlisting>

      <para xml:lang="en">Some configure scripts do not support the arguments above.
	To suppress modification of<varname>CONFIGURE_ENV</varname>
	and <varname>CONFIGURE_ARGS</varname>, set
	<varname>QT_NONSTANDARD</varname>.</para>
    </sect2>

    <sect2 xml:id="qt-components">
      <title xml:lang="en">Component Selection</title>

      <para xml:lang="en">Individual Qt tool and library dependencies must be
	specified in
	<varname>USE_QT<replaceable>x</replaceable></varname>.
	Every component can be suffixed with
	<literal>_build</literal> or <literal>_run</literal>, the
	suffix indicating whether the dependency on the component is
	at buildtime or runtime.  If unsuffixed, the component will be
	depended on at both build- and runtime.  Usually, library
	components are specified unsuffixed, tool components
	are mostly specified with the <literal>_build</literal> suffix
	and plugin components are specified with the
	<literal>_run</literal> suffix.  The most commonly used
	components are listed below (all available components are
	listed in <varname>_USE_QT_ALL</varname>,
	<varname>_USE_QT4_ONLY</varname>, and
	<varname>_USE_QT5_ONLY</varname> in
	<filename>/usr/ports/Mk/bsd.qt.mk</filename>):</para>

      <table frame="none" xml:id="using-qt-library-list">
	<title>可用的 Qt 函式庫元件</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>名字</entry>
	      <entry>描述</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><literal>core</literal></entry>
	      <entry>核心函式庫 (Qt 5 only)</entry>
	    </row>

	    <row>
	      <entry><literal>corelib</literal></entry>
	      <entry>核心函式庫 (Qt 4 only)</entry>
	    </row>

	    <row>
	      <entry><literal>dbus</literal></entry>
	      <entry>Qt DBus 函式庫</entry>
	    </row>

	    <row>
	      <entry><literal>gui</literal></entry>
	      <entry>圖形使用者介面函式庫</entry>
	    </row>

	    <row>
	      <entry><literal>network</literal></entry>
	      <entry>網路函式庫</entry>
	    </row>

	    <row>
	      <entry><literal>opengl</literal></entry>
	      <entry>Qt OpenGL 函式庫</entry>
	    </row>

	    <row>
	      <entry><literal>script</literal></entry>
	      <entry xml:lang="en">script library</entry>
	    </row>

	    <row>
	      <entry><literal>sql</literal></entry>
	      <entry>SQL 函式庫</entry>
	    </row>

	    <row>
	      <entry><literal>testlib</literal></entry>
	      <entry xml:lang="en">unit testing library</entry>
	    </row>

	    <row>
	      <entry><literal>webkit</literal></entry>
	      <entry>Qt WebKit 函式庫</entry>
	    </row>

	    <row>
	      <entry><literal>xml</literal></entry>
	      <entry>Qt XML 函式庫</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para xml:lang="en">To determine the libraries an application
	depends on, run <command>ldd</command> on the main
	executable after a successful compilation.</para>

      <table frame="none" xml:id="using-qt-tools-list">
	<title xml:lang="en">Available Qt Tool Components</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>名字</entry>
	      <entry>描述</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><literal>qmake</literal></entry>
	      <entry xml:lang="en">Makefile generator/build utility</entry>
	    </row>

	    <row>
	      <entry xml:lang="en"><literal>buildtools</literal></entry>
	      <entry xml:lang="en">build tools (<command>moc</command>,
		<command>rcc</command>), needed for almost
		every Qt application (Qt 5 only)</entry>
	    </row>

	    <row>
	      <entry><literal>linguisttools</literal></entry>
	      <entry xml:lang="en">localization tools: <command>lrelease</command>,
		<command>lupdate</command> (Qt 5 only)</entry>
	    </row>

	    <row>
	      <entry><literal>linguist</literal></entry>
	      <entry xml:lang="en">localization tools: <command>lrelease</command>,
		<command>lupdate</command> (Qt 4 only)</entry>
	    </row>

	    <row>
	      <entry><literal>moc</literal></entry>
	      <entry xml:lang="en">meta object compiler, needed for almost
		every Qt application at buildtime (Qt 4 only)</entry>
	    </row>

	    <row>
	      <entry><literal>rcc</literal></entry>
	      <entry xml:lang="en">resource compiler, needed if the application
		comes with <filename>*.rc</filename> or
		<filename>*.qrc</filename> files (Qt 4 only)</entry>
	    </row>

	    <row>
	      <entry><literal>uic</literal></entry>
	      <entry xml:lang="en">user interface compiler, needed if the
		application comes with <filename>*.ui</filename>
		files, in practice, every Qt
		application with a GUI (Qt 4 only)</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table frame="none" xml:id="using-qt-plugins-list">
	<title xml:lang="en">Available Qt Plugin Components</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>名字</entry>
	      <entry>描述</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><literal>iconengines</literal></entry>
	      <entry xml:lang="en">SVG icon engine plugin, needed if the application
		ships SVG icons (Qt 4 only)</entry>
	    </row>

	    <row>
	      <entry><literal>imageformats</literal></entry>
	      <entry xml:lang="en">plugins for TGA, TIFF, and MNG
		image formats</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <example xml:id="qt4-components-example">
	<title xml:lang="en">Selecting Qt 4 Components</title>

	<para xml:lang="en">In this example, the ported application uses the Qt 4
	  graphical user interface library, the Qt 4 core library,
	  all of the Qt 4 code generation tools and Qt 4's Makefile
	  generator.  Since the <literal>gui</literal> library
	  implies a dependency on the core library,
	  <literal>corelib</literal> does not need to be specified.
	  The Qt 4 code generation tools <literal>moc</literal>,
	  <literal>uic</literal> and <literal>rcc</literal>, as well
	  as the Makefile generator <literal>qmake</literal> are
	  only needed at buildtime, thus they are specified with the
	  <literal>_build</literal> suffix:</para>

	<programlisting xml:lang="en">USE_QT4=	gui moc_build qmake_build rcc_build uic_build</programlisting>
      </example>
    </sect2>

    <sect2 xml:id="using-qmake">
      <title>使用 <command>qmake</command></title>


      <para xml:lang="en">If the application provides a
	<application>qmake</application> project file
	(<filename>*.pro</filename>), define
	<literal>USES= qmake</literal> along with
	<literal>USE_QT<replaceable>x</replaceable></literal>.  Note
	that <literal>USES= qmake</literal> already implies a build
	dependency on qmake, therefore the qmake component can be
	omitted from
	<literal>USE_QT<replaceable>x</replaceable></literal>.
	Similar to <link linkend="using-cmake"><application>CMake</application></link>,
	<application>qmake</application> supports out-of-source
	builds, which can be enabled by specifying the
	<literal>outsource</literal> argument (see <link linkend="using-qmake-example"><literal>USES= qmake</literal>
	  example</link>).</para>

      <table frame="none" xml:id="using-qmake-variables">
	<title xml:lang="en">Variables for Ports That Use
	  <command>qmake</command></title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry xml:lang="en">Variable</entry>
	      <entry xml:lang="en">Means</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>QMAKE_ARGS</varname></entry>
	      <entry xml:lang="en">Port specific <application>qmake</application>
		flags to be passed to the <command>qmake</command>
		binary.</entry>
	    </row>

	    <row>
	      <entry><varname>QMAKE_ENV</varname></entry>
	      <entry xml:lang="en">Environment variables to be set for the
		<command>qmake</command> binary.   The default is
		<literal>${CONFIGURE_ENV}</literal>.</entry>
	    </row>

	    <row>
	      <entry><varname>QMAKE_SOURCE_PATH</varname></entry>

	      <entry xml:lang="en">Path to qmake project files
		(<filename>.pro</filename>).  The default is
		<literal>${WRKSRC}</literal> if an
		out-of-source build is requested, empty
		otherwise.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <example xml:id="using-qmake-example">
	<title><literal>USES= qmake</literal> 範例</title>

	<para xml:lang="en">This snippet demonstrates the use of
	  <application>qmake</application> for a Qt 4 port:</para>

	<programlisting xml:lang="en">USES=		qmake:outsource
USE_QT4=	moc_build</programlisting>

	<para xml:lang="en">For a Qt 5 port:</para>
	<programlisting xml:lang="en">USES=		qmake:outsource
USE_QT5=	buildtools_build</programlisting>
      </example>

      <para xml:lang="en">Qt applications are often written to be cross-platform
	and often X11/Unix is not the platform they are developed
	on, which in turn leads to certain loose ends,
	like:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en"><emphasis>Missing additional include
	      paths.</emphasis>  Many applications come with
	    system tray icon support, but neglect to look for
	    includes and/or libraries in the X11 directories.  To add
	    directories to <command>qmake</command>'s
	    include and library search paths via the command
	    line, use:</para>

	  <programlisting xml:lang="en">QMAKE_ARGS+=	INCLUDEPATH+=${LOCALBASE}/include \
		LIBS+=-L${LOCALBASE}/lib</programlisting>
	</listitem>

	<listitem>
	  <para xml:lang="en"><emphasis>Bogus installation paths.</emphasis>
	    Sometimes data such as icons or .desktop files are by
	    default installed into directories which are not scanned
	    by XDG-compatible applications.
	    <package role="port">editors/texmaker</package> is
	    an example for this - look at
	    <filename>patch-texmaker.pro</filename> in the
	    <filename>files</filename> directory of that port for a
	    template on how to remedy this directly in the
	    <command>qmake</command> project file.</para>
	</listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 xml:id="using-kde">
    <title>使用 KDE</title>

    <sect2 xml:id="kde4-variables">
      <title xml:lang="en">KDE 4 Variable Definitions</title>

      <para xml:lang="en">If the application depends on KDE 4, set
	<varname>USE_KDE4</varname> to the list of required
	components.  <literal>_build</literal> and
	<literal>_run</literal> suffixes can be used to force
	components dependency type (for example,
	<literal>baseapps_run</literal>).  If no suffix is set, a
	default dependency type will be used.  To force both types,
	add the component twice with both suffixes (for example,
	<literal>automoc4_build automoc4_run</literal>).  The most
	commonly used components are listed below (up-to-date
	components are documented at the top of
	<filename>/usr/ports/Mk/bsd.kde4.mk</filename>):</para>

      <table frame="none" xml:id="using-kde-components">
	<title>可用的 KDE 4 元件</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>名字</entry>
	      <entry>描述</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><literal>kdehier</literal></entry>
	      <entry xml:lang="en">Hierarchy of common KDE directories</entry>
	    </row>

	    <row>
	      <entry><literal>kdelibs</literal></entry>
	      <entry>KDE 核心函式庫</entry>
	    </row>

	    <row>
	      <entry><literal>kdeprefix</literal></entry>
	      <entry xml:lang="en">If set, port will be installed into
		<literal>${KDE4_PREFIX}</literal></entry>
	    </row>

	    <row>
	      <entry><literal>automoc4</literal></entry>
	      <entry xml:lang="en">Build tool to automatically generate moc
		files</entry>
	    </row>

	    <row>
	      <entry><literal>akonadi</literal></entry>
	      <entry xml:lang="en">Storage server for KDE PIM data</entry>
	    </row>

	    <row>
	      <entry><literal>soprano</literal></entry>
	      <entry xml:lang="en">Library for Resource Description Framework
		(RDF)</entry>
	    </row>

	    <row>
	      <entry><literal>strigi</literal></entry>
	      <entry>Strigi 桌面搜尋函式庫</entry>
	    </row>

	    <row>
	      <entry><literal>libkcddb</literal></entry>
	      <entry xml:lang="en">KDE CDDB (compact disc database) library</entry>
	    </row>

	    <row>
	      <entry><literal>libkcompactdisc</literal></entry>
	      <entry xml:lang="en">KDE library for interfacing with audio
		CDs</entry>
	    </row>

	    <row>
	      <entry><literal>libkdeedu</literal></entry>
	      <entry xml:lang="en">Libraries used by educational
		applications</entry>
	    </row>

	    <row>
	      <entry><literal>libkdcraw</literal></entry>
	      <entry>KDE LibRaw 函式庫</entry>
	    </row>

	    <row>
	      <entry><literal>libkexiv2</literal></entry>
	      <entry>KDE Exiv2 函式庫</entry>
	    </row>

	    <row>
	      <entry><literal>libkipi</literal></entry>
	      <entry xml:lang="en">KDE Image Plugin Interface</entry>
	    </row>

	    <row>
	      <entry><literal>libkonq</literal></entry>
	      <entry>Konqueror 核心函式庫</entry>
	    </row>

	    <row>
	      <entry><literal>libksane</literal></entry>
	      <entry xml:lang="en">KDE SANE ("Scanner Access Now Easy")
		library</entry>
	    </row>

	    <row>
	      <entry><literal>pimlibs</literal></entry>
	      <entry xml:lang="en">Personal information management libraries</entry>
	    </row>

	    <row>
	      <entry><literal>kate</literal></entry>
	      <entry xml:lang="en">Advanced text editor framework</entry>
	    </row>

	    <row>
	      <entry><literal>marble</literal></entry>
	      <entry xml:lang="en">Virtual globe and world atlas</entry>
	    </row>

	    <row>
	      <entry><literal>okular</literal></entry>
	      <entry xml:lang="en">Universal document viewer</entry>
	    </row>

	    <row>
	      <entry><literal>korundum</literal></entry>
	      <entry xml:lang="en">KDE Ruby bindings</entry>
	    </row>

	    <row>
	      <entry><literal>perlkde</literal></entry>
	      <entry xml:lang="en">KDE Perl bindings</entry>
	    </row>

	    <row>
	      <entry><literal>pykde4</literal></entry>
	      <entry xml:lang="en">KDE Python bindings</entry>
	    </row>

	    <row>
	      <entry><literal>pykdeuic4</literal></entry>
	      <entry xml:lang="en">PyKDE user interface compiler</entry>
	    </row>

	    <row>
	      <entry><literal>smokekde</literal></entry>
	      <entry>KDE SMOKE 函式庫</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para xml:lang="en">KDE 4 ports are installed into
	<varname>KDE4_PREFIX</varname>.  This is
	achieved by specifying the <literal>kdeprefix</literal>
	component, which overrides the default
	<varname>PREFIX</varname>.  The ports, however, respect any
	<varname>PREFIX</varname> set via the <envar>MAKEFLAGS</envar>
	environment variable and/or <command>make</command>
	arguments.  Currently <varname>KDE4_PREFIX</varname>
	is identical to the default <varname>PREFIX</varname>,
	<literal>${LOCALBASE}</literal>.</para>

      <example xml:id="kde4-components-example">
	<title><varname>USE_KDE4</varname> 範例</title>

	<para xml:lang="en">This is a simple example for a KDE 4 port.
	  <literal>USES= cmake:outsource</literal> instructs the
	  port to utilize <application>CMake</application>, a
	  configuration tool widely used by KDE 4 projects (see
	  <xref linkend="using-cmake"/> for detailed usage).
	  <varname>USE_KDE4</varname> brings dependency on KDE
	  libraries and makes port using
	  <command>automoc4</command> at build stage.
	  Required KDE components and other dependencies can be
	  determined through configure log.
	  <varname>USE_KDE4</varname> does not imply
	  <varname>USE_QT4</varname>.  If a port requires some
	  Qt 4 components, specify them in
	  <varname>USE_QT4</varname>.</para>

	<programlisting>USES=		cmake:outsource
USE_KDE4=	kdelibs kdeprefix automoc4
USE_QT4=	moc_build qmake_build rcc_build uic_build</programlisting>
      </example>
    </sect2>
  </sect1>

  <sect1 xml:id="using-java">
    <title>使用 Java</title>

    <sect2 xml:id="java-variables">
      <title>變數定義</title>

      <para xml:lang="en">If the port needs a Java™ Development Kit
	(<acronym>JDK</acronym>™) to either build, run or even
	extract the distfile, then define
	<varname>USE_JAVA</varname>.</para>

      <para xml:lang="en">There are several <acronym>JDK</acronym>s in the ports
	collection, from various vendors, and in several versions.  If
	the port must use one of these versions, define which one.
	The most current version, and FreeBSD default is
	<package role="port">java/openjdk6</package>.</para>

      <table frame="none" xml:id="using-java-variables">
	<title xml:lang="en">Variables Which May be Set by Ports That Use
	  Java</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry xml:lang="en">Variable</entry>
	      <entry xml:lang="en">Means</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>USE_JAVA</varname></entry>
	      <entry xml:lang="en">Define for the remaining variables
		to have any effect.</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_VERSION</varname></entry>
	      <entry xml:lang="en">List of space-separated suitable Java versions
		for the port.  An optional <literal>"+"</literal>
		allows specifying a range of versions (allowed
		values:
		<literal>1.5[+] 1.6[+] 1.7[+]</literal>).</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_OS</varname></entry>
	      <entry xml:lang="en">List of space-separated suitable
		<acronym>JDK</acronym> port operating systems for the
		port (allowed values:
		<literal>native linux</literal>).</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_VENDOR</varname></entry>
	      <entry xml:lang="en">List of space-separated suitable
		<acronym>JDK</acronym> port vendors for the port
		(allowed values:
		<literal>freebsd bsdjava sun
		  openjdk</literal>).</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_BUILD</varname></entry>
	      <entry xml:lang="en">When set, add the selected <acronym>JDK</acronym>
		port to the build dependencies.</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_RUN</varname></entry>
	      <entry xml:lang="en">When set, add the selected <acronym>JDK</acronym>
		port to the run dependencies.</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_EXTRACT</varname></entry>
	      <entry xml:lang="en">When set, add the selected <acronym>JDK</acronym>
		port to the extract dependencies.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para xml:lang="en">Below is the list of all settings a port will receive
	after setting <varname>USE_JAVA</varname>:</para>

      <table frame="none" xml:id="using-java-variables2">
	<title xml:lang="en">Variables Provided to Ports That Use Java</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry xml:lang="en">Variable</entry>
	      <entry xml:lang="en">Value</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>JAVA_PORT</varname></entry>
	      <entry xml:lang="en">The name of the <acronym>JDK</acronym> port (for
		example, <literal>java/openjdk6</literal>).</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_PORT_VERSION</varname></entry>
	      <entry xml:lang="en">The full version of the <acronym>JDK</acronym>
		port (for example, <literal>1.6.0</literal>).  Only
		the first two digits of this version number are
		needed, use
		<varname>${JAVA_PORT_VERSION:C/^([0-9])\.([0-9])(.*)$/\1.\2/}</varname>.</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_PORT_OS</varname></entry>
	      <entry xml:lang="en">The operating system used by the
		<acronym>JDK</acronym> port (for example,
		<literal>'native'</literal>).</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_PORT_VENDOR</varname></entry>
	      <entry xml:lang="en">The vendor of the <acronym>JDK</acronym> port
		(for example, <literal>'openjdk'</literal>).</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_PORT_OS_DESCRIPTION</varname></entry>
	      <entry xml:lang="en">Description of the operating system used by the
		<acronym>JDK</acronym> port (for example,
		<literal>'Native'</literal>).</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_PORT_VENDOR_DESCRIPTION</varname></entry>
	      <entry xml:lang="en">Description of the vendor of the
		<acronym>JDK</acronym> port (for example,
		<literal>'OpenJDK BSD Porting
		  Team'</literal>).</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_HOME</varname></entry>
	      <entry xml:lang="en">Path to the installation directory of the
		<acronym>JDK</acronym> (for example,
		<filename>'/usr/local/openjdk6'</filename>).</entry>
	    </row>

	    <row>
	      <entry><varname>JAVAC</varname></entry>
	      <entry xml:lang="en">Path to the Java compiler to use (for example,
		<filename>'/usr/local/openjdk6/bin/javac'</filename>).</entry>
	    </row>

	    <row>
	      <entry><varname>JAR</varname></entry>
	      <entry xml:lang="en">Path to the <command>jar</command> tool to use
		(for example,
		<filename>'/usr/local/openjdk6/bin/jar'</filename>
		or
		<filename>'/usr/local/bin/fastjar'</filename>).</entry>
	    </row>

	    <row>
	      <entry><varname>APPLETVIEWER</varname></entry>
	      <entry xml:lang="en">Path to the <command>appletviewer</command>
		utility (for example,
		<filename>'/usr/local/openjdk6/bin/appletviewer'</filename>).</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA</varname></entry>
	      <entry xml:lang="en">Path to the <command>java</command> executable.
		Use this for executing Java programs (for example,
		<filename>'/usr/local/openjdk6/bin/java'</filename>).</entry>
	    </row>

	    <row>
	      <entry><varname>JAVADOC</varname></entry>
	      <entry xml:lang="en">Path to the <command>javadoc</command> utility
		program.</entry>
	    </row>

	    <row>
	      <entry><varname>JAVAH</varname></entry>
	      <entry xml:lang="en">Path to the <command>javah</command>
		program.</entry>
	    </row>

	    <row>
	      <entry><varname>JAVAP</varname></entry>
	      <entry xml:lang="en">Path to the <command>javap</command>
		program.</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_KEYTOOL</varname></entry>
	      <entry xml:lang="en">Path to the <command>keytool</command> utility
		program.</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_N2A</varname></entry>
	      <entry xml:lang="en">Path to the <command>native2ascii</command>
		tool.</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_POLICYTOOL</varname></entry>
	      <entry xml:lang="en">Path to the <command>policytool</command>
		program.</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_SERIALVER</varname></entry>
	      <entry xml:lang="en">Path to the <command>serialver</command>
		utility program.</entry>
	    </row>

	    <row>
	      <entry><varname>RMIC</varname></entry>
	      <entry xml:lang="en">Path to the RMI stub/skeleton generator,
		<command>rmic</command>.</entry>
	    </row>

	    <row>
	      <entry><varname>RMIREGISTRY</varname></entry>
	      <entry xml:lang="en">Path to the RMI registry program,
		<command>rmiregistry</command>.</entry>
	    </row>

	    <row>
	      <entry><varname>RMID</varname></entry>
	      <entry xml:lang="en">Path to the RMI daemon program
		<command>rmid</command>.</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_CLASSES</varname></entry>
	      <entry xml:lang="en">Path to the archive that contains the
		<acronym>JDK</acronym> class files,
		<filename>${JAVA_HOME}/jre/lib/rt.jar</filename>.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para xml:lang="en">Use the <buildtarget xml:lang="en">java-debug</buildtarget> make
	target to get information for debugging the port.  It will
	display the value of many of the previously listed
	variables.</para>

      <para xml:lang="en">Additionally, these constants are defined so all
	Java ports may be installed in a consistent way:</para>

      <table frame="none" xml:id="using-java-constants">
	<title xml:lang="en">Constants Defined for Ports That Use Java</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>常數</entry>
	      <entry xml:lang="en">Value</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>JAVASHAREDIR</varname></entry>
	      <entry xml:lang="en">The base directory for everything related to
		Java.  Default:
		<filename>${PREFIX}/share/java</filename>.</entry>
	    </row>

	    <row>
	      <entry><varname>JAVAJARDIR</varname></entry>
	      <entry xml:lang="en">The directory where JAR files is
		installed.  Default:
		<filename>${JAVASHAREDIR}/classes</filename>.</entry>
	    </row>

	    <row>
	      <entry><varname>JAVALIBDIR</varname></entry>
	      <entry xml:lang="en">The directory where JAR files installed by
		other ports are located.  Default:
		<filename>${LOCALBASE}/share/java/classes</filename>.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para xml:lang="en">The related entries are defined in both
	<varname>PLIST_SUB</varname> (documented in
	<xref linkend="plist-sub"/>) and
	<varname>SUB_LIST</varname>.</para>
    </sect2>

    <sect2 xml:id="java-building-with-ant">
      <title xml:lang="en">Building with Ant</title>

      <para xml:lang="en">When the port is to be built using Apache Ant, it has to
	define <varname>USE_ANT</varname>.  Ant is thus considered to
	be the sub-make command.  When no
	<buildtarget xml:lang="en">do-build</buildtarget> target is defined by the
	port, a default one will be set that runs Ant according to
	<varname>MAKE_ENV</varname>, <varname>MAKE_ARGS</varname> and
	<varname>ALL_TARGET</varname>.  This is similar to the
	<literal>USES= gmake</literal> mechanism, which is documented
	in <xref linkend="building"/>.</para>
    </sect2>

    <sect2 xml:id="java-best-practices">
      <title xml:lang="en">Best Practices</title>

      <para xml:lang="en">When porting a Java library, the port has to install
	the JAR file(s) in <filename>${JAVAJARDIR}</filename>, and
	everything else under
	<filename>${JAVASHAREDIR}/${PORTNAME}</filename> (except for
	the documentation, see below).  To reduce the packing file
	size, reference the JAR file(s) directly in the
	<filename>Makefile</filename>.  Use this statement (where
	<filename><replaceable>myport</replaceable>.jar</filename> is
	the name of the JAR file installed as part of the
	port):</para>

      <programlisting xml:lang="en">PLIST_FILES+=	${JAVAJARDIR}/<replaceable>myport</replaceable>.jar</programlisting>

      <para xml:lang="en">When porting a Java application, the port usually
	installs everything under a single directory (including its
	JAR dependencies).  The use of
	<filename>${JAVASHAREDIR}/${PORTNAME}</filename> is strongly
	encouraged in this regard.  It is up the porter to decide
	whether the port installs the additional JAR
	dependencies under this directory or uses the
	already installed ones (from
	<filename>${JAVAJARDIR}</filename>).</para>

      <para xml:lang="en">When porting a <trademark>Java</trademark> application that requires an
	application server such as
	<package role="port">www/tomcat7</package> to run the
	service, it is quite common for a vendor to distribute a
	<filename>.war</filename>.  A <filename>.war</filename>
	is a Web application ARchive and is extracted when
	called by the application.  Avoid adding a
	<filename>.war</filename>
	to <filename>pkg-plist</filename>.
	It is not considered best practice.  An application server
	will expand <application>war</application> archive, but not
	clean it up properly if the port is removed.  A more
	desirable way of working with this file is to extract the
	archive, then install the files, and lastly add these files
	to <filename>pkg-plist</filename>.</para>

      <programlisting xml:lang="en">TOMCATDIR=	${LOCALBASE}/apache-tomcat-7.0
WEBAPPDIR=	myapplication

post-extract:
	@${MKDIR} ${WRKDIR}/${PORTDIRNAME}
	@${TAR} xf ${WRKDIR}/myapplication.war -C ${WRKDIR}/${PORTDIRNAME}

do-install:
	cd ${WRKDIR} &amp;&amp; \
	${INSTALL} -d -o ${WWWOWN} -g ${WWWGRP} ${TOMCATDIR}/webapps/${PORTDIRNAME}
	@cd ${WRKDIR}/${PORTDIRNAME} &amp;&amp; ${COPYTREE_SHARE} \* ${WEBAPPDIR}/${PORTDIRNAME}</programlisting>

      <para xml:lang="en">Regardless of the type of port (library or
	application), the additional documentation is installed in the
	<link linkend="install-documentation">same location</link> as
	for any other port.  The JavaDoc tool is known to produce a
	different set of files depending on the version of the
	<acronym>JDK</acronym> that is used.  For ports that do not
	enforce the use of a particular <acronym>JDK</acronym>, it is
	therefore a complex task to specify the packing list
	(<filename>pkg-plist</filename>).  This is one reason why
	porters are strongly encouraged to use
	<varname>PORTDOCS</varname>.  Moreover, even if the set of
	files that will be generated by <command>javadoc</command> can
	be predicted, the size of the resulting
	<filename>pkg-plist</filename> advocates for the use of
	<varname>PORTDOCS</varname>.</para>

      <para xml:lang="en">The default value for <varname>DATADIR</varname> is
	<filename>${PREFIX}/share/${PORTNAME}</filename>.  It is a
	good idea to override <varname>DATADIR</varname> to
	<filename>${JAVASHAREDIR}/${PORTNAME}</filename> for Java
	ports.  Indeed, <varname>DATADIR</varname> is automatically
	added to <varname>PLIST_SUB</varname> (documented in
	<xref linkend="plist-sub"/>) so use
	<literal>%%DATADIR%%</literal> directly in
	<filename>pkg-plist</filename>.</para>

      <para xml:lang="en">As for the choice of building Java ports from source or
	directly installing them from a binary distribution, there
	is no defined policy at the time of writing.  However,
	people from the
	<link xlink:href="http://www.freebsd.org/java/">FreeBSD Java
	  Project</link> encourage porters to have their ports
	built from source whenever it is a trivial task.</para>

      <para xml:lang="en">All the features that have been presented in this
	section are implemented in <filename>bsd.java.mk</filename>.
	If the port needs more sophisticated
	Java support, please first have a look at the <link xlink:href="http://svnweb.FreeBSD.org/ports/head/Mk/bsd.java.mk?view=log">bsd.java.mk
	  <application>Subversion</application> log</link> as it
	usually takes some time to document the latest features.
	Then, if the needed support that is lacking would be
	beneficial to many other Java ports, feel free to discuss it
	on the <link xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-java">FreeBSD Java Language mailing list</link>.</para>

      <para xml:lang="en">Although there is a <literal>java</literal> category for
	PRs, it refers to the <acronym>JDK</acronym> porting effort
	from the FreeBSD Java project.  Therefore, submit the Java port
	in the <literal>ports</literal> category as for any other
	port, unless the issue is related to either a
	<acronym>JDK</acronym> implementation or
	<filename>bsd.java.mk</filename>.</para>

      <para xml:lang="en">Similarly, there is a defined policy regarding the
	<varname>CATEGORIES</varname> of a Java port, which is
	detailed in <xref linkend="makefile-categories"/>.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="using-php">
    <title>網路應用程式, Apache 和 PHP</title>

    <sect2 xml:id="using-apache">
      <title>Apache</title>

      <table frame="none" xml:id="using-apache-variables">
	<title xml:lang="en">Variables for Ports That Use Apache</title>

	<tgroup cols="2">
	  <tbody>

	    <row>
	      <entry><varname>USE_APACHE</varname></entry>
	      <entry xml:lang="en">The port requires Apache.  Possible values:
		<literal>yes</literal> (gets any version),
		<literal>22</literal>, <literal>24</literal>,
		<literal>22-24</literal>, <literal>22+</literal>,
		etc.  The default APACHE version is
		<literal>22</literal>.  More details are available
		in <filename>ports/Mk/bsd.apache.mk</filename> and
		at <link xlink:href="http://wiki.freebsd.org/Apache/">wiki.freebsd.org/Apache/</link>.</entry>
	    </row>

	    <row>
	      <entry><varname>APXS</varname></entry>
	      <entry xml:lang="en">Full path to the <command>apxs</command>
		binary.  Can be overridden in the port.</entry>
	    </row>

	    <row>
	      <entry><varname>HTTPD</varname></entry>
	      <entry xml:lang="en">Full path to the <command>httpd</command>
		binary.  Can be overridden in the port.</entry>
	    </row>

	    <row>
	      <entry><varname>APACHE_VERSION</varname></entry>
	      <entry xml:lang="en">The version of present Apache installation
		(read-only variable).  This variable is only
		available after inclusion of
		<filename>bsd.port.pre.mk</filename>.  Possible
		values: <literal>22</literal>,
		<literal>24</literal>.</entry>
	    </row>

	    <row>
	      <entry><varname>APACHEMODDIR</varname></entry>
	      <entry xml:lang="en">Directory for Apache modules.  This variable is
		automatically expanded in
		<filename>pkg-plist</filename>.</entry>
	    </row>

	    <row>
	      <entry><varname>APACHEINCLUDEDIR</varname></entry>
	      <entry xml:lang="en">Directory for Apache headers.  This variable is
		automatically expanded in
		<filename>pkg-plist</filename>.</entry>
	    </row>

	    <row>
	      <entry><varname>APACHEETCDIR</varname></entry>
	      <entry xml:lang="en">Directory for Apache configuration files.  This
		variable is automatically expanded in
		<filename>pkg-plist</filename>.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table frame="none" xml:id="using-apache-modules">
	<title xml:lang="en">Useful Variables for Porting Apache Modules</title>

	<tgroup cols="2">
	  <tbody>

	    <row>
	      <entry><varname>MODULENAME</varname></entry>
	      <entry xml:lang="en">Name of the module.  Default value is
		<varname>PORTNAME</varname>.  Example:
		<literal>mod_hello</literal></entry>
	    </row>

	    <row>
	      <entry><varname>SHORTMODNAME</varname></entry>
	      <entry xml:lang="en">Short name of the module.  Automatically
		derived from <varname>MODULENAME</varname>, but can
		be overridden.  Example:
		<literal>hello</literal></entry>
	    </row>

	    <row>
	      <entry><varname>AP_FAST_BUILD</varname></entry>
	      <entry xml:lang="en">Use <command>apxs</command> to compile and
		install the module.</entry>
	    </row>

	    <row>
	      <entry><varname>AP_GENPLIST</varname></entry>
	      <entry xml:lang="en">Also automatically creates a
		<filename>pkg-plist</filename>.</entry>
	    </row>

	    <row>
	      <entry><varname>AP_INC</varname></entry>
	      <entry xml:lang="en">Adds a directory to a header search path during
		compilation.</entry>
	    </row>

	    <row>
	      <entry><varname>AP_LIB</varname></entry>
	      <entry xml:lang="en">Adds a directory to a library search path
		during compilation.</entry>
	    </row>

	    <row>
	      <entry><varname>AP_EXTRAS</varname></entry>
	      <entry xml:lang="en">Additional flags to pass to
		<command>apxs</command>.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 xml:id="web-apps">
      <title>網路應用程式</title>

      <para xml:lang="en">Web applications must be installed into
	<filename>PREFIX/www/<replaceable>appname</replaceable></filename>.
	This path is available both in
	<filename>Makefile</filename> and in
	<filename>pkg-plist</filename> as <varname>WWWDIR</varname>,
	and the path relative to <varname>PREFIX</varname> is
	available in <filename>Makefile</filename> as
	<varname>WWWDIR_REL</varname>.</para>

      <para xml:lang="en">The user and group of web server process are available
	as <varname>WWWOWN</varname> and <varname>WWWGRP</varname>,
	in case the ownership of some files needs to be changed.  The
	default values of both are <literal>www</literal>.  Use
	<literal>WWWOWN?= myuser</literal> and <literal>WWWGRP?=
	  mygroup</literal> if the port needs different values.  This
	allows the user to override them easily.</para>

      <para xml:lang="en">Do not depend on Apache unless the web app explicitly
	needs Apache.  Respect that users may wish to run a web
	app on different web server than Apache.</para>
    </sect2>

    <sect2 xml:id="php-variables">
      <title>PHP</title>

      <table frame="none" xml:id="using-php-variables">
	<title xml:lang="en">Variables for Ports That Use PHP</title>

	<tgroup cols="2">
	  <tbody>
	    <row>
	      <entry><varname>USE_PHP</varname></entry>
	      <entry xml:lang="en">The port requires PHP.  The value
		<literal>yes</literal> adds a dependency on PHP.
		The list of required PHP extensions can be specified
		instead.  Example:
		<literal>pcre xml gettext</literal></entry>
	    </row>

	    <row>
	      <entry><varname>DEFAULT_PHP_VER</varname></entry>
	      <entry xml:lang="en">Selects which major version of PHP will be
		installed as a dependency when no PHP is installed
		yet.  Default is <literal>5</literal>.  Possible
		values: <literal>4</literal>,
		<literal>5</literal></entry>
	    </row>

	    <row>
	      <entry><varname>IGNORE_WITH_PHP</varname></entry>
	      <entry xml:lang="en">The port does not work with PHP of the given
		version.  Possible values: <literal>4</literal>,
		<literal>5</literal></entry>
	    </row>

	    <row>
	      <entry><varname>USE_PHPIZE</varname></entry>
	      <entry xml:lang="en">The port will be built as a PHP
		extension.</entry>
	    </row>

	    <row>
	      <entry><varname>USE_PHPEXT</varname></entry>
	      <entry xml:lang="en">The port will be treated as a PHP extension,
		including installation and registration in the
		extension registry.</entry>
	    </row>

	    <row>
	      <entry><varname>USE_PHP_BUILD</varname></entry>
	      <entry xml:lang="en">Set PHP as a build dependency.</entry>
	    </row>

	    <row>
	      <entry><varname>WANT_PHP_CLI</varname></entry>
	      <entry xml:lang="en">Want the CLI (command line) version of
		PHP.</entry>
	    </row>

	    <row>
	      <entry><varname>WANT_PHP_CGI</varname></entry>
	      <entry xml:lang="en">Want the CGI version of PHP.</entry>
	    </row>

	    <row>
	      <entry><varname>WANT_PHP_MOD</varname></entry>
	      <entry xml:lang="en">Want the Apache module version of PHP.</entry>
	    </row>

	    <row>
	      <entry><varname>WANT_PHP_SCR</varname></entry>
	      <entry xml:lang="en">Want the CLI or the CGI version of PHP.</entry>
	    </row>

	    <row>
	      <entry><varname>WANT_PHP_WEB</varname></entry>
	      <entry xml:lang="en">Want the Apache module or the CGI version of
		PHP.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 xml:id="php-pear">
      <title xml:lang="en">PEAR Modules</title>

      <para xml:lang="en">Porting PEAR modules is a very simple process.</para>

      <para xml:lang="en">Add <literal>USES=pear</literal> to the port's
	<filename>Makefile</filename>.  The framework will install the
	relevant files in the right places and automatically generate
	the plist at install time.</para>

      <example xml:id="pear-makefile">
	<title xml:lang="en">Example Makefile for PEAR Class</title>

	<programlisting xml:lang="en">PORTNAME=       Date
PORTVERSION=	1.4.3
CATEGORIES=	devel www pear

MAINTAINER=	example@domain.com
COMMENT=	PEAR Date and Time Zone Classes

USES=	pear

.include &lt;bsd.port.mk&gt;</programlisting>
      </example>

      <sect3 xml:id="php-horde">
	<title xml:lang="en"><application>Horde</application> Modules</title>

	<para xml:lang="en">In the same way, porting
	  <application>Horde</application> modules is a simple
	  process.</para>

	<para xml:lang="en">Add <literal>USES=horde</literal> to the port's
	  <filename>Makefile</filename>.  The framework will install
	  the relevant files in the right places and automatically
	  generate the plist at install time.</para>

	<para xml:lang="en">The <varname>USE_HORDE_BUILD</varname> and
	  <varname>USE_HORDE_RUN</varname> variables can be used to
	  add buildtime and runtime dependencies on other
	  <application>Horde</application> modules.  See
	  <filename>Mk/Uses/horde.mk</filename> for a complete list of
	  available modules.</para>

	<example xml:id="horde-Makefile">
	  <title xml:lang="en">Example Makefile for <application>Horde</application>
	    Module</title>

	  <programlisting xml:lang="en">PORTNAME=	Horde_Core
PORTVERSION=	2.14.0
CATEGORIES=	devel www pear

MAINTAINER=	horde@FreeBSD.org
COMMENT=	Horde Core Framework libraries

OPTIONS_DEFINE=	KOLAB SOCKETS
KOLAB_DESC=	Enable Kolab server support
SOCKETS_DESC=	Depend on sockets PHP extension

USES=	horde
USE_PHP=	session

USE_HORDE_BUILD=	Horde_Role
USE_HORDE_RUN=	Horde_Role Horde_History Horde_Pack \
		Horde_Text_Filter Horde_View

KOLAB_USE=	HORDE_RUN=Horde_Kolab_Server,Horde_Kolab_Session
SOCKETS_USE=	PHP=sockets

.include &lt;bsd.port.mk&gt;</programlisting>
	</example>
      </sect3>
    </sect2>
  </sect1>

  <sect1 xml:id="using-python">
    <title>使用 Python</title>

    <para xml:lang="en">The Ports Collection supports parallel installation of
      multiple Python versions.  Ports must use a
      correct <command>python</command> interpreter, according to
      the user-settable <varname>PYTHON_VERSION</varname>.
      Most prominently, this means replacing the path to
      <command>python</command> executable in scripts with the value
      of <varname>PYTHON_CMD</varname>.</para>

    <para xml:lang="en">Ports that install files under
      <varname>PYTHON_SITELIBDIR</varname> must use the
      <literal>pyXY-</literal> package name prefix, so their package
      name embeds the version of Python they are installed
      into.</para>

    <programlisting xml:lang="en">PKGNAMEPREFIX=	${PYTHON_PKGNAMEPREFIX}</programlisting>

    <table frame="none" xml:id="using-python-variables">
      <title xml:lang="en">Most Useful Variables for Ports That Use Python</title>

      <tgroup cols="2">
	<tbody>
	  <row>
	    <entry><varname>USES=python</varname></entry>
	    <entry xml:lang="en">The port needs Python.  The minimal required
	      version can be specified with values such as
	      <literal>2.7+</literal>.  Version ranges can also be
	      specified by separating two version numbers with a dash:
	      <literal>USES=python:3.2-3.3</literal></entry>
	  </row>

	  <row>
	    <entry><varname>USE_PYTHON=distutils</varname></entry>
	    <entry xml:lang="en">Use Python distutils for configuring, compiling,
	      and installing.  This is required when the port comes
	      with <filename>setup.py</filename>.  This overrides
	      the <buildtarget xml:lang="en">do-build</buildtarget> and
	      <buildtarget xml:lang="en">do-install</buildtarget> targets and may
	      also override <buildtarget xml:lang="en">do-configure</buildtarget>
	      if <varname>GNU_CONFIGURE</varname> is not
	      defined.</entry>
	  </row>

	  <row>
	    <entry><varname>USE_PYTHON=autoplist</varname></entry>
	    <entry xml:lang="en">Create the packaging list automatically.  This also
	      requires <literal>USE_PYTHON=distutils</literal> to be
	      set.</entry>
	  </row>

	  <row>
	    <entry><varname>USE_PYTHON=concurrent</varname></entry>
	    <entry xml:lang="en">The port will use an unique prefix, typically
	      <literal>PYTHON_PKGNAMEPREFIX</literal> for certain
	      directories, such as <literal>EXAMPLESDIR</literal> and
	      <literal>DOCSDIR</literal> and also will append a
	      suffix, the python version from
	      <literal>PYTHON_VER</literal>, to binaries and scripts
	      to be installed.  This allows ports to be installed for
	      different Python versions at the same time, which
	      otherwise would install conflicting files.</entry>
	  </row>

	  <row>
	    <entry><varname>PYTHON_PKGNAMEPREFIX</varname></entry>
	    <entry xml:lang="en">Used as a <varname>PKGNAMEPREFIX</varname> to
	      distinguish packages for different Python versions.
	      Example: <literal>py27-</literal></entry>
	  </row>

	  <row>
	    <entry><varname>PYTHON_SITELIBDIR</varname></entry>
	    <entry xml:lang="en">Location of the site-packages tree, that contains
	      installation path of Python (usually
	      <varname>LOCALBASE</varname>).
	      <varname>PYTHON_SITELIBDIR</varname> can be
	      very useful when installing Python modules.</entry>
	  </row>

	  <row>
	    <entry><varname>PYTHONPREFIX_SITELIBDIR</varname></entry>
	    <entry xml:lang="en">The PREFIX-clean variant of PYTHON_SITELIBDIR.
	      Always use <literal>%%PYTHON_SITELIBDIR%%</literal> in
	      <filename>pkg-plist</filename> when possible.  The
	      default value of
	      <literal>%%PYTHON_SITELIBDIR%%</literal> is
	      <literal>lib/python%%PYTHON_VERSION%%/site-packages</literal></entry>
	  </row>

	  <row>
	    <entry><varname>PYTHON_CMD</varname></entry>
	    <entry xml:lang="en">Python interpreter command line, including
	      version number.</entry>
	  </row>

	  <row>
	    <entry><varname>PYNUMERIC</varname></entry>
	    <entry xml:lang="en">Dependency line for numeric extension.</entry>
	  </row>

	  <row>
	    <entry><varname>PYNUMPY</varname></entry>
	    <entry xml:lang="en">Dependency line for the new numeric extension,
	      numpy.  (PYNUMERIC is deprecated by upstream
	      vendor).</entry>
	  </row>

	  <row>
	    <entry><varname>PYXML</varname></entry>
	    <entry xml:lang="en">Dependency line for XML extension (not needed for
	      Python 2.0 and higher as it is also in base
	      distribution).</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para xml:lang="en">A complete list of available variables can be found in
      <filename>/usr/ports/Mk/Uses/python.mk</filename>.</para>

    <example xml:id="python-Makefile">
      <title xml:lang="en">Makefile for a Simple <application>Python</application>
	Module</title>

      <programlisting>PORTNAME=	sample
PORTVERSION=	1.2.3
CATEGORIES=	devel

MAINTAINER=	john@doe.tld
COMMENT=	Python sample module

USES=		python
USE_PYTHON=	autoplist distutils

.include &lt;bsd.port.mk&gt;</programlisting>
    </example>

    <para xml:lang="en">Some Python applications claim to have
      <varname>DESTDIR</varname> support (which would be required
      for staging) but it is broken (Mailman up to 2.1.16, for
      instance).  This can be worked around by recompiling the
      scripts.  This can be done, for example, in the
      <buildtarget xml:lang="en">post-build</buildtarget> target.  Assuming the
      Python scripts are supposed to reside in
      <varname>PYTHONPREFIX_SITELIBDIR</varname> after installation,
      this solution can be applied:</para>

    <programlisting>(cd ${STAGEDIR}${PREFIX} \
  &amp;&amp; ${PYTHON_CMD} ${PYTHON_LIBDIR}/compileall.py \
   -d ${PREFIX} -f ${PYTHONPREFIX_SITELIBDIR:S;${PREFIX}/;;})</programlisting>

    <para xml:lang="en">This recompiles the sources with a path relative to the
      stage directory, and prepends the value of
      <varname>PREFIX</varname> to the file name recorded in the
      byte-compiled output file by <literal>-d</literal>.
      <literal>-f</literal> is required to force recompilation, and
      the <literal>:S;${PREFIX}/;;</literal> strips prefixes from
      the value of <varname>PYTHONPREFIX_SITELIBDIR</varname>
      to make it relative to
      <varname>PREFIX</varname>.</para>
  </sect1>

  <sect1 xml:id="using-tcl">
    <title>使用 <application>Tcl/Tk</application></title>

    <para xml:lang="en">The Ports Collection supports parallel installation of
      multiple <application>Tcl/Tk</application> versions.  Ports
      should try to support at least the default
      <application>Tcl/Tk</application> version and higher with
      <literal>USES=tcl</literal>.  It is possible to specify the
      desired version of <command>tcl</command> by appending
      <literal>:<replaceable>xx</replaceable></literal>, for example,
      <literal>USES=tcl:85</literal>.</para>

    <table frame="none" xml:id="using-tcl-variables">
      <title xml:lang="en">The Most Useful Read-Only Variables for Ports That Use
	<application>Tcl/Tk</application></title>

      <tgroup cols="2">
	<tbody>
	  <row>
	    <entry><varname>TCL_VER</varname></entry>
	    <entry xml:lang="en"> chosen major.minor version of
	      <application>Tcl</application></entry>
	  </row>

	  <row>
	    <entry><varname>TCLSH</varname></entry>
	    <entry xml:lang="en"> full path of the <application>Tcl</application>
	      interpreter</entry>
	  </row>

	  <row>
	    <entry><varname>TCL_LIBDIR</varname></entry>
	    <entry xml:lang="en"> path of the <application>Tcl</application>
	      libraries</entry>
	  </row>

	  <row>
	    <entry><varname>TCL_INCLUDEDIR</varname></entry>
	    <entry xml:lang="en"> path of the <application>Tcl</application> C
	      header files</entry>
	  </row>

	  <row>
	    <entry><varname>TK_VER</varname></entry>
	    <entry xml:lang="en"> chosen major.minor version of
	      <application>Tk</application></entry>
	  </row>

	  <row>
	    <entry><varname>WISH</varname></entry>
	    <entry xml:lang="en"> full path of the <application>Tk</application>
	      interpreter</entry>
	  </row>

	  <row>
	    <entry><varname>TK_LIBDIR</varname></entry>
	    <entry xml:lang="en"> path of the <application>Tk</application>
	      libraries</entry>
	  </row>

	  <row>
	    <entry><varname>TK_INCLUDEDIR</varname></entry>
	    <entry xml:lang="en"> path of the <application>Tk</application> C header
	      files</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para xml:lang="en">See the <link linkend="uses-tcl"><literal>USES=tcl</literal></link> and
      <link linkend="uses-tk"><literal>USES=tk</literal></link> of
      <xref linkend="uses-values"/> for a full description of those
      variables.  A complete list of those variables is available in
      <filename>/usr/ports/Mk/Uses/tcl.mk</filename>.</para>
  </sect1>

  <sect1 xml:id="using-emacs">
    <title>使用 Emacs</title>

    <para xml:lang="en">This section is yet to be written.</para>
  </sect1>

  <sect1 xml:id="using-ruby">
    <title>使用 Ruby</title>

    <table frame="none" xml:id="using-ruby-variables">
      <title xml:lang="en">Useful Variables for Ports That Use Ruby</title>

      <tgroup cols="2">
	<thead>
	  <row>
	    <entry xml:lang="en">Variable</entry>
	    <entry>描述</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><varname>USE_RUBY</varname></entry>
	    <entry xml:lang="en">The port requires Ruby.</entry>
	  </row>

	  <row>
	    <entry><varname>USE_RUBY_EXTCONF</varname></entry>
	    <entry xml:lang="en">The port uses <filename>extconf.rb</filename> to
	      configure.</entry>
	  </row>

	  <row>
	    <entry><varname>USE_RUBY_SETUP</varname></entry>
	    <entry xml:lang="en">The port uses <filename>setup.rb</filename> to
	      configure.</entry>
	  </row>

	  <row>
	    <entry><varname>RUBY_SETUP</varname></entry>
	    <entry xml:lang="en">Set to the alternative name of
	      <filename>setup.rb</filename>.  Common value is
	      <filename>install.rb</filename>.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para xml:lang="en">This table shows the selected variables available
      to port authors via the ports infrastructure.  These variables
      are used to install files into their proper locations.
      Use them in <filename>pkg-plist</filename> as much as
      possible.  Do not redefine these variables in the port.</para>

    <table frame="none" xml:id="using-ruby-variables-ro">
      <title xml:lang="en">Selected Read-Only Variables for Ports That Use
	Ruby</title>

      <tgroup cols="3">
	<thead>
	  <row>
	    <entry xml:lang="en">Variable</entry>
	    <entry>描述</entry>
	    <entry xml:lang="en">Example value</entry>
	  </row>
	</thead>
	<tbody>

	  <row>
	    <entry><varname>RUBY_PKGNAMEPREFIX</varname></entry>
	    <entry xml:lang="en">Used as a <varname>PKGNAMEPREFIX</varname> to
	      distinguish packages for different Ruby
	      versions.</entry>
	    <entry><literal>ruby19-</literal></entry>
	  </row>

	  <row>
	    <entry><varname>RUBY_VERSION</varname></entry>
	    <entry xml:lang="en">Full version of Ruby in the form of
	      <literal>x.y.z[.p]</literal>.</entry>
	    <entry><literal>1.9.3.484</literal></entry>
	  </row>

	  <row>
	    <entry><varname>RUBY_SITELIBDIR</varname></entry>
	    <entry xml:lang="en">Architecture independent libraries installation
	      path.</entry>
	    <entry><literal>/usr/local/lib/ruby/site_ruby/1.9</literal></entry>
	  </row>

	  <row>
	    <entry><varname>RUBY_SITEARCHLIBDIR</varname></entry>
	    <entry xml:lang="en">Architecture dependent libraries installation
	      path.</entry>
	    <entry><literal>/usr/local/lib/ruby/site_ruby/1.9/amd64-freebsd10</literal></entry>
	  </row>

	  <row>
	    <entry><varname>RUBY_MODDOCDIR</varname></entry>
	    <entry xml:lang="en">Module documentation installation path.</entry>
	    <entry><literal>/usr/local/share/doc/ruby19/patsy</literal></entry>
	  </row>

	  <row>
	    <entry><varname>RUBY_MODEXAMPLESDIR</varname></entry>
	    <entry xml:lang="en">Module examples installation path.</entry>
	    <entry><literal>/usr/local/share/examples/ruby19/patsy</literal></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para xml:lang="en">A complete list of available variables can be found in
      <filename>/usr/ports/Mk/bsd.ruby.mk</filename>.</para>
  </sect1>

  <sect1 xml:id="using-sdl">
    <title>使用 SDL</title>

    <para xml:lang="en"><varname>USE_SDL</varname> is used to
      autoconfigure the dependencies for ports which use an SDL
      based library like <package role="port">devel/sdl12</package>
      and <package role="port">graphics/sdl_image</package>.</para>

    <para xml:lang="en">These SDL libraries for version 1.2 are recognized:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en">sdl: <package role="port">devel/sdl12</package></para>
      </listitem>

      <listitem>
	<para xml:lang="en">console: <package role="port">devel/sdl_console</package></para>
      </listitem>

      <listitem>
	<para xml:lang="en">gfx: <package role="port">graphics/sdl_gfx</package></para>
      </listitem>

      <listitem>
	<para xml:lang="en">image: <package role="port">graphics/sdl_image</package></para>
      </listitem>

      <listitem>
	<para xml:lang="en">mixer: <package role="port">audio/sdl_mixer</package></para>
      </listitem>

      <listitem>
	<para xml:lang="en">mm: <package role="port">devel/sdlmm</package></para>
      </listitem>

      <listitem>
	<para xml:lang="en">net: <package role="port">net/sdl_net</package></para>
      </listitem>

      <listitem>
	<para xml:lang="en">pango: <package role="port">x11-toolkits/sdl_pango</package></para>
      </listitem>

      <listitem>
	<para xml:lang="en">sound: <package role="port">audio/sdl_sound</package></para>
      </listitem>

      <listitem>
	<para xml:lang="en">ttf: <package role="port">graphics/sdl_ttf</package></para>
      </listitem>
    </itemizedlist>

    <para xml:lang="en">These SDL libraries for version 2.0 are recognized:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en">sdl: <package role="port">devel/sdl20</package></para>
      </listitem>

      <listitem>
	<para xml:lang="en">gfx: <package role="port">graphics/sdl2_gfx</package></para>
      </listitem>

      <listitem>
	<para xml:lang="en">image: <package role="port">graphics/sdl2_image</package></para>
      </listitem>

      <listitem>
	<para xml:lang="en">mixer: <package role="port">audio/sdl2_mixer</package></para>
      </listitem>

      <listitem>
	<para xml:lang="en">net: <package role="port">net/sdl2_net</package></para>
      </listitem>

      <listitem>
	<para xml:lang="en">ttf: <package role="port">graphics/sdl2_ttf</package></para>
      </listitem>
    </itemizedlist>

    <para xml:lang="en">Therefore, if a port has a dependency on
      <package role="port">net/sdl_net</package> and
      <package role="port">audio/sdl_mixer</package>,
      the syntax will be:</para>

    <programlisting xml:lang="en">USE_SDL=	net mixer</programlisting>

    <para xml:lang="en">The dependency
      <package role="port">devel/sdl12</package>, which is
      required by <package role="port">net/sdl_net</package>
      and <package role="port">audio/sdl_mixer</package>, is
      automatically added as well.</para>

    <para xml:lang="en">Using <varname>USE_SDL</varname> with entries for
      SDL 1.2, it will automatically:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en">Add a dependency on
	  <application>sdl12-config</application> to
	  <varname>BUILD_DEPENDS</varname></para>
      </listitem>

      <listitem>
	<para xml:lang="en">Add the variable <varname>SDL_CONFIG</varname> to
	  <varname>CONFIGURE_ENV</varname></para>
      </listitem>

      <listitem>
	<para xml:lang="en">Add the dependencies of the selected libraries to
	  <varname>LIB_DEPENDS</varname></para>
      </listitem>
    </itemizedlist>

    <para xml:lang="en">Using <varname>USE_SDL</varname> with entries for
      SDL 2.0, it will automatically:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en">Add a dependency on
	  <application>sdl2-config</application> to
	  <varname>BUILD_DEPENDS</varname></para>
      </listitem>

      <listitem>
	<para xml:lang="en">Add the variable <varname>SDL2_CONFIG</varname> to
	  <varname>CONFIGURE_ENV</varname></para>
      </listitem>

      <listitem>
	<para xml:lang="en">Add the dependencies of the selected libraries to
	  <varname>LIB_DEPENDS</varname></para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 xml:id="using-wx">
    <title>使用 <application>wxWidgets</application></title>

    <para xml:lang="en">This section describes the status of the
      <application>wxWidgets</application> libraries in the ports
      tree and its integration with the ports system.</para>

    <sect2 xml:id="wx-introduction">
      <title>楔子</title>

      <para xml:lang="en">There are many versions of the
	<application>wxWidgets</application> libraries which
	conflict between them (install files under the same name).
	In the ports tree this problem has been solved by installing
	each version under a different name using version number
	suffixes.</para>

      <para xml:lang="en">The obvious disadvantage of this is that each
	application has to be modified to find the expected version.
	Fortunately, most of the applications call the
	<command>wx-config</command> script to determine the
	necessary compiler and linker flags.  The script is named
	differently for every available version.  Majority of
	applications respect an environment variable, or accept a
	configure argument, to specify which
	<command>wx-config</command> script to call.  Otherwise they
	have to be patched.</para>
    </sect2>

    <sect2 xml:id="wx-version">
      <title xml:lang="en">Version Selection</title>

      <para xml:lang="en">To make the port use a specific version of
	<application>wxWidgets</application> there are two variables
	available for defining (if only one is defined the other
	will be set to a default value):</para>

      <table xml:id="wx-ver-sel-table" frame="none">
	<title xml:lang="en">Variables to Select
	  <application>wxWidgets</application> Versions</title>

	<tgroup cols="3">
	  <thead>
	    <row>
	      <entry xml:lang="en">Variable</entry>
	      <entry>描述</entry>
	      <entry xml:lang="en">Default value</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>USE_WX</varname></entry>
	      <entry xml:lang="en">List of versions the port can use</entry>
	      <entry xml:lang="en">All available versions</entry>
	    </row>

	    <row>
	      <entry><varname>USE_WX_NOT</varname></entry>
	      <entry xml:lang="en">List of versions the port cannot use</entry>
	      <entry xml:lang="en">None</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para xml:lang="en">The available
	<application>wxWidgets</application> versions and the
	corresponding ports in the tree are:</para>

      <table frame="none" xml:id="wx-widgets-versions-table">
	<title xml:lang="en">Available <application>wxWidgets</application>
	  Versions</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>版本</entry>
	      <entry>Port</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><literal>2.4</literal></entry>
	      <entry><package role="port">x11-toolkits/wxgtk24</package></entry>
	    </row>

	    <row>
	      <entry><literal>2.6</literal></entry>
	      <entry><package role="port">x11-toolkits/wxgtk26</package></entry>
	    </row>

	    <row>
	      <entry><literal>2.8</literal></entry>
	      <entry><package role="port">x11-toolkits/wxgtk28</package></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <note>
	<para xml:lang="en">The versions starting from <literal>2.5</literal> also
	  come in Unicode version and are installed by a slave port
	  named like the normal one plus a
	  <literal>-unicode</literal> suffix, but this can be
	  handled with variables (see
	  <xref linkend="wx-unicode"/>).</para>
      </note>

      <para xml:lang="en">The variables in <xref linkend="wx-ver-sel-table"/> can
	be set to one or more of these combinations
	separated by spaces:</para>

      <table frame="none" xml:id="wx-widgets-versions-specification">
	<title xml:lang="en"><application>wxWidgets</application> Version
	  Specifications</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>描述</entry>
	      <entry>範例</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry>單一版本</entry>
	      <entry><literal>2.4</literal></entry>
	    </row>

	    <row>
	      <entry xml:lang="en">Ascending range</entry>
	      <entry><literal>2.4+</literal></entry>
	    </row>

	    <row>
	      <entry xml:lang="en">Descending range</entry>
	      <entry><literal>2.6-</literal></entry>
	    </row>

	    <row>
	      <entry xml:lang="en">Full range (must be ascending)</entry>
	      <entry><literal>2.4-2.6</literal></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para xml:lang="en">There are also some variables to select the preferred
	versions from the available ones.  They can be set to a list
	of versions, the first ones will have higher
	priority.</para>

      <table frame="none" xml:id="wx-widgets-preferred-version">
	<title xml:lang="en">Variables to Select Preferred
	  <application>wxWidgets</application> Versions</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>名字</entry>
	      <entry xml:lang="en">Designed for</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>WANT_WX_VER</varname></entry>
	      <entry xml:lang="en">the port</entry>
	    </row>

	    <row>
	      <entry><varname>WITH_WX_VER</varname></entry>
	      <entry xml:lang="en">the user</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 xml:id="wx-components">
      <title xml:lang="en">Component Selection</title>

      <para xml:lang="en">There are other applications that, while not being
	<application>wxWidgets</application> libraries, are related
	to them.  These applications can be specified in
	<varname>WX_COMPS</varname>.  These
	components are available:</para>

      <table frame="none" xml:id="wx-widgets-components-table">
	<title xml:lang="en">Available <application>wxWidgets</application>
	  Components</title>

	<tgroup cols="3">
	  <thead>
	    <row>
	      <entry>名字</entry>
	      <entry>描述</entry>
	      <entry xml:lang="en">Version restriction</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><literal>wx</literal></entry>
	      <entry xml:lang="en">main library</entry>
	      <entry xml:lang="en">none</entry>
	    </row>

	    <row>
	      <entry><literal>contrib</literal></entry>
	      <entry xml:lang="en">contributed libraries</entry>
	      <entry><literal>none</literal></entry>
	    </row>

	    <row>
	      <entry><literal>python</literal></entry>
	      <entry xml:lang="en"><application>wxPython</application>
		(<application>Python</application> bindings)</entry>
	      <entry><literal>2.4-2.6</literal></entry>
	    </row>

	    <row>
	      <entry><literal>mozilla</literal></entry>
	      <entry><application>wxMozilla</application></entry>
	      <entry><literal>2.4</literal></entry>
	    </row>

	    <row>
	      <entry><literal>svg</literal></entry>
	      <entry><application>wxSVG</application></entry>
	      <entry><literal>2.6</literal></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para xml:lang="en">The dependency type can be selected for each component
	by adding a suffix separated by a semicolon.  If not present
	then a default type will be used (see
	<xref linkend="wx-def-dep-types"/>).  These types
	are available:</para>

      <table frame="none" xml:id="wx-widgets-dependency-table">
	<title xml:lang="en">Available <application>wxWidgets</application>
	  Dependency Types</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>名字</entry>
	      <entry>描述</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><literal>build</literal></entry>
	      <entry xml:lang="en">Component is required for building, equivalent
		to <varname>BUILD_DEPENDS</varname></entry>
	    </row>

	    <row>
	      <entry><literal>run</literal></entry>
	      <entry xml:lang="en">Component is required for running, equivalent
		to <varname>RUN_DEPENDS</varname></entry>
	    </row>

	    <row>
	      <entry><literal>lib</literal></entry>
	      <entry xml:lang="en">Component is required for building and running,
		equivalent to <varname>LIB_DEPENDS</varname></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para xml:lang="en">The default values for the components are detailed in
	this table:</para>

      <table xml:id="wx-def-dep-types" frame="none">
	<title xml:lang="en">Default <application>wxWidgets</application>
	  Dependency Types</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>元件</entry>
	      <entry xml:lang="en">Dependency type</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><literal>wx</literal></entry>
	      <entry><literal>lib</literal></entry>
	    </row>

	    <row>
	      <entry><literal>contrib</literal></entry>
	      <entry><literal>lib</literal></entry>
	    </row>

	    <row>
	      <entry><literal>python</literal></entry>
	      <entry><literal>run</literal></entry>
	    </row>

	    <row>
	      <entry><literal>mozilla</literal></entry>
	      <entry><literal>lib</literal></entry>
	    </row>

	    <row>
	      <entry><literal>svg</literal></entry>
	      <entry><literal>lib</literal></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <example xml:id="wx-components-example">
	<title xml:lang="en">Selecting <application>wxWidgets</application>
	  Components</title>

	<para xml:lang="en">This fragment corresponds to a port which
	  uses <application>wxWidgets</application> version
	  <literal>2.4</literal> and its contributed
	  libraries.</para>

	<programlisting>USE_WX=		2.4
WX_COMPS=	wx contrib</programlisting>
      </example>
    </sect2>

    <sect2 xml:id="wx-unicode">
      <title xml:lang="en">Unicode</title>

      <para xml:lang="en">The <application>wxWidgets</application> library
	supports Unicode since version <literal>2.5</literal>.  In
	the ports tree both versions are available and can be
	selected with these variables:</para>

      <table xml:id="wx-unicode-var-table" frame="none">
	<title xml:lang="en">Variables to Select Unicode in
	  <application>wxWidgets</application>
	  Versions</title>

	<tgroup cols="3">
	  <thead>
	    <row>
	      <entry xml:lang="en">Variable</entry>
	      <entry>描述</entry>
	      <entry xml:lang="en">Designed for</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>WX_UNICODE</varname></entry>
	      <entry xml:lang="en">The port works <emphasis>only</emphasis> with
		the Unicode version</entry>
	      <entry xml:lang="en">the port</entry>
	    </row>

	    <row>
	      <entry><varname>WANT_UNICODE</varname></entry>
	      <entry xml:lang="en">The port works with both versions but prefers
		the Unicode one</entry>
	      <entry xml:lang="en">the port</entry>
	    </row>

	    <row>
	      <entry><varname>WITH_UNICODE</varname></entry>
	      <entry xml:lang="en">The port will use the Unicode version</entry>
	      <entry xml:lang="en">the user</entry>
	    </row>

	    <row>
	      <entry><varname>WITHOUT_UNICODE</varname></entry>
	      <entry xml:lang="en">The port will use the normal version if
		supported (when <varname>WX_UNICODE</varname> is not
		defined)</entry>
	      <entry xml:lang="en">the user</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <warning>
	<para xml:lang="en">Do not use <varname>WX_UNICODE</varname> for ports
	  that can use both Unicode and normal versions.  If
	  the port needs to use Unicode by default, define
	  <varname>WANT_UNICODE</varname> instead.</para>
      </warning>
    </sect2>

    <sect2 xml:id="wx-version-detection">
      <title xml:lang="en">Detecting Installed Versions</title>

      <para xml:lang="en">To detect an installed version, define
	<varname>WANT_WX</varname>.  If it is not set to a
	specific version then the components will have a version
	suffix.  <varname>HAVE_WX</varname> will be
	filled after detection.</para>

      <example xml:id="wx-ver-det-example">
	<title xml:lang="en">Detecting Installed
	  <application>wxWidgets</application> Versions and
	  Components</title>

	<para xml:lang="en">This fragment can be used in a port that uses
	  <application>wxWidgets</application> if it is installed,
	  or an option is selected.</para>

	<programlisting>WANT_WX=	yes

.include &lt;bsd.port.pre.mk&gt;

.if defined(WITH_WX) || !empty(PORT_OPTIONS:MWX) || !empty(HAVE_WX:Mwx-2.4)
USE_WX=			2.4
CONFIGURE_ARGS+=	--enable-wx
.endif</programlisting>

	<para xml:lang="en">This fragment can be used in a port that
	  enables <application>wxPython</application> support if it
	  is installed or if an option is selected, in addition to
	  <application>wxWidgets</application>, both version
	  <literal>2.6</literal>.</para>

	<programlisting>USE_WX=		2.6
WX_COMPS=	wx
WANT_WX=	2.6

.include &lt;bsd.port.pre.mk&gt;

.if defined(WITH_WXPYTHON) || !empty(PORT_OPTIONS:MWXPYTHON) || !empty(HAVE_WX:Mpython)
WX_COMPS+=		python
CONFIGURE_ARGS+=	--enable-wxpython
.endif</programlisting>
      </example>
    </sect2>

    <sect2 xml:id="wx-defined-variables">
      <title xml:lang="en">Defined Variables</title>

      <para xml:lang="en">These variables are available in the port (after
	defining one from
	<xref linkend="wx-ver-sel-table"/>).</para>

      <table frame="none" xml:id="wx-widgets-variables">
	<title xml:lang="en">Variables Defined for Ports That Use
	  <application>wxWidgets</application></title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>名字</entry>
	      <entry>描述</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>WX_CONFIG</varname></entry>
	      <entry xml:lang="en">The path to the
		<application>wxWidgets</application>
		<command>wx-config</command> script (with different
		name)</entry>
	    </row>

	    <row>
	      <entry><varname>WXRC_CMD</varname></entry>
	      <entry xml:lang="en">The path to the
		<application>wxWidgets</application>
		<command>wxrc</command> program (with different
		name)</entry>
	    </row>

	    <row>
	      <entry><varname>WX_VERSION</varname></entry>
	      <entry xml:lang="en">The <application>wxWidgets</application>
		version that is going to be used (for example,
		<literal>2.6</literal>)</entry>
	    </row>

	    <row>
	      <entry><varname>WX_UNICODE</varname></entry>
	      <entry xml:lang="en">If not defined but Unicode is going to be used
		then it will be defined</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 xml:id="wx-premk">
      <title xml:lang="en">Processing in
	<filename>bsd.port.pre.mk</filename></title>

      <para xml:lang="en">Define <varname>WX_PREMK</varname> to be able to use the
	variables right after including
	<filename>bsd.port.pre.mk</filename>.</para>

      <important>
	<para xml:lang="en">When defining <varname>WX_PREMK</varname>, then the
	  version, dependencies, components and defined variables
	  will not change if modifying the
	  <application>wxWidgets</application> port variables
	  <emphasis>after</emphasis> including
	  <filename>bsd.port.pre.mk</filename>.</para>
      </important>

      <example xml:id="wx-premk-example">
	<title xml:lang="en">Using <application>wxWidgets</application> Variables
	  in Commands</title>

	<para xml:lang="en">This fragment illustrates the use of
	  <varname>WX_PREMK</varname> by running the
	  <command>wx-config</command> script to obtain the full
	  version string, assign it to a variable and pass it to the
	  program.</para>

	<programlisting>USE_WX=		2.4
WX_PREMK=	yes

.include &lt;bsd.port.pre.mk&gt;

.if exists(${WX_CONFIG})
VER_STR!=	${WX_CONFIG} --release

PLIST_SUB+=	VERSION="${VER_STR}"
.endif</programlisting>
      </example>

      <note>
	<para xml:lang="en">The <application>wxWidgets</application> variables can
	  be safely used in commands when they are inside targets
	  without the need of <varname>WX_PREMK</varname>.</para>
      </note>
    </sect2>

    <sect2 xml:id="wx-additional-config-args">
      <title xml:lang="en">Additional <command>configure</command>
	Arguments</title>

      <para xml:lang="en">Some GNU <command>configure</command> scripts cannot
	find <application>wxWidgets</application> with just the
	<literal>WX_CONFIG</literal> environment variable set,
	requiring additional arguments.
	<varname>WX_CONF_ARGS</varname> can be used for
	provide them.</para>

      <table frame="none" xml:id="wx-conf-args-values">
	<title xml:lang="en">Legal Values for
	  <varname>WX_CONF_ARGS</varname></title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry xml:lang="en">Possible value</entry>
	      <entry xml:lang="en">Resulting argument</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><literal>absolute</literal></entry>
	      <entry><literal>--with-wx-config=${WX_CONFIG}</literal></entry>
	    </row>

	    <row>
	      <entry><literal>relative</literal></entry>
	      <entry><literal>--with-wx=${LOCALBASE} --with-wx-config=${WX_CONFIG:T}</literal></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 xml:id="using-lua">
    <title>使用 <application>Lua</application></title>

    <para xml:lang="en">This section describes the status of the
      <application>Lua</application> libraries in the ports tree and
      its integration with the ports system.</para>

    <sect2 xml:id="lua-introduction">
      <title>楔子</title>

      <para xml:lang="en">There are many versions of the
	<application>Lua</application> libraries and corresponding
	interpreters, which conflict between them (install files
	under the same name).  In the ports tree this problem has
	been solved by installing each version under a different
	name using version number suffixes.</para>

      <para xml:lang="en">The obvious disadvantage of this is that each
	application has to be modified to find the expected version.
	But it can be solved by adding some additional flags to the
	compiler and linker.</para>
    </sect2>

    <sect2 xml:id="lua-version">
      <title xml:lang="en">Version Selection</title>

      <para xml:lang="en">A port using <application>Lua</application> only needs to
	have this line:</para>

      <programlisting>USES=	lua</programlisting>

      <para xml:lang="en">If a specific version of Lua is needed, instructions on
	how to select it are given in the <link linkend="uses-lua"><literal>USES=lua</literal></link> part
	of <xref linkend="uses-values"/>.</para>
    </sect2>

    <sect2 xml:id="lua-defined-variables">
      <title xml:lang="en">Defined Variables</title>

      <para xml:lang="en">These variables are available in the port.</para>

      <table frame="none" xml:id="using-lua-variables-ports">
	<title xml:lang="en">Variables Defined for Ports That Use
	  <application>Lua</application></title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>名字</entry>
	      <entry>描述</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>LUA_VER</varname></entry>
	      <entry xml:lang="en">The <application>Lua</application> version that
		is going to be used (for example,
		<literal>5.1</literal>)</entry>
	    </row>

	    <row>
	      <entry><varname>LUA_VER_STR</varname></entry>
	      <entry xml:lang="en">The <application>Lua</application> version
		without the dots (for example,
		<literal>51</literal>)</entry>
	    </row>

	    <row>
	      <entry><varname>LUA_PREFIX</varname></entry>
	      <entry xml:lang="en">The prefix where <application>Lua</application>
		(and components) is installed</entry>
	    </row>

	    <row>
	      <entry><varname>LUA_SUBDIR</varname></entry>
	      <entry xml:lang="en">The directory under
		<filename>${PREFIX}/bin</filename>,
		<filename>${PREFIX}/share</filename> and
		<filename>${PREFIX}/lib</filename> where
		<application>Lua</application> is installed</entry>
	    </row>

	    <row>
	      <entry><varname>LUA_INCDIR</varname></entry>
	      <entry xml:lang="en">The directory where
		<application>Lua</application> and
		<application>tolua</application> header files are
		installed</entry>
	    </row>

	    <row>
	      <entry><varname>LUA_LIBDIR</varname></entry>
	      <entry xml:lang="en">The directory where
		<application>Lua</application> and
		<application>tolua</application> libraries are
		installed</entry>
	    </row>

	    <row>
	      <entry><varname>LUA_MODLIBDIR</varname></entry>
	      <entry xml:lang="en">The directory where
		<application>Lua</application> module libraries
		(<filename>.so</filename>) are installed</entry>
	    </row>

	    <row>
	      <entry><varname>LUA_MODSHAREDIR</varname></entry>
	      <entry xml:lang="en">The directory where
		<application>Lua</application> modules
		(<filename>.lua</filename>) are installed</entry>
	    </row>

	    <row>
	      <entry><varname>LUA_PKGNAMEPREFIX</varname></entry>
	      <entry xml:lang="en">The package name prefix used by
		<application>Lua</application> modules</entry>
	    </row>

	    <row>
	      <entry><varname>LUA_CMD</varname></entry>
	      <entry xml:lang="en">The path to the <application>Lua</application>
		interpreter</entry>
	    </row>

	    <row>
	      <entry><varname>LUAC_CMD</varname></entry>
	      <entry xml:lang="en">The path to the <application>Lua</application>
		compiler</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 xml:id="using-iconv">
    <title>使用 <command>iconv</command></title>

    <para xml:lang="en">After 2013-10-08 (<revnumber>254273</revnumber>),
      FreeBSD  10-CURRENT and newer versions have a native
      <command>iconv</command> in the operating system.  On earlier
      versions, <package role="port">converters/libiconv</package>
      was used as a dependency.</para>

    <para xml:lang="en">For software that needs <command>iconv</command>, define
      <literal>USES=iconv</literal>.  FreeBSD versions before
      10-CURRENT on 2013-08-13 (<revnumber>254273</revnumber>) do
      not have a native <command>iconv</command>.  On these earlier
      versions, a dependency on
      <package role="port">converters/libiconv</package> will be
      added automatically.</para>

    <para xml:lang="en">When a port defines <literal>USES=iconv</literal>, these
      variables will be available:</para>

    <informaltable frame="none" pgwide="0">
      <tgroup cols="4">
	<thead>
	  <row>
	    <entry xml:lang="en">Variable name</entry>
	    <entry xml:lang="en">Purpose</entry>
	    <entry xml:lang="en">Value before FreeBSD 10-CURRENT
	      <revnumber>254273</revnumber> (2013-08-13)</entry>
	    <entry xml:lang="en">Value after FreeBSD 10-CURRENT
	      <revnumber>254273</revnumber> (2013-08-13)</entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><varname>ICONV_CMD</varname></entry>
	    <entry xml:lang="en">Directory where the <command>iconv</command>
	      binary resides</entry>
	    <entry><literal>${LOCALBASE}/bin/iconv</literal></entry>
	    <entry><filename>/usr/bin/iconv</filename></entry>
	  </row>

	  <row>
	    <entry><varname>ICONV_LIB</varname></entry>
	    <entry xml:lang="en"><command>ld</command> argument to link to
	      <filename>libiconv</filename> (if needed)</entry>
	    <entry><literal>-liconv</literal></entry>
	    <entry>(空)</entry>
	  </row>

	  <row>
	    <entry><varname>ICONV_PREFIX</varname></entry>
	    <entry xml:lang="en">Directory where the <command>iconv</command>
	      implementation resides (useful for configure
	      scripts)</entry>
	    <entry><literal>${LOCALBASE}</literal></entry>
	    <entry><filename>/usr</filename></entry>
	  </row>

	  <row>
	    <entry><varname>ICONV_CONFIGURE_ARG</varname></entry>
	    <entry xml:lang="en">Preconstructed configure argument for
	      configure scripts</entry>
	    <entry><literal>--with-libiconv-prefix=${LOCALBASE}</literal></entry>
	    <entry>(空)</entry>
	  </row>

	  <row>
	    <entry><varname>ICONV_CONFIGURE_BASE</varname></entry>
	    <entry xml:lang="en">Preconstructed configure argument for
	      configure scripts</entry>
	    <entry><literal>--with-libiconv=${LOCALBASE}</literal></entry>
	    <entry>(空)</entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>

    <para xml:lang="en">These two examples automatically populate the variables
      with the correct value for systems using
      <package role="port">converters/libiconv</package> or the
      native <command>iconv</command> respectively:</para>

    <example xml:id="iconv-simple-use">
      <title xml:lang="en">Simple <command>iconv</command> Usage</title>

      <programlisting>USES=		iconv
LDFLAGS+=	-L${LOCALBASE}/lib ${ICONV_LIB}</programlisting>
    </example>

    <example xml:id="iconv-configure-use">
      <title xml:lang="en"><command>iconv</command> Usage with
	<command>configure</command></title>

      <programlisting>USES=		iconv
CONFIGURE_ARGS+=${ICONV_CONFIGURE_ARG}</programlisting>
    </example>

    <para xml:lang="en">As shown above, <varname>ICONV_LIB</varname> is empty when
      a native <command>iconv</command> is present.  This can be
      used to detect the native <command>iconv</command> and respond
      appropriately.</para>

    <para xml:lang="en">Sometimes a program has an <command>ld</command> argument
      or search path hardcoded in a <filename>Makefile</filename> or
      configure script.  This approach can be used to solve that
      problem:</para>

    <example xml:id="iconv-reinplace">
      <title xml:lang="en">Fixing Hardcoded <literal>-liconv</literal></title>

      <programlisting>USES=		iconv

post-patch:
	@${REINPLACE_CMD} -e 's/-liconv/${ICONV_LIB}/' ${WRKSRC}/Makefile</programlisting>
    </example>

    <para xml:lang="en">In some cases it is necessary to set alternate values or
      perform operations depending on whether there is a native
      <command>iconv</command>.
      <filename>bsd.port.pre.mk</filename> must be included before
      testing the value of <varname>ICONV_LIB</varname>:</para>

    <example xml:id="iconv-conditional">
      <title xml:lang="en">Checking for Native <command>iconv</command>
	Availability</title>

      <programlisting>USES=		iconv

.include &lt;bsd.port.pre.mk&gt;

post-patch:
.if empty(ICONV_LIB)
	# native iconv detected
	@${REINPLACE_CMD} -e 's|iconv||' ${WRKSRC}/Config.sh
.endif

.include &lt;bsd.port.post.mk&gt;</programlisting>
    </example>
  </sect1>

  <sect1 xml:id="using-xfce">
    <title>使用 Xfce</title>

    <para xml:lang="en">Ports that need <application>Xfce</application> libraries or
      applications set <literal>USES=xfce</literal>.</para>

    <para xml:lang="en">Specific <application>Xfce</application> library and
      application dependencies are set with values assigned to
      <varname>USE_XFCE</varname>.  They are defined in
      <filename>/usr/ports/Mk/Uses/xfce.mk</filename>.  The possible
      values are:</para>

    <variablelist>
      <title><varname>USE_XFCE</varname> 的值</title>

      <varlistentry>
	<term>garcon</term>

	<listitem>
	  <para><package role="port">sysutils/garcon</package></para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>libexo</term>

	<listitem>
	  <para><package role="port">x11/libexo</package></para>
	</listitem>
      </varlistentry>

      <varlistentry>

	<term>libgui</term>

	<listitem>
	  <para><package role="port">x11-toolkits/libxfce4gui</package></para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>libmenu</term>

	<listitem>
	  <para><package role="port">x11/libxfce4menu</package></para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>libutil</term>

	<listitem>
	  <para><package role="port">x11/libxfce4util</package></para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>panel</term>

	<listitem>
	  <para><package role="port">x11-wm/xfce4-panel</package></para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>thunar</term>

	<listitem>
	  <para><package role="port">x11-fm/thunar</package></para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>xfconf</term>

	<listitem>
	  <para><package role="port">x11/xfce4-conf</package></para>
	</listitem>
      </varlistentry>
    </variablelist>

    <example xml:id="use-xfce">
      <title><varname>USES=xfce</varname> 範例</title>

      <programlisting>USES=		xfce
USE_XFCE=	libmenu</programlisting>
    </example>

    <example xml:id="use-xfce-gtk3">
      <title xml:lang="en">Using Xfce's Own GTK3 Widgets</title>

      <para xml:lang="en">In this example, the ported application uses the
	<application>GTK3</application>-specific widgets <package role="port">x11/libxfce4menu</package> and <package role="port">x11/xfce4-conf</package>.</para>

      <programlisting>USES=		xfce:gtk3
USE_XFCE=	libmenu xfconf</programlisting>
    </example>

    <tip>
      <para xml:lang="en"><application>Xfce</application> components included this
	way will automatically include any dependencies they need.  It
	is no longer necessary to specify the entire list.  If the
	port only needs <package role="port">x11-wm/xfce4-panel</package>, use:</para>

      <programlisting>USES=		xfce
USE_XFCE=	panel</programlisting>

      <para xml:lang="en">There is no need to list the components <package role="port">x11-wm/xfce4-panel</package> needs itself like
	this:</para>

      <programlisting>USES=		xfce
USE_XFCE=	libexo libmenu libutil panel</programlisting>

      <para xml:lang="en">However, <application>Xfce</application> components and
	non-<application>Xfce</application> dependencies of the port
	must be included explicitly.  Do not count on an
	<application>Xfce</application> component to provide a
	sub-dependency other than itself for the main port.</para>
    </tip>
  </sect1>

  <sect1 xml:id="using-mozilla">
    <title>使用 Mozilla</title>

    <table frame="none" xml:id="using-mozilla-variables">
      <title xml:lang="en">Variables for Ports That Use Mozilla</title>

      <tgroup cols="2">
	<tbody>

	  <row>
	    <entry><varname>USE_GECKO</varname></entry>
	    <entry xml:lang="en">Gecko backend the port can handle.  Possible
	      values: <literal>libxul</literal>
	      (<filename>libxul.so</filename>),
	      <literal>seamonkey</literal>
	      (<filename>libgtkembedmoz.so</filename>, deprecated,
	      must not be used any more).</entry>
	  </row>

	  <row>
	    <entry><varname>USE_FIREFOX</varname></entry>
	    <entry xml:lang="en">The port requires Firefox as a runtime
	      dependency.  Possible values: <literal>yes</literal>
	      (get default version), <literal>40</literal>,
	      <literal>36</literal>, <literal>35</literal>.  Default
	      dependency is on version
	      <literal>40</literal>.</entry>
	  </row>

	  <row>
	    <entry><varname>USE_FIREFOX_BUILD</varname></entry>
	    <entry xml:lang="en">The port requires Firefox as a buildtime
	      dependency.  Possible values: see USE_FIREFOX.  This
	      automatically sets USE_FIREFOX and assigns the same
	      value.</entry>
	  </row>

	  <row>
	    <entry><varname>USE_SEAMONKEY</varname></entry>
	    <entry xml:lang="en">The port requires SeaMonkey as a runtime
	      dependency.  Possible values: <literal>yes</literal>
	      (get default version), <literal>20</literal>,
	      <literal>11</literal> (deprecated, must not be used
	      any more).  Default dependency is on version
	      <literal>20</literal>.</entry>
	  </row>

	  <row>
	    <entry><varname>USE_SEAMONKEY_BUILD</varname></entry>
	    <entry xml:lang="en">The port requires SeaMonkey as a buildtime
	      dependency.  Possible values: see USE_SEAMONKEY.  This
	      automatically sets USE_SEAMONKEY and assigns the same
	      value.</entry>
	  </row>

	  <row>
	    <entry><varname>USE_THUNDERBIRD</varname></entry>
	    <entry xml:lang="en">The port requires Thunderbird as a runtime
	      dependency.  Possible values: <literal>yes</literal>
	      (get default version), <literal>31</literal>,
	      <literal>30</literal> (deprecated, must not be used
	      any more).  Default dependency is on version
	      <literal>31</literal>.</entry>
	  </row>

	  <row>
	    <entry><varname>USE_THUNDERBIRD_BUILD</varname></entry>
	    <entry xml:lang="en">The port requires Thunderbird as a buildtime
	      dependency.  Possible values: see USE_THUNDERBIRD.
	      This automatically sets USE_THUNDERBIRD and assigns
	      the same value.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para xml:lang="en">A complete list of available variables can be found in
      <filename>/usr/ports/Mk/bsd.gecko.mk</filename>.</para>
  </sect1>

  <sect1 xml:id="using-databases">
    <title>使用 Databases</title>

    <table frame="none" xml:id="using-databases-variables">
      <title xml:lang="en">Variables for Ports Using Databases</title>

      <tgroup cols="2">
	<thead>
	  <row>
	    <entry xml:lang="en">Variable</entry>
	    <entry xml:lang="en">Means</entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><varname>USE_BDB</varname></entry>
	    <entry xml:lang="en">If variable is set to <literal>yes</literal>,
	      add dependency on
	      <package role="port">databases/db5</package>
	      port.  The variable may also be set to values: 48, 5
	      or 6.  It is possible to declare a range of acceptable
	      values, <varname>USE_BDB</varname>=48+ will find the
	      highest installed version, and fall back to 4.8 if
	      nothing else is installed.
	      <varname>WANT_BDB_VER</varname> will always build this
	      port with a specific version of the Berkely DB.
	      <varname>INVALID_BDB_VER</varname> can be used to
	      specify a version that cannot be used.</entry>
	  </row>

	  <row>
	    <entry><varname>USE_MYSQL</varname></entry>
	    <entry xml:lang="en">If the variable is set to <literal>yes</literal>,
	      add a dependency on the <package role="port">databases/mysql56-client</package> port.
	      An associated variable,
	      <varname>WANT_MYSQL_VER</varname>, may be set to
	      values such as 51, 55, or 60.  Additionally to
	      specify use of Percona, use 56p, or for MariaDB, use
	      53m, 55m or 100m.</entry>
	  </row>

	  <row>
	    <entry><varname>USE_PGSQL</varname></entry>
	    <entry xml:lang="en">Retired in favor of <link linkend="uses-pgsql"><literal>USES=pgsql</literal></link>.</entry>
	  </row>

	  <row>
	    <entry xml:lang="en"><varname>USE_SQLITE</varname></entry>
	    <entry xml:lang="en">If set to <literal>yes</literal>, add
	      dependency on
	      <package role="port">databases/sqlite3</package>
	      port.  The variable may also be set to 3 or 2, to add
	      a dependency on 3.x or 2.x, respectively.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para xml:lang="en">More details are available in <link xlink:href="http://svnweb.FreeBSD.org/ports/head/Mk/bsd.database.mk?view=markup">bsd.database.mk</link>.</para>
  </sect1>

  <sect1 xml:id="rc-scripts">
    <title xml:lang="en">Starting and Stopping Services (<literal>rc</literal>
      Scripts)</title>

    <para xml:lang="en"><filename>rc.d</filename> scripts are used to start
      services on system startup, and to give administrators a
      standard way of stopping, starting and restarting the service.
      Ports integrate into the system <filename>rc.d</filename>
      framework.  Details on its usage can be found in <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/books/handbook/configtuning-rcd.html">the
	rc.d Handbook chapter</link>.  Detailed explanation of
      the available commands is provided in <citerefentry><refentrytitle>rc</refentrytitle><manvolnum>8</manvolnum></citerefentry> and
      <citerefentry><refentrytitle>rc.subr</refentrytitle><manvolnum>8</manvolnum></citerefentry>.  Finally, there is
      <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/articles/rc-scripting">an
	article</link> on practical aspects of
      <filename>rc.d</filename> scripting.</para>

    <para xml:lang="en">With a mythical port called
      <replaceable>doorman</replaceable>, which needs to start a
      <replaceable>doormand</replaceable> daemon.  Add the following
      to the <filename>Makefile</filename>:</para>

    <programlisting xml:lang="en">USE_RC_SUBR=	<replaceable>doormand</replaceable></programlisting>

    <para xml:lang="en">Multiple scripts may be listed and will be installed.
      Scripts must be placed in the <filename>files</filename>
      subdirectory and a <literal>.in</literal> suffix must be added
      to their filename.  Standard <varname>SUB_LIST</varname>
      expansions will be ran against this file.  Use of the
      <literal>%%PREFIX%%</literal> and
      <literal>%%LOCALBASE%%</literal> expansions is strongly
      encouraged as well.  More on <varname>SUB_LIST</varname> in
      <link linkend="using-sub-files">the relevant
	section</link>.</para>

    <para xml:lang="en">As of FreeBSD 6.1-RELEASE, local
      <filename>rc.d</filename> scripts (including those installed
      by ports) are included in the overall <citerefentry><refentrytitle>rcorder</refentrytitle><manvolnum>8</manvolnum></citerefentry> of the
      base system.</para>

    <para xml:lang="en">An example simple <filename>rc.d</filename> script to start
      the doormand daemon:</para>

    <programlisting xml:lang="en">#!/bin/sh

# $FreeBSD$
#
# PROVIDE: <replaceable>doormand</replaceable>
# REQUIRE: LOGIN
# KEYWORD: shutdown
#
# Add these lines to /etc/rc.conf.local or /etc/rc.conf
# to enable this service:
#
# <replaceable>doormand</replaceable>_enable (bool):	Set to NO by default.
#				Set it to YES to enable <replaceable>doormand</replaceable>.
# <replaceable>doormand</replaceable>_config (path):	Set to %%PREFIX%%/etc/<replaceable>doormand/doormand.cf</replaceable>
#				by default.

. /etc/rc.subr

name=<replaceable>doormand</replaceable>
rcvar=<replaceable>doormand</replaceable>_enable

load_rc_config $name

: ${<replaceable>doormand</replaceable>_enable:="NO"}
: ${<replaceable>doormand</replaceable>_config="%%PREFIX%%/etc/<replaceable>doormand/doormand.cf</replaceable>"}

command=%%PREFIX%%/sbin/${name}
pidfile=/var/run/${name}.pid

command_args="<replaceable>-p $pidfile -f $doormand_config</replaceable>"

run_rc_command "$1"</programlisting>

    <para xml:lang="en">Unless there is a very good reason to start the service
      earlier, or it runs as a particular user (other than root), all
      ports scripts must use:</para>

    <programlisting xml:lang="en">REQUIRE: LOGIN</programlisting>

    <para xml:lang="en">If the startup script launches a daemon that must be
      shutdown, the following will trigger a stop of the service on
      system shutdown:</para>

    <programlisting xml:lang="en">KEYWORD: shutdown</programlisting>

    <para xml:lang="en">If the script is not starting a persistent service this is
      not necessary.</para>

    <para xml:lang="en">For optional configuration elements the "="
      style of default variable assignment is preferable to the
      ":=" style here, since the former sets a default
      value only if the variable is unset, and the latter sets one
      if the variable is unset <emphasis>or</emphasis> null.  A user
      might very well include something like:</para>

    <programlisting xml:lang="en"><replaceable>doormand</replaceable>_flags=""</programlisting>

    <para xml:lang="en">in their <filename>rc.conf.local</filename>, and a
      variable substitution using ":=" would
      inappropriately override the user's intention.  The
      <literal>_enable</literal> variable is not optional,
      and must use the ":" for the default.</para>

    <sect2 xml:id="rc-scripts-checklist">
      <title xml:lang="en">Pre-Commit Checklist</title>

      <para xml:lang="en">Before contributing a port with an
	<filename>rc.d</filename> script, and more importantly,
	before committing one, please consult this
	checklist to be sure that it is ready.</para>

      <para xml:lang="en">The <package role="port">devel/rclint</package>
	port can check for most of these, but it is not a
	substitute for proper review.</para>

      <procedure>
	<step>
	  <para xml:lang="en">If this is a new file, does it have a
	    <filename>.sh</filename> extension?  If so, that must be
	    changed to just
	    <filename><replaceable>file</replaceable>.in</filename>
	    since <filename>rc.d</filename> files may not end with
	    that extension.</para>
	</step>

	<step>
	  <para xml:lang="en">Does the file have a
	    <literal>$FreeBSD$</literal> tag?</para>
	</step>

	<step>
	  <para xml:lang="en">Do the name of the file (minus
	    <filename>.in</filename>), the
	    <literal>PROVIDE</literal> line, and
	    <literal>$</literal><replaceable>name</replaceable>
	    all match?  The file name matching
	    <literal>PROVIDE</literal> makes debugging easier,
	    especially for <citerefentry><refentrytitle>rcorder</refentrytitle><manvolnum>8</manvolnum></citerefentry> issues.  Matching the
	    file name and
	    <literal>$</literal><replaceable>name</replaceable>
	    makes it easier to figure out which variables are
	    relevant in <filename>rc.conf[.local]</filename>.  It is
	    also a policy
	    for all new scripts, including those in the base
	    system.</para>
	</step>

	<step>
	  <para xml:lang="en">Is the <literal>REQUIRE</literal> line set to
	    <literal>LOGIN</literal>?  This is mandatory for scripts
	    that run as a non-root user.  If it runs as root, is
	    there a good reason for it to run prior to
	    <literal>LOGIN</literal>?  If not, it must run after
	    so that local scrips can be loosely grouped to a point in
	    <citerefentry><refentrytitle>rcorder</refentrytitle><manvolnum>8</manvolnum></citerefentry> after most everything in the base is
	    already running.</para>
	</step>

	<step>
	  <para xml:lang="en">Does the script start a persistent service?  If so,
	    it must have <literal>KEYWORD:
	      shutdown</literal>.</para>
	</step>

	<step>
	  <para xml:lang="en">Make sure there is no
	    <literal>KEYWORD: FreeBSD</literal> present.  This has
	    not been necessary nor desirable for years.  It is also
	    an indication that the new script was copy/pasted from
	    an old script, so extra caution must be given to the
	    review.</para>
	</step>

	<step>
	  <para xml:lang="en">If the script uses an interpreted language like
	    <command>perl</command>, <command>python</command>, or
	    <command>ruby</command>, make certain that
	    <varname>command_interpreter</varname> is set
	    appropriately, for example, for
	    <application>Perl</application>, by adding
	    <literal>PERL=${PERL}</literal> to
	    <varname>SUB_LIST</varname> and using
	    <literal>%%PERL%%</literal>.  Otherwise,</para>

	  <screen xml:lang="en"><prompt>#</prompt> <userinput>service <replaceable>name</replaceable> stop</userinput></screen>

	  <para xml:lang="en">will probably not work properly.  See
	    <citerefentry><refentrytitle>service</refentrytitle><manvolnum>8</manvolnum></citerefentry> for more information.</para>
	</step>

	<step>
	  <para xml:lang="en">Have all occurrences of
	    <filename>/usr/local</filename> been replaced with
	    <literal>%%PREFIX%%</literal>?</para>
	</step>

	<step>
	  <para xml:lang="en">Do the default variable assignments come after
	    <function>load_rc_config</function>?</para>
	</step>

	<step>
	  <para xml:lang="en">Are there default assignments to empty strings?
	    They should be removed, but double-check that the option
	    is documented in the comments at the top of the
	    file.</para>
	</step>

	<step>
	  <para xml:lang="en">Are things that are set in variables actually used
	    in the script?</para>
	</step>

	<step>
	  <para xml:lang="en">Are options listed in the default
	    <replaceable>name</replaceable><varname>_flags</varname>
	    things that are actually mandatory?  If so, they must
	    be in <varname>command_args</varname>.  The
	    <option>-d</option> option is a red flag (pardon the
	    pun) here, since it is usually the option to
	    “daemonize” the process, and therefore is
	    actually mandatory.</para>
	</step>

	<step>
	  <para xml:lang="en"><varname><replaceable>name</replaceable>_flags</varname>
	    must never be included in
	    <varname>command_args</varname> (and vice versa,
	    although that error is less common).</para>
	</step>

	<step>
	  <para xml:lang="en">Does the script execute any code unconditionally?
	    This is frowned on.  Usually these things must be
	    dealt with through a
	    <function>start_precmd</function>.</para>
	</step>

	<step>
	  <para xml:lang="en">All boolean tests must use the
	    <function>checkyesno</function> function.  No
	    hand-rolled tests for <literal>[Yy][Ee][Ss]</literal>,
	    etc.</para>
	</step>

	<step>
	  <para xml:lang="en">If there is a loop (for example, waiting for
	    something to start) does it have a counter to terminate
	    the loop?  We do not want the boot to be stuck forever
	    if there is an error.</para>
	</step>

	<step>
	  <para xml:lang="en">Does the script create files or directories that
	    need specific permissions, for example, a
	    <filename>pid</filename> that needs to be owned by
	    the user that runs the process?  Rather than the
	    traditional <citerefentry><refentrytitle>touch</refentrytitle><manvolnum>1</manvolnum></citerefentry>/<citerefentry><refentrytitle>chown</refentrytitle><manvolnum>8</manvolnum></citerefentry>/<citerefentry><refentrytitle>chmod</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	    routine, consider using <citerefentry><refentrytitle>install</refentrytitle><manvolnum>1</manvolnum></citerefentry> with the proper
	    command line arguments to do the whole procedure with
	    one step.</para>
	</step>
      </procedure>
    </sect2>
  </sect1>

  <sect1 xml:id="users-and-groups">
    <title xml:lang="en">Adding Users and Groups</title>

    <para xml:lang="en">Some ports require a particular user account to be present,
      usually for daemons that run as that user.  For these ports,
      choose a <emphasis>unique</emphasis> UID from 50 to 999 and
      register it in <filename>ports/UIDs</filename> (for users) and
      <filename>ports/GIDs</filename> (for groups).  The unique
      identification should be the same for users and groups.</para>

    <para xml:lang="en">Please include a patch against these two files when
      requiring a new user or group to be created for the
      port.</para>

    <para xml:lang="en">Then use <varname>USERS</varname> and
      <varname>GROUPS</varname> in
      <filename>Makefile</filename>, and the user will be
      automatically created when installing the port.</para>

    <programlisting xml:lang="en">USERS=	pulse
GROUPS=	pulse pulse-access pulse-rt</programlisting>

    <para xml:lang="en">The current list of reserved UIDs and GIDs can be found
      in <filename>ports/UIDs</filename> and
      <filename>ports/GIDs</filename>.</para>
  </sect1>

  <sect1 xml:id="requiring-kernel-sources">
    <title xml:lang="en">Ports That Rely on Kernel Sources</title>

    <para xml:lang="en">Some ports (such as kernel loadable modules) need the
      kernel source files so that the port can compile.  Here is the
      correct way to determine if the user has them
      installed:</para>

    <programlisting xml:lang="en">USES=	kmod</programlisting>

    <para xml:lang="en">Apart from this check, the <literal>kmod</literal> feature
      takes care of most items that these ports need to take into
      account.</para>
  </sect1>
</chapter>

  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->

<chapter version="5.0" xml:id="plist">

  <title xml:lang="en">Advanced <filename>pkg-plist</filename> Practices</title>

  <sect1 xml:id="plist-sub">
    <title xml:lang="en">Changing <filename>pkg-plist</filename> Based on Make
      Variables</title>

    <para xml:lang="en">Some ports, particularly the <literal>p5-</literal> ports,
      need to change their <filename>pkg-plist</filename> depending on
      what options they are configured with (or version of
      <literal>perl</literal>, in the case of <literal>p5-</literal>
      ports).  To make this easy, any instances in
      <filename>pkg-plist</filename> of <literal>%%OSREL%%</literal>,
      <literal>%%PERL_VER%%</literal>, and
      <literal>%%PERL_VERSION%%</literal> will be substituted
      appropriately.  The value of <literal>%%OSREL%%</literal> is the
      numeric revision of the operating system (for example,
      <literal>4.9</literal>).  <literal>%%PERL_VERSION%%</literal>
      and <literal>%%PERL_VER%%</literal> is the full version number
      of <command>perl</command> (for example,
      <literal>5.8.9</literal>).  Several other
      <literal>%%<replaceable>VARS</replaceable>%%</literal> related
      to port's documentation files are described in <link linkend="install-documentation">the relevant
	section</link>.</para>

    <para xml:lang="en">To make other substitutions, set
      <varname>PLIST_SUB</varname> with a list of
      <literal><replaceable>VAR</replaceable>=<replaceable>VALUE</replaceable></literal>
      pairs and instances of
      <literal>%%<replaceable>VAR</replaceable>%%</literal> will be
      substituted with <replaceable>VALUE</replaceable> in
      <filename>pkg-plist</filename>.</para>

    <para xml:lang="en">For instance, if a port installs many files
      in a version-specific subdirectory, use a placeholder for the
      version so that <filename>pkg-plist</filename> does not have to
      be regenerated every time the port is updated.  For
      example:</para>

    <programlisting xml:lang="en">OCTAVE_VERSION=	${PORTREVISION}
PLIST_SUB=	OCTAVE_VERSION=${OCTAVE_VERSION}</programlisting>

    <para xml:lang="en">in the <filename>Makefile</filename> and use
      <literal>%%OCTAVE_VERSION%%</literal> wherever the version shows
      up in <filename>pkg-plist</filename>.  When
      the port is upgraded, it will not be necessary to edit dozens
      (or in some cases, hundreds) of lines in
      <filename>pkg-plist</filename>.</para>

    <para xml:lang="en">If files are installed conditionally on the options
      set in the port, the usual way of handling it is prefixing
      <filename>pkg-plist</filename> lines with a
      <literal>%%OPT%%</literal> for lines needed when the option is
      enabled, or <literal>%%NO_OPT%%</literal> when the option is
      disabled, and adding <literal>OPTIONS_SUB=yes</literal> to the
      <filename>Makefile</filename>.  See <xref linkend="options_sub"/> for more information.</para>

    <para xml:lang="en">For instance, if there are files that are only installed
      when the <literal>X11</literal> option is enabled, and
      <filename>Makefile</filename> has:</para>

    <programlisting xml:lang="en">OPTIONS_DEFINE=	X11
OPTIONS_SUB=	yes</programlisting>

    <para xml:lang="en">In <filename>pkg-plist</filename>, put
      <literal>%%X11%%</literal> in front of the lines only being
      installed when the option is enabled, like this :</para>

    <programlisting xml:lang="en">%%X11%%bin/foo-gui</programlisting>

    <para xml:lang="en">This substitution will be done between the
      <buildtarget xml:lang="en">pre-install</buildtarget> and
      <buildtarget xml:lang="en">do-install</buildtarget> targets, by reading from
      <filename>PLIST</filename> and writing to
      <filename>TMPPLIST</filename> (default:
      <filename>WRKDIR/.PLIST.mktmp</filename>).  So if the port
      builds <filename>PLIST</filename> on the fly, do so in or before
      <buildtarget xml:lang="en">pre-install</buildtarget>.  Also, if the port
      needs to edit the resulting file, do so in
      <buildtarget xml:lang="en">post-install</buildtarget> to a file named
      <filename>TMPPLIST</filename>.</para>

    <para xml:lang="en">Another way of modifying a port's packing list is based on
      setting the variables <varname>PLIST_FILES</varname> and
      <varname>PLIST_DIRS</varname>.  The value of each variable is
      regarded as a list of pathnames to write to
      <filename>TMPPLIST</filename> along with
      <filename>PLIST</filename> contents.  While names listed in
      <varname>PLIST_FILES</varname> and
      <varname>PLIST_DIRS</varname> are subject to
      <literal>%%<replaceable>VAR</replaceable>%%</literal>
      substitution as described above, it is better to use the
      <literal>${<replaceable>VAR</replaceable>}</literal> directly.
      Except for that, names from
      <varname>PLIST_FILES</varname> will appear in the final packing
      list unchanged, while <literal>@dir</literal>
      will be prepended to names from
      <varname>PLIST_DIRS</varname>.  To take effect,
      <varname>PLIST_FILES</varname> and
      <varname>PLIST_DIRS</varname> must be set before
      <filename>TMPPLIST</filename> is written, that is, in
      <buildtarget xml:lang="en">pre-install</buildtarget> or earlier.</para>

    <para xml:lang="en">From time to time, using <varname>OPTIONS_SUB</varname>
      is not enough.  In those cases, adding a specific
      <literal><replaceable>TAG</replaceable></literal> to
      <varname>PLIST_SUB</varname>
      inside the <filename>Makefile</filename> with a special
      value of <literal>@comment</literal>, makes package tools to
      ignore the line.  For instance, if some files are only installed
      when the <literal>X11</literal> option is on and the
      architecture is <literal>i386</literal>:</para>

    <programlisting xml:lang="en">.include &lt;bsd.port.pre.mk&gt;

.if ${PORT_OPTIONS:MX11} &amp;&amp; ${ARCH} == "i386"
PLIST_SUB+=	X11I386=""
.else
PLIST_SUB+=	X11I386="@comment "
.endif</programlisting>

  </sect1>

  <sect1 xml:id="plist-cleaning">
    <title xml:lang="en">Empty Directories</title>

    <sect2 xml:id="plist-dir-cleaning">
      <title xml:lang="en">Cleaning Up Empty Directories</title>

      <para xml:lang="en">When being de-installed, a port has to remove empty
	directories it created.  Most of these directories are removed
	automatically by <citerefentry><refentrytitle>pkg</refentrytitle><manvolnum>8</manvolnum></citerefentry>, but for directories created
	outside of <filename>${PREFIX}</filename>, or empty
	directories, some more work needs to be done.  This is usually
	accomplished by adding <literal>@dir</literal> lines for those
	directories.  Subdirectories must be deleted before deleting
	parent directories.</para>

      <programlisting xml:lang="en">[...]
@dir /var/games/oneko/saved-games
@dir /var/games/oneko</programlisting>
    </sect2>

    <sect2 xml:id="plist-dir-empty">
      <title xml:lang="en">Creating Empty Directories</title>

      <para xml:lang="en">Empty directories created during port installation need
	special attention.  They must be present when the package
	is created.   If they are not created by the port code, create
	them in the <filename>Makefile</filename>:</para>

      <programlisting xml:lang="en">post-stage:
	@${MKDIR} ${STAGEDIR}${PREFIX}/some/directory</programlisting>

      <para xml:lang="en">Add the directory to <filename>pkg-plist</filename>
	like any other.  For example:</para>

      <programlisting xml:lang="en">@dir some/directory</programlisting>
    </sect2>
  </sect1>

  <sect1 xml:id="plist-config">
    <title xml:lang="en">Configuration Files</title>

    <para xml:lang="en">If the port installs configuration files to
      <filename>PREFIX/etc</filename> (or elsewhere) do
      <emphasis>not</emphasis> list them in
      <filename>pkg-plist</filename>.  That will cause
      <command>pkg delete</command> to remove files that have been
      carefully edited by the user, and a re-installation will wipe
      them out.</para>

    <para xml:lang="en">Instead, install sample files with a
      <filename><replaceable>filename</replaceable>.sample</filename>
      extension.  The <literal>@sample</literal> macro automates this,
      see <xref linkend="plist-keywords-sample"/> for what it does
      exactly.  For each sample file, add a line to
      <filename>pkg-plist</filename>:</para>

    <programlisting xml:lang="en">@sample etc/orbit.conf.sample</programlisting>

    <para xml:lang="en">If there is a very good reason not to install a working
      configuration file by default, only list the sample filename in
      <filename>pkg-plist</filename>, without the
      <literal>@sample</literal> followed by a space part, and add a
      <link linkend="porting-message">message</link> pointing out that the
      user must copy and edit the file before the software will
      work.</para>

    <tip>
      <para xml:lang="en">When a port installs its configuration in a subdirectory
	of <filename>${PREFIX}/etc</filename>, use
	<varname>ETCDIR</varname>, which defaults to
	<literal>${PREFIX}/etc/${PORTNAME}</literal>, it can be
	overridden in the ports <filename>Makefile</filename> if there
	is a convention for the port to use some other directory.  The
	<literal>%%ETCDIR%%</literal> macro will be used in its
	stead in <filename>pkg-plist</filename>.</para>
    </tip>

    <note>
      <para xml:lang="en">The sample configuration files should always have the
	<filename>.sample</filename> suffix.  If for some historical
	reason using the standard suffix is not possible, or if the
	sample files come from some other directory, use
	this construct:</para>

      <programlisting xml:lang="en">@sample etc/orbit.conf-dist etc/orbit.conf</programlisting>

      <para xml:lang="en">or</para>

      <programlisting xml:lang="en">@sample %%EXAMPLESDIR%%/orbit.conf etc/orbit.conf</programlisting>

      <para xml:lang="en">The format is <literal>@sample
	  <replaceable>sample-file</replaceable>
	  <replaceable>actual-config-file</replaceable></literal>.</para>
    </note>
  </sect1>

  <sect1 xml:id="plist-dynamic">
    <title xml:lang="en">Dynamic Versus Static Package List</title>

    <para xml:lang="en">A <emphasis>static package list</emphasis> is a package
      list which is available in the Ports Collection either as
      <filename>pkg-plist</filename> (with or without variable
      substitution), or embedded into the
      <filename>Makefile</filename> via
      <varname>PLIST_FILES</varname> and
      <varname>PLIST_DIRS</varname>.  Even if the contents are
      auto-generated by a tool or a target in the Makefile
      <emphasis>before</emphasis> the inclusion into the Ports
      Collection by a committer (for example, using <command>make
	makeplist&gt;</command>), this is still considered a static list,
      since it is possible to examine it without having to download or
      compile the distfile.</para>

    <para xml:lang="en">A <emphasis>dynamic package list</emphasis> is a package
      list which is generated at the time the port is compiled based
      upon the files and directories which are installed.  It is not
      possible to examine it before the source code of the ported
      application is downloaded and compiled, or after running a
      <literal>make clean</literal>.</para>

    <para xml:lang="en">While the use of dynamic package lists is not forbidden,
      maintainers should use static package lists wherever possible,
      as it enables users to <citerefentry><refentrytitle>grep</refentrytitle><manvolnum>1</manvolnum></citerefentry> through available ports to
      discover, for example, which port installs a certain file.
      Dynamic lists should be primarily used for complex ports where
      the package list changes drastically based upon optional
      features of the port (and thus maintaining a static package list
      is infeasible), or ports which change the package list based
      upon the version of dependent software used.  For example, ports
      which generate docs with
      <application>Javadoc</application>.</para>
  </sect1>

  <sect1 xml:id="plist-autoplist">
    <title xml:lang="en">Automated Package List Creation</title>

    <para xml:lang="en">First, make sure the port is almost complete, with only
      <filename>pkg-plist</filename> missing.  Running <command>make
	makeplist</command> will show an example for
      <filename>pkg-plist</filename>.  The output of
      <buildtarget xml:lang="en">makeplist</buildtarget> must be double checked for
      correctness as it tries to automatically guess a few things, and
      can get it wrong.</para>

    <para xml:lang="en">User configuration files should be installed as
      <filename><replaceable>filename</replaceable>.sample</filename>,
      as it is described in <xref linkend="plist-config"/>.
      <filename>info/dir</filename> must not be listed and
      appropriate <filename>install-info</filename> lines must be
      added as noted in the <link linkend="makefile-info">info
	files</link> section.  Any libraries installed by the port
      must be listed as specified in the <link linkend="porting-shlibs">shared libraries</link>
      section.</para>
  </sect1>

  <sect1 xml:id="plist-keywords">
    <title xml:lang="en">Expanding Package List with Keywords</title>

    <para xml:lang="en">All keywords can also take optional arguments in
      parentheses.  The arguments are owner, group, and mode.  This
      argument is used on the file or directory referenced.
      To change the owner, group, and mode of a configuration file,
      use:</para>

    <programlisting xml:lang="en">@sample(games,games,640) etc/config.sample</programlisting>

    <para xml:lang="en">The arguments are optional.  If only the group and mode
      need to be changed, use:</para>

    <programlisting xml:lang="en">@sample(,games,660) etc/config.sample</programlisting>

    <!--
    Keywords up-to-date with r381632.
    Try and keep the keywords alphanumerically sorted.
    -->

    <sect2 xml:id="plist-keywords-desktop-file-utils">
      <title xml:lang="en"><literal>@desktop-file-utils</literal></title>

      <para xml:lang="en">Will run <command>update-desktop-database -q</command>
	after installation and deinstallation.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-fc">
      <title xml:lang="en"><literal>@fc</literal>
	<replaceable>directory</replaceable></title>

      <para xml:lang="en">Add a <literal>@dir</literal> entry for the directory
	passed as an argument, and run <command>fc-cache -fs</command>
	on that directory after installation and
	deinstallation.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-fcfontsdir">
      <title xml:lang="en"><literal>@fcfontsdir</literal>
	<replaceable>directory</replaceable></title>

      <para xml:lang="en">Add a <literal>@dir</literal> entry for the
	directory passed as an argument, and run <command>fc-cache
	  -fs</command>, <command>mkfontscale</command> and
	<command>mkfontdir</command> on that directory after
	installation and deinstallation.  Additionally, on
	deinstallation, it removes the
	<filename>fonts.scale</filename> and
	<filename>fonts.dir</filename> cache files if they are
	empty.  This keyword is equivalent to adding both <link linkend="plist-keywords-fc"><literal>@fc</literal>
	  <replaceable>directory</replaceable></link> and <link linkend="plist-keywords-fontsdir"><literal>@fontsdir</literal>
	  <replaceable>directory</replaceable></link>.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-fontsdir">
      <title xml:lang="en"><literal>@fontsdir</literal>
	<replaceable>directory</replaceable></title>

      <para xml:lang="en">Add a <literal>@dir</literal> entry for the
	directory passed as an argument, and run
	<command>mkfontscale</command> and
	<command>mkfontdir</command> on that directory after
	installation and deinstallation.  Additionally, on
	deinstallation, it removes the
	<filename>fonts.scale</filename> and
	<filename>fonts.dir</filename> cache files if they are
	empty.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-glib-schemas">
      <title xml:lang="en"><literal>@glib-schemas</literal></title>

      <para xml:lang="en">Runs <command>glib-compile-schemas</command> on
	installation and deinstallation.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-info">
      <title xml:lang="en"><literal>@info</literal>
	<replaceable>file</replaceable></title>

      <para xml:lang="en">Add the file passed as argument to the plist, and updates
	the info document index on installation and deinstallation.
	Additionally, it removes the index if empty on
	deinstallation.  This should never be used manually, but
	always through <varname>INFO</varname>.  See <xref linkend="makefile-info"/> for more information.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-kld">
      <title xml:lang="en"><literal>@kld</literal>
	<replaceable>directory</replaceable></title>

      <para xml:lang="en">Runs <command>kldxref</command> on the directory
	on installation and deinstallation.  Additionally, on
	deinstallation, it will remove the directory if empty.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-rmtry">
      <title xml:lang="en"><literal>@rmtry</literal>
	<replaceable>file</replaceable></title>

      <para xml:lang="en">Will remove the file on deinstallation, and not give an
	error if the file is not there.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-sample">
      <title xml:lang="en"><literal>@sample</literal>
	<replaceable>file</replaceable>
	[<replaceable>file</replaceable>]</title>

      <para xml:lang="en">This is used to handle installation of configuration
	files, through example files bundled with the package.  The
	<quote>actual</quote>, non-sample, file is either the second
	filename, if present, or the first filename without the
	<filename>.sample</filename> extension.</para>

      <para xml:lang="en">This does three things.  First, add the first file passed
	as argument, the sample file, to the plist.  Then, on
	installation, if the actual file is not found, copy the sample
	file to the actual file.  And finally, on deinstallation,
	remove the actual file if it has not been modified.  See <xref linkend="plist-config"/> for more information.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-shared-mime-info">
      <title xml:lang="en"><literal>@shared-mime-info</literal>
	<replaceable>directory</replaceable></title>

      <para xml:lang="en">Runs <command>update-mime-database</command> on the
	directory on installation and deinstallation.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-shell">
      <title xml:lang="en"><literal>@shell</literal>
	<replaceable>file</replaceable></title>

      <para xml:lang="en">Add the file passed as argument to the plist.</para>

      <para xml:lang="en">On installation, add the full path to
	<replaceable>file</replaceable> to
	<filename>/etc/shells</filename>, while making sure it is not
	added twice.  On deinstallation, remove it from
	<filename>/etc/shells</filename>.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-terminfo">
      <title xml:lang="en"><literal>@terminfo</literal></title>

      <para xml:lang="en">Do not use by itself.  If the port installs
	<filename><replaceable>*</replaceable>.terminfo</filename>
	files, add <link linkend="uses-terminfo">USES=terminfo</link>
	to its <filename>Makefile</filename>.</para>

      <para xml:lang="en">On installation and deinstallation, if
	<command>tic</command> is present, refresh
	<filename>${PREFIX}/share/misc/terminfo.db</filename> from the
	<filename><replaceable>*</replaceable>.terminfo</filename>
	files in <filename>${PREFIX}/share/misc</filename>.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-base">
      <title xml:lang="en">Base Keywords</title>

      <para xml:lang="en">There are a few keywords that are hardcoded, and
	documented in <citerefentry><refentrytitle>pkg-create</refentrytitle><manvolnum>8</manvolnum></citerefentry>.  For the sake of
	completeness, they are also documented here.</para>

      <sect3 xml:id="plist-keywords-base-empty">
	<title xml:lang="en"><literal>@</literal>
	  [<replaceable>file</replaceable>]</title>

	<para xml:lang="en">The empty keyword is a placeholder to use when the
	  file's owner, group, or mode need to be changed.  For
	  example, to set the group of the file to
	  <literal>games</literal> and add the setgid bit, add:</para>

	<programlisting xml:lang="en">@(,games,2755) sbin/daemon</programlisting>
      </sect3>

      <sect3 xml:id="plist-keywords-base-exec">
	<title xml:lang="en"><literal>@preexec</literal>
	  <replaceable>command</replaceable>,
	  <literal>@postexec</literal>
	  <replaceable>command</replaceable>,
	  <literal>@preunexec</literal>
	  <replaceable>command</replaceable>,
	  <literal>@postunexec</literal>
	  <replaceable>command</replaceable></title>

	<para xml:lang="en">Execute <replaceable>command</replaceable> as part of
	  the package installation or deinstallation process.</para>

	<variablelist>
	  <varlistentry>
	    <term xml:lang="en"><literal>@preexec</literal>
	      <replaceable>command</replaceable></term>

	    <listitem>
	      <para xml:lang="en">Execute <replaceable>command</replaceable> as part
		of the <filename>pre-install</filename>
		scripts.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>@postexec</literal>
	      <replaceable>command</replaceable></term>

	    <listitem>
	      <para xml:lang="en">Execute <replaceable>command</replaceable> as part
		of the <filename>post-install</filename>
		scripts.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>@preunexec</literal>
	      <replaceable>command</replaceable></term>

	    <listitem>
	      <para xml:lang="en">Execute <replaceable>command</replaceable> as part
		of the <filename>pre-deinstall</filename>
		scripts.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>@postunexec</literal>
	      <replaceable>command</replaceable></term>

	    <listitem>
	      <para xml:lang="en">Execute <replaceable>command</replaceable> as part
		of the <filename>post-deinstall</filename>
		scripts.</para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	<para xml:lang="en">If <replaceable>command</replaceable> contains
	  any of these
	  sequences somewhere in it, they are expanded
	  inline.  For these examples, assume that
	  <literal>@cwd</literal> is set to
	  <filename>/usr/local</filename> and the last
	  extracted file was <filename>bin/emacs</filename>.</para>

	<variablelist>
	  <varlistentry>
	    <term xml:lang="en"><literal>%F</literal></term>

	    <listitem>
	      <para xml:lang="en">Expand to the last filename extracted (as
		specified).  In the example case
		<filename>bin/emacs</filename>.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>%D</literal></term>
	    <listitem>
	      <para xml:lang="en">Expand to the current directory prefix, as set
		with <literal>@cwd</literal>.  In the example case
		<filename>/usr/local</filename>.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>%B</literal></term>

	    <listitem>
	      <para xml:lang="en">Expand to the basename of the fully qualified
		filename, that is, the current directory prefix plus
		the last filespec, minus the trailing filename.  In
		the example case, that would be
		<filename>/usr/local/bin</filename>.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>%f</literal></term>

	    <listitem>
	      <para xml:lang="en">Expand to the filename part of the fully qualified
		name, or the converse of <literal>%B</literal>.  In
		the example case,
		<filename>emacs</filename>.</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </sect3>

      <sect3 xml:id="plist-keywords-base-mode">
	<title xml:lang="en"><literal>@mode</literal>
	  <replaceable>mode</replaceable></title>

	<para xml:lang="en">Set default permission for all subsequently extracted
	  files to <replaceable>mode</replaceable>.  Format is the
	  same as that used by <citerefentry><refentrytitle>chmod</refentrytitle><manvolnum>1</manvolnum></citerefentry>.  Use without an arg to
	  set back to default permissions (mode of the file while
	  being packed).</para>

	<important>
	  <para xml:lang="en">This must be a numeric mode, like
	    <literal>644</literal>, <literal>4755</literal>, or
	    <literal>600</literal>.  It cannnot be a relative mode
	    like <literal>u+s</literal>.</para>
	</important>
      </sect3>

      <sect3 xml:id="plist-keywords-base-owner">
	<title xml:lang="en"><literal>@owner</literal>
	  <replaceable>user</replaceable></title>

	<para xml:lang="en">Set default ownership for all subsequent files to
	  <replaceable>user</replaceable>.  Use without an argument to
	  set back to default ownership (<systemitem class="username">root</systemitem>).</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-group">
	<title xml:lang="en"><literal>@group</literal>
	  <replaceable>group</replaceable></title>

	<para xml:lang="en">Set default group ownership for all subsequent files to
	  <replaceable>group</replaceable>.  Use without an arg to set
	  back to default group ownership (<systemitem class="groupname">wheel</systemitem>).</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-comment">
	<title xml:lang="en"><literal>@comment</literal>
	  <replaceable>string</replaceable></title>

	<para xml:lang="en">This line is ignored when packing.</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-dir">
	<title xml:lang="en"><literal>@dir</literal>
	  <replaceable>directory</replaceable></title>

	<para xml:lang="en">Declare directory name.  By default, directories created
	  under <varname>PREFIX</varname> by a package installation
	  are automatically removed.  Use this when an empty directory
	  under <varname>PREFIX</varname> needs to be created, or when
	  the directory needs to have non default owner, group, or
	  mode.  Directories outside of <varname>PREFIX</varname> need
	  to be registered.  For example,
	  <filename>/var/db/${PORTNAME}</filename> needs to have a
	  <literal>@dir</literal> entry whereas
	  <filename>${PREFIX}/share/${PORTNAME}</filename> does not if
	  it contains files or uses the default owner, group, and
	  mode.</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-exec-deprecated">
	<title xml:lang="en"><literal>@exec</literal>
	  <replaceable>command</replaceable>,
	  <literal>@unexec</literal>
	  <replaceable>command</replaceable> (Deprecated)</title>

	<para xml:lang="en">Execute <replaceable>command</replaceable> as part of
	  the installation or deinstallation process.  Please use
	  <xref linkend="plist-keywords-base-exec"/> instead.</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-dirrm">
	<title xml:lang="en"><literal>@dirrm</literal>
	  <replaceable>directory</replaceable> (Deprecated)</title>

	<para xml:lang="en">Declare directory name to be deleted at deinstall time.
	  By default, directories created under
	  <varname>PREFIX</varname> by a package installation are
	  deleted when the package is deinstalled.</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-dirrmtry">
	<title xml:lang="en"><literal>@dirrmtry</literal>
	  <replaceable>directory</replaceable> (Deprecated)</title>

	<para xml:lang="en">Declare directory name to be removed, as for
	  <literal>@dirrm</literal>, but does not issue a warning if
	  the directory cannot be removed.</para>
      </sect3>
    </sect2>

    <sect2 xml:id="plist-keywords-creating-new">
      <title xml:lang="en">Creating New Keywords</title>

      <para xml:lang="en">Package list files can be extended by keywords that are
	defined in the <filename>${PORTSDIR}/Keywords</filename>
	directory.  The settings for each keyword are stored in a
	<acronym>UCL</acronym> file named
	<filename><replaceable>keyword</replaceable>.ucl</filename>.
	The file must contain at least one of these sections:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en"><literal>attributes</literal></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><literal>action</literal></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><literal>pre-install</literal></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><literal>post-install</literal></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><literal>pre-deinstall</literal></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><literal>post-deinstall</literal></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><literal>pre-upgrade</literal></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><literal>post-upgrade</literal></para>
	</listitem>
      </itemizedlist>

      <sect3 xml:id="plist-keywords-attributes">
	<title xml:lang="en"><literal>attributes</literal></title>

	<para xml:lang="en">Changes the owner, group, or mode used by the keyword.
	  Contains an associative array where the possible keys are
	  <literal>owner</literal>, <literal>group</literal>, and
	  <literal>mode</literal>.  The values are, respectively, a
	  user name, a group name, and a file mode.  For
	  example:</para>

	<programlisting xml:lang="en">attributes: { owner: "games", group: "games", mode: 0555 }</programlisting>
      </sect3>

      <sect3 xml:id="plist-keywords-action">
	<title xml:lang="en"><literal>action</literal></title>

	<para xml:lang="en">Defines what happens to the keyword's parameter.
	  Contains an array where the possible values are:</para>

	<variablelist>
	  <varlistentry>
	    <term xml:lang="en"><literal>setprefix</literal></term>

	    <listitem>
	      <para xml:lang="en">Set the prefix for the next plist entries.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>dir</literal></term>

	    <listitem>
	      <para xml:lang="en">Register a directory to be created on install and
		removed on deinstall.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>dirrm</literal></term>

	    <listitem>
	      <para xml:lang="en">Register a directory to be deleted on deinstall.
		Deprecated.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>dirrmtry</literal></term>

	    <listitem>
	      <para xml:lang="en">Register a directory to try and deleted on
		deinstall.  Deprecated.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>file</literal></term>

	    <listitem>
	      <para xml:lang="en">Register a file.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>setmode</literal></term>

	    <listitem>
	      <para xml:lang="en">Set the mode for the next plist entries.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>setowner</literal></term>

	    <listitem>
	      <para xml:lang="en">Set the owner for the next plist entries.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>setgroup</literal></term>

	    <listitem>
	      <para xml:lang="en">Set the group for the next plist entries.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>comment</literal></term>

	    <listitem>
	      <para xml:lang="en">Does not do anything, equivalent to not entering
		an <literal>action</literal> section.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term xml:lang="en"><literal>ignore_next</literal></term>

	    <listitem>
	      <para xml:lang="en">Ignore the next entry in the plist.</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </sect3>

      <sect3 xml:id="plist-keywords-arguments">
	<title xml:lang="en"><literal>arguments</literal></title>

	<para xml:lang="en">If set to <literal>true</literal>, adds argument
	  handling, splitting the whole line, <literal>%@</literal>,
	  into numbered arguments, <literal>%1</literal>,
	  <literal>%2</literal>, and so on.  For example, for this
	  line:</para>

	<programlisting xml:lang="en">@foo some.content other.content</programlisting>

	<para xml:lang="en"><literal>%1</literal> and <literal>%2</literal> will
	  contain:</para>

	<programlisting xml:lang="en">some.content
other.content</programlisting>

	<para xml:lang="en">It also affects how the <link linkend="plist-keywords-action"><literal>action</literal></link>
	  entry works.  When there is more than one argument, the
	  argument number must be specified.  For example:</para>

	<programlisting xml:lang="en">actions: [file(1)]</programlisting>
      </sect3>

      <sect3 xml:id="plist-keywords-pre-post">
	<title xml:lang="en"><literal>pre-install</literal>,
	  <literal>post-install</literal>,
	  <literal>pre-deinstall</literal>,
	  <literal>post-deinstall</literal>,
	  <literal>pre-upgrade</literal>,
	  <literal>post-upgrade</literal></title>

	<para xml:lang="en">These keywords contains a <citerefentry><refentrytitle>sh</refentrytitle><manvolnum>1</manvolnum></citerefentry> script to be
	  executed before or after installation, deinstallation, or
	  upgrade of the package.  In addition to the usual
	  <literal>@exec</literal>
	  <literal>%<replaceable>foo</replaceable></literal>
	  placeholders described in <xref linkend="plist-keywords-base-exec"/>, there is a new one,
	  <literal>%@</literal>, which represents the argument of the
	  keyword.</para>
      </sect3>

      <sect3 xml:id="plist-keywords-examples">
	<title xml:lang="en">Custom Keyword Examples</title>

	<example xml:id="plist-keywords-fc-example">
	  <title xml:lang="en">Example of a <literal>@dirrmtryecho</literal>
	    Keyword</title>

	  <para xml:lang="en">This keyword does two things, it adds a
	    <literal>@dirrmtry
	      <replaceable>directory</replaceable></literal> line to
	    the packing list, and echoes the fact that the directory
	    is removed when deinstalling the package.</para>

	  <programlisting xml:lang="en">actions: [dirrmtry]
post-deinstall: &lt;&lt;EOD
  echo "Directory %D/%@ removed."
EOD</programlisting>
	</example>

	<example xml:id="plist-keywords-sample-example">
	  <title xml:lang="en">Real Life Example, How <literal>@sample</literal> is
	    Implemented</title>

	  <para xml:lang="en">This keyword does three things.  It adds the first
	    <replaceable>filename</replaceable> passed as an argument
	    to <literal>@sample</literal> to the packing list, it adds
	    to the <literal>post-install</literal> script instructions
	    to copy the sample to the actual configuration file if it
	    does not already exist, and it adds to the
	    <literal>post-deinstall</literal> instructions to remove
	    the configuration file if it has not been modified.</para>

	  <programlisting xml:lang="en">actions: [file(1)]
arguments: true
post-install: &lt;&lt;EOD
  case "%1" in
  /*) sample_file="%1" ;;
  *) sample_file="%D/%1" ;;
  esac
  target_file="${sample_file%.sample}"
  set -- %@
  if [ $# -eq 2 ]; then
      target_file=${2}
  fi
  case "${target_file}" in
  /*) target_file="${target_file}" ;;
  *) target_file="%D/${target_file}" ;;
  esac
  if ! [ -f "${target_file}" ]; then
    /bin/cp -p "${sample_file}" "${target_file}" &amp;&amp; \
      /bin/chmod u+w "${target_file}"
  fi
EOD
pre-deinstall: &lt;&lt;EOD
  case "%1" in
  /*) sample_file="%1" ;;
  *) sample_file="%D/%1" ;;
  esac
  target_file="${sample_file%.sample}"
  set -- %@
  if [ $# -eq 2 ]; then
      set -- %@
      target_file=${2}
  fi
  case "${target_file}" in
  /*) target_file="${target_file}" ;;
  *) target_file="%D/${target_file}" ;;
  esac
  if cmp -s "${target_file}" "${sample_file}"; then
    rm -f "${target_file}"
  else
    echo "You may need to manually remove ${target_file} if it is no longer needed."
  fi
EOD</programlisting>
	</example>
      </sect3>
    </sect2>
  </sect1>
</chapter>

  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->

<chapter version="5.0" xml:id="pkg-files">

  <title xml:lang="en"><filename>pkg-*</filename></title>

  <para xml:lang="en">There are some tricks we have not mentioned yet about the
    <filename>pkg-<replaceable>*</replaceable></filename> files that
    come in handy sometimes.</para>

  <sect1 xml:id="porting-message">
    <title xml:lang="en"><filename>pkg-message</filename></title>

    <para xml:lang="en">To display a message when the package is installed,
      place the message in <filename>pkg-message</filename>.  This
      capability is often useful to display additional installation
      steps to be taken after a <command>pkg install</command> or to
      display licensing information.</para>

    <para xml:lang="en">When some lines about the build-time knobs or warnings
      have to be displayed, use <varname>ECHO_MSG</varname>.
      <filename>pkg-message</filename> is only for
      post-installation steps.  Likewise, the distinction between
      <varname>ECHO_MSG</varname> is for printing
      informational text to the screen and <varname>ECHO_CMD</varname>
      is for
      command pipelining:</para>

    <programlisting xml:lang="en">update-etc-shells:
	@${ECHO_MSG} "updating /etc/shells"
	@${CP} /etc/shells /etc/shells.bak
	@( ${GREP} -v ${PREFIX}/bin/bash /etc/shells.bak; \
		${ECHO_CMD} ${PREFIX}/bin/bash) &gt;/etc/shells
	@${RM} /etc/shells.bak</programlisting>

    <note>
      <para xml:lang="en">Do not add an entry for <filename>pkg-message</filename>
	in <filename>pkg-plist</filename>.</para>
    </note>
  </sect1>

  <sect1 xml:id="pkg-install">
    <title xml:lang="en"><filename>pkg-install</filename></title>

    <para xml:lang="en">If the port needs to execute commands when the binary
      package is installed with <command>pkg add</command> or
      <command>pkg install</command>, use
      <filename>pkg-install</filename>.  This script will
      automatically be added to the package.  It will be run twice by
      <command>pkg</command>, the first time as <literal>${SH}
	pkg-install ${PKGNAME} PRE-INSTALL</literal> before the
      package is installed, and the second time as
      <literal>${SH} pkg-install ${PKGNAME}
	POST-INSTALL</literal> after it has been installed.
      <literal>$2</literal> can be tested to determine which
      mode the script is being run in.  The <envar>PKG_PREFIX</envar>
      environmental variable will be set to the package installation
      directory.</para>
  </sect1>

  <sect1 xml:id="pkg-deinstall">
    <title xml:lang="en"><filename>pkg-deinstall</filename></title>

    <para xml:lang="en">This script executes when a package is removed.</para>

    <para xml:lang="en">This script will be run twice by <command>pkg
	delete</command> The first time as <literal>${SH}
	pkg-deinstall ${PKGNAME} DEINSTALL</literal> before the
      port is de-installed and the second time as
      <literal>${SH} pkg-deinstall ${PKGNAME}
	POST-DEINSTALL</literal> after the port has been de-installed.
      <literal>$2</literal> can be tested to determine which
      mode the script is being run in.  The <envar>PKG_PREFIX</envar>
      environmental variable will be set to the package installation
      directory</para>
  </sect1>

  <sect1 xml:id="pkg-names">
    <title xml:id="porting-pkgfiles" xml:lang="en">Changing the Names of
      <filename>pkg-<replaceable>*</replaceable></filename></title>

    <para xml:lang="en">All the names of
      <filename>pkg-<replaceable>*</replaceable></filename> are
      defined using variables that can be changed in the
      <filename>Makefile</filename> if needed.  This is especially
      useful when sharing the same
      <filename>pkg-<replaceable>*</replaceable></filename> files
      among several ports or when it is necessary to write to one of these files.
      See <link linkend="porting-wrkdir">writing to places other than
	<varname>WRKDIR</varname></link> for why it is a bad idea to
      write directly into
      the directory containing the
      <filename>pkg-<replaceable>*</replaceable></filename>
      files.</para>

    <para xml:lang="en">Here is a list of variable names and their default values.
      (<varname>PKGDIR</varname> defaults to
      <varname>${MASTERDIR}</varname>.)</para>

    <informaltable frame="none" pgwide="0">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry xml:lang="en">Variable</entry>
	    <entry xml:lang="en">Default value</entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry xml:lang="en"><varname>DESCR</varname></entry>
	    <entry xml:lang="en"><literal>${PKGDIR}/pkg-descr</literal></entry>
	  </row>

	  <row>
	    <entry xml:lang="en"><varname>PLIST</varname></entry>
	    <entry xml:lang="en"><literal>${PKGDIR}/pkg-plist</literal></entry>
	  </row>

	  <row>
	    <entry xml:lang="en"><varname>PKGINSTALL</varname></entry>
	    <entry xml:lang="en"><literal>${PKGDIR}/pkg-install</literal></entry>
	  </row>

	  <row>
	    <entry xml:lang="en"><varname>PKGDEINSTALL</varname></entry>
	    <entry xml:lang="en"><literal>${PKGDIR}/pkg-deinstall</literal></entry>
	  </row>

	  <row>
	    <entry xml:lang="en"><varname>PKGMESSAGE</varname></entry>
	    <entry xml:lang="en"><literal>${PKGDIR}/pkg-message</literal></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </sect1>

  <sect1 xml:id="using-sub-files">
    <title xml:lang="en">Making Use of <varname>SUB_FILES</varname> and
      <varname>SUB_LIST</varname></title>

    <para xml:lang="en"><varname>SUB_FILES</varname> and
      <varname>SUB_LIST</varname> are useful for dynamic
      values in port files, such as the installation
      <varname>PREFIX</varname> in
      <filename>pkg-message</filename>.</para>

    <para xml:lang="en"><varname>SUB_FILES</varname> specifies a list
      of files to be automatically modified.  Each
      <filename><replaceable>file</replaceable></filename> in the
      <varname>SUB_FILES</varname> list must have a corresponding
      <filename><replaceable>file</replaceable>.in</filename> present
      in <varname>FILESDIR</varname>.  A modified version will be
      created as
      <filename>${WRKDIR}/<replaceable>file</replaceable></filename>.
      Files defined as a value of <varname>USE_RC_SUBR</varname> (or
      the deprecated <varname>USE_RCORDER</varname>) are automatically
      added to <varname>SUB_FILES</varname>.  For the files
      <filename>pkg-message</filename>,
      <filename>pkg-install</filename>, and
      <filename>pkg-deinstall</filename>, the corresponding Makefile
      variable is automatically set to point to the processed
      version.</para>

    <para xml:lang="en"><varname>SUB_LIST</varname> is a list of
      <literal>VAR=VALUE</literal> pairs.  For each pair,
      <literal>%%VAR%%</literal> will be replaced with
      <literal>VALUE</literal> in each file listed in
      <varname>SUB_FILES</varname>.  Several common pairs are
      automatically defined: <varname>PREFIX</varname>,
      <varname>LOCALBASE</varname>, <varname>DATADIR</varname>,
      <varname>DOCSDIR</varname>, <varname>EXAMPLESDIR</varname>,
      <varname>WWWDIR</varname>, and <varname>ETCDIR</varname>.  Any
      line beginning with <literal>@comment</literal> followed by a
      space, will be deleted
      from resulting files after a variable substitution.</para>

    <para xml:lang="en">This example replaces
      <literal>%%ARCH%%</literal> with the system architecture in a
      <filename>pkg-message</filename>:</para>

    <programlisting xml:lang="en">SUB_FILES=	pkg-message
SUB_LIST=	ARCH=${ARCH}</programlisting>

    <para xml:lang="en">Note that for this example,
      <filename>pkg-message.in</filename> must exist in
      <varname>FILESDIR</varname>.</para>

    <para xml:lang="en">Example of a good
      <filename>pkg-message.in</filename>:</para>

    <programlisting xml:lang="en">Now it is time to configure this package.
Copy %%PREFIX%%/share/examples/putsy/%%ARCH%%.conf into your home directory
as .putsy.conf and edit it.</programlisting>
  </sect1>
</chapter>

  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter version="5.0" xml:id="testing">

  <title>測試 Port</title>

  <sect1 xml:id="make-describe">
    <title xml:lang="en">Running <command>make describe</command></title>

    <para xml:lang="en">Several of the FreeBSD port maintenance tools, such as
      <citerefentry vendor="ports"><refentrytitle>portupgrade</refentrytitle><manvolnum>1</manvolnum></citerefentry>, rely on a database called
      <filename>/usr/ports/INDEX</filename> which keeps track of such
      items as port dependencies.  <filename>INDEX</filename> is
      created by the top-level <filename>ports/Makefile</filename> via
      <command>make index</command>, which descends into each port
      subdirectory and executes <command>make describe</command>
      there.  Thus, if <command>make describe</command> fails in any
      port, no one can generate <filename>INDEX</filename>, and many
      people will quickly become unhappy.</para>

    <note>
      <para xml:lang="en">It is important to be able to generate this file no matter
	what options are present in <filename>make.conf</filename>, so
	please avoid doing things such as using
	<literal>.error</literal> statements when (for instance) a
	dependency is not satisfied.  (See
	<xref linkend="dads-dot-error"/>.)</para>
    </note>

    <para xml:lang="en">If <command>make describe</command> produces a string rather
      than an error message, everything is probably safe.  See
      <filename>bsd.port.mk</filename> for the meaning of the string
      produced.</para>

    <para xml:lang="en">Also note that running a recent version of
      <command>portlint</command> (as specified in the next section)
      will cause <command>make describe</command> to be run
      automatically.</para>
  </sect1>

  <sect1 xml:id="testing-portlint">
    <title xml:lang="en">Portlint</title>

    <para xml:lang="en">Do check the port with <link linkend="porting-portlint"><command>portlint</command></link>
      before submitting or committing it.  <command>portlint</command>
      warns about many common errors, both functional and
      stylistic.  For a new (or repocopied) port,
      <command>portlint -A</command> is the most thorough; for an
      existing port, <command>portlint -C</command> is
      sufficient.</para>

    <para xml:lang="en">Since <command>portlint</command> uses heuristics to try to
      figure out errors, it can produce false positive warnings.  In
      addition, occasionally something that is flagged as a problem
      really cannot be done in any other way due to limitations in the
      ports framework.  When in doubt, the best thing to do is ask on
      <link xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-ports">FreeBSD ports mailing list</link>.</para>
  </sect1>

  <sect1 xml:id="testing-porttools">
    <title>Port 工具</title>

    <para xml:lang="en">The <package role="port">ports-mgmt/porttools</package>
      program is part of the Ports Collection.</para>

    <para xml:lang="en"><command>port</command> is the front-end script, which can
      help simplify the testing job.  Whenever a new port or an update
      to an existing one needs testing, use
      <command>port test</command> to test the port, including the
      <link linkend="testing-portlint"><command>portlint</command></link>
      checking.  This command also detects and lists any files that
      are not listed in <filename>pkg-plist</filename>.  For
      example:</para>

    <screen xml:lang="en"><prompt>#</prompt> <userinput>port test /usr/ports/net/csup</userinput></screen>
  </sect1>

  <sect1 xml:id="porting-prefix">
    <title><varname>PREFIX</varname> 以及 <varname>DESTDIR</varname></title>

    <para><varname>PREFIX</varname> 變數會決定該 port 所會安裝的位置。預設是　<filename>/usr/local</filename>　， 但是使用者可以設定程自訂的路徑，像是 <filename>/opt</filename>　。 必須遵循此變數的值。</para>

    <para>若使用者有設定 <varname>DESTDIR</varname> 變數， 那麼它會採用所設定的環境，通常可能是 jail 環境或者是並非掛載於 <filename>/</filename> 上的系統。 通常 port 會裝在 <filename>DESTDIR/PREFIX</filename> 底下， 並且會紀錄在 <filename>DESTDIR/var/db/pkg</filename> 內的套件資料庫。 由於事實上 <varname>DESTDIR</varname> 會由 ports 架構透過 <citerefentry><refentrytitle>chroot</refentrytitle><manvolnum>8</manvolnum></citerefentry> 來自動處理，所以您不需去作相關修改或刻意維護 <varname>DESTDIR</varname> 相容的 ports。</para>

    <para><varname>PREFIX</varname> 會設為 <varname>LOCALBASE</varname> (預設為 <filename>/usr/local</filename>)。 若有設定 <varname>USE_LINUX_PREFIX</varname>， 那麼 <varname>PREFIX</varname> 則為 <varname>LINUXBASE</varname> ( 預設為 <filename>/compat/linux</filename>)。</para>

    <para xml:lang="en">Avoiding hard-coded <filename>/usr/local</filename> paths in
      the source makes the port much more flexible and able to cater
      to the needs of other sites.  Often, this can be accomplished by
      replacing occurrences of <filename>/usr/local</filename>
      in the port's various <filename>Makefile</filename>s with
      <literal>${PREFIX}</literal>.  This variable is
      automatically passed down to every stage of the build and
      install processes.</para>

    <para xml:lang="en">Make sure the application is not installing things in
      <filename>/usr/local</filename> instead of
      <varname>PREFIX</varname>.  A quick test for such hard-coded
      paths is:</para>

    <screen xml:lang="en"><prompt>%</prompt> <userinput>make clean; make package PREFIX=/var/tmp/`make -V PORTNAME`</userinput></screen>

    <para xml:lang="en">If anything is installed outside of
      <varname>PREFIX</varname>, the package creation process will
      complain that it cannot find the files.</para>

    <para xml:lang="en">In addition, it is worth checking the same with the stage
      directory support (see <xref linkend="staging"/>):</para>

    <screen xml:lang="en"><prompt>%</prompt> <userinput>make stage &amp;&amp; make check-plist &amp;&amp; make stage-qa &amp;&amp; make package</userinput></screen>

    <itemizedlist>
      <listitem>
	<para xml:lang="en"><buildtarget xml:lang="en">check-plist</buildtarget> checks for files
	  missing from the plist, and files in the plist that are not
	  installed by the port.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><buildtarget xml:lang="en">stage-qa</buildtarget> checks for common
	  problems like bad shebang, symlinks pointing outside the
	  stage directory, setuid files, and non-stripped
	  libraries...</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="en">These tests will not find hard-coded paths inside the port's
      files, nor will it verify that <varname>LOCALBASE</varname> is
      being used to correctly refer to files from other ports.  The
      temporarily-installed port in
      <filename>/var/tmp/`make -V PORTNAME`</filename> must be
      tested for proper operation to make sure there are no problems
      with paths.</para>

    <para xml:lang="en"><varname>PREFIX</varname> must not be set explicitly in a
      port's <filename>Makefile</filename>.  Users installing the port
      may have set <varname>PREFIX</varname> to a custom location, and
      the port must respect that setting.</para>

    <para xml:lang="en">Refer to programs and files from other ports with the
      variables mentioned above, not explicit pathnames.  For
      instance, if the port requires a macro <literal>PAGER</literal>
      to have the full pathname of <command>less</command>, do not use
      a literal path of <filename>/usr/local/bin/less</filename>.
      Instead, use <literal>${LOCALBASE}</literal>:</para>

    <programlisting xml:lang="en">-DPAGER=\"${LOCALBASE}/bin/less\"</programlisting>

    <para xml:lang="en">The path with <varname>LOCALBASE</varname> is more likely to
      still work if the system administrator has moved the whole
      <filename>/usr/local</filename> tree somewhere else.</para>

    <tip>
      <para xml:lang="en">All these tests are done automatically when running
	<command>poudriere testport</command> or <command>poudriere
	  bulk -t</command>.  It is highly recommended that every
	ports contributor install it, and tests all his ports with it.
	See <xref linkend="testing-poudriere"/> for more
	information.</para>
    </tip>
  </sect1>

  <sect1 xml:id="testing-poudriere">
    <title xml:lang="en"><application>Poudriere</application></title>

    <para xml:lang="en">For a ports contributor,
      <application>Poudriere</application> is one of the most
      important and helpful testing and build tools.  Its main
      features include:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en">Bulk building of the entire ports tree, specific subsets
	  of the ports tree, or a single port including its
	  dependencies</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Automatic packaging of build results</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Generation of build log files per port</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Providing a signed <citerefentry><refentrytitle>pkg</refentrytitle><manvolnum>8</manvolnum></citerefentry> repository</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Testing of port builds before submitting a patch to the
	  FreeBSD bug tracker or committing to the ports tree</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Testing for successful ports builds using different
	  options</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="en">Because <application>Poudriere</application> performs its
      building in a clean <citerefentry><refentrytitle>jail</refentrytitle><manvolnum>8</manvolnum></citerefentry> environment and uses
      <citerefentry><refentrytitle>zfs</refentrytitle><manvolnum>8</manvolnum></citerefentry> features, it has several advantages over traditional
      testing on the host system:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en">No pollution of the host environment: No leftover files,
	  no accidental removals, no changes of existing configuration
	  files.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Verify <filename>pkg-plist</filename> for missing or
	  superfluous entries</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Ports committers sometimes ask for a
	  <application>Poudriere</application> log alongside a patch
	  submission to assess whether the patch is ready for
	  integration into the ports tree</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="en">It is also quite straightforward to set up and use, has no
      dependencies, and will run on any supported FreeBSD release.  This
      section shows how to install, configure, and run
      <application>Poudriere</application> as part of the normal
      workflow of a ports contributor.</para>

    <para xml:lang="en">The examples in this section show a default file layout, as
      standard in FreeBSD.  Substitute any local changes accordingly.
      The ports tree, represented by <varname>${PORTSDIR}</varname>,
      is located in <filename>/usr/ports</filename>.  Both
      <varname>${LOCALBASE}</varname> and <varname>${PREFIX}</varname>
      are <filename>/usr/local</filename> by default.</para>

    <sect2 xml:id="testing-poudriere-installing">
      <title xml:lang="en">Installing <application>Poudriere</application></title>

      <para xml:lang="en"><application>Poudriere</application> is available in the
	ports tree in <package role="port">ports-mgmt/poudriere</package>.  It can be
	installed using <citerefentry><refentrytitle>pkg</refentrytitle><manvolnum>8</manvolnum></citerefentry> or from ports:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>pkg install poudriere</userinput></screen>

      <para xml:lang="en">or</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>make -C /usr/ports/ports-mgmt/poudriere install clean</userinput></screen>

      <para xml:lang="en">There is also a work-in-progress version of
	<application>Poudriere</application> which will eventually
	become the next release.  It is available in <package role="port">ports-mgmt/poudriere-devel</package>.  This
	development version is used for the official FreeBSD package
	builds, so it is well tested.  It often has newer interesting
	features.  A ports committer will want to use the development
	version because it is what is used in production, and has all
	the new features that will make sure everything is exactly
	right.  A contributor will not necessarily need those as the
	most important fixes are backported to released version.  The
	main reason for the use of the development version to build
	the official package is because it is faster, in a way that
	will shorten a full build from 18 hours to 17 hours when using
	a high end 32 <acronym>CPU</acronym> server with 128GB of
	<acronym>RAM</acronym>.  Those optimizations will not matter a
	lot when building ports on a desktop machine.</para>

    </sect2>

    <sect2 xml:id="testing-poudriere-setup">
      <title xml:lang="en">Setting Up <application>Poudriere</application></title>

      <para xml:lang="en">The port installs a default configuration file,
	<filename>/usr/local/etc/poudriere.conf</filename>.  Each
	parameter is documented in the configuration file and in
	<citerefentry vendor="ports"><refentrytitle>poudriere</refentrytitle><manvolnum>8</manvolnum></citerefentry>.  Here is a minimal example config
	file:</para>

      <programlisting xml:lang="en">ZPOOL=tank
ZROOTFS=/poudriere
BASEFS=/poudriere
DISTFILES_CACHE=/usr/ports/distfiles
RESOLV_CONF=/etc/resolv.conf
FREEBSD_HOST=ftp://ftp.freebsd.org
SVN_HOST=svn.FreeBSD.org</programlisting>

      <variablelist>
	<varlistentry>
	  <term xml:lang="en"><varname>ZPOOL</varname></term>

	  <listitem>
	    <para xml:lang="en">The name of the <acronym>ZFS</acronym> storage pool
	      which <application>Poudriere</application> shall use.
	      Must be listed in the output of <command>zpool
		status</command>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en"><varname>ZROOTFS</varname></term>

	  <listitem>
	    <para xml:lang="en">The root of
	      <application>Poudriere</application>-managed file
	      systems.  This entry will cause
	      <application>Poudriere</application> to create
	      <citerefentry><refentrytitle>zfs</refentrytitle><manvolnum>8</manvolnum></citerefentry> file systems under
	      <literal>tank/poudriere</literal>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en"><varname>BASEFS</varname></term>

	  <listitem>
	    <para xml:lang="en">The root mount point for
	      <application>Poudriere</application> file systems.  This
	      entry will cause <application>Poudriere</application> to
	      mount <literal>tank/poudriere</literal> to
	      <literal>/poudriere</literal>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en"><varname>DISTFILES_CACHE</varname></term>

	  <listitem>
	    <para xml:lang="en">Defines where distfiles are stored.  In this
	      example, <application>Poudriere</application> and the
	      host share the distfiles storage directory.  This avoids
	      downloading tarballs which are already present on the
	      system.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en"><varname>RESOLV_CONF</varname></term>

	  <listitem>
	    <para xml:lang="en">Use the host <filename>/etc/resolv.conf</filename>
	      inside jails for <acronym>DNS</acronym>.  This is needed
	      so jails can resolve the <acronym>URL</acronym>s of
	      distfiles when downloading.  It is not needed when using
	      a proxy.  Refer to the default configuration file for
	      proxy configuration.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en"><varname>FREEBSD_HOST</varname></term>

	  <listitem>
	    <para xml:lang="en">The <acronym>FTP</acronym>/<acronym>HTTP</acronym>
	      server to use when the jails are installed from FreeBSD
	      releases and updated with <citerefentry><refentrytitle>freebsd-update</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
	      Choose a server location which is close, for example if
	      the machine is located in Australia, use
	      <literal>ftp.au.freebsd.org</literal>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:lang="en"><varname>SVN_HOST</varname></term>

	  <listitem>
	    <para xml:lang="en">The server from where jails are installed and
	      updated when using
	      <application>Subversion</application>.  Also used for
	      ports tree when not using <citerefentry><refentrytitle>portsnap</refentrytitle><manvolnum>8</manvolnum></citerefentry>.  Again,
	      choose a nearby location.  A list of official
	      <application>Subversion</application> mirrors can be
	      found in the <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/books/handbook/svn.html#svn-mirrors">FreeBSD
		Handbook <application>Subversion</application>
		section</link>.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 xml:id="testing-poudriere-create-jails">
      <title xml:lang="en">Creating <application>Poudriere</application>
	Jails</title>

      <para xml:lang="en">Create the base jails which
	<application>Poudriere</application> will use for
	building:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere jail -c -j 93Ramd64 -v 9.3-RELEASE -a amd64</userinput></screen>

      <para xml:lang="en">Fetch a <literal>9.3-RELEASE</literal> for
	<literal>amd64</literal> from the <acronym>FTP</acronym>
	server given by <varname>FREEBSD_HOST</varname> in
	<filename>poudriere.conf</filename>, create the zfs file
	system <literal>tank/poudriere/jails/93Ramd64</literal>, mount
	it on <filename>/poudriere/jails/93Ramd64</filename> and
	extract the <literal>9.3-RELEASE</literal> tarballs into this
	file system.</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere jail -c -j 10i386 -v stable/10 -a i386 -m svn+https</userinput></screen>

      <para xml:lang="en">Create <literal>tank/poudriere/jails/10i386</literal>,
	mount it on <filename>/poudriere/jails/10i386</filename>, then
	check out the tip of the <application>Subversion</application>
	branch of <literal>FreeBSD-10-STABLE</literal> from
	<literal>SVN_HOST</literal> in
	<filename>poudriere.conf</filename> into
	<filename>/poudriere/jails/10i386/usr/src</filename>, then
	complete a <buildtarget xml:lang="en">buildworld</buildtarget> and install
	it into <filename>/poudriere/jails/10i386</filename>.</para>

      <tip>
	<para xml:lang="en">If a specific <application>Subversion</application>
	  revision is needed, append it to the version string.  For
	  example:</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere jail -c -j 10i386 -v stable/10@123456 -a i386 -m svn+https</userinput></screen>
      </tip>

      <note>
	<para xml:lang="en">While it is possible to build a newer version of FreeBSD on
	  an older version, most of the time it will not run.  For
	  example, if a <literal>stable/10</literal> jail is needed,
	  the host will have to run <literal>stable/10</literal> too.
	  Running <literal>10.0-RELEASE</literal> is not
	  enough.</para>
      </note>

      <caution>
	<para xml:lang="en">The default <literal>svn</literal> protocol works but is
	  not very secure.  Using <literal>svn+https</literal> along
	  with verifying the remote server's <acronym>SSL</acronym>
	  fingerprint is advised.  It will ensure that the files used
	  for building the jail are from a trusted source.</para>
      </caution>

      <para xml:lang="en">A list of jails currently known to
	<application>Poudriere</application> can be shown with
	<command>poudriere jail -l</command>:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere jail -l</userinput>
JAILNAME             VERSION              ARCH    METHOD
93Ramd64             9.3-RELEASE          amd64   ftp
10i386               10.0-STABLE          i386    svn+https</screen>
    </sect2>


    <sect2 xml:id="testing-poudriere-maintaining-jails">
      <title xml:lang="en">Keeping <application>Poudriere</application> Jails
	Updated</title>

      <para xml:lang="en">Managing updates is very straightforward.  The
	command:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere jail -u -j <replaceable>JAILNAME</replaceable></userinput></screen>

      <para xml:lang="en">updates the specified jail to the latest version
	available.  For FreeBSD releases, update to the latest patchlevel
	with <citerefentry><refentrytitle>freebsd-update</refentrytitle><manvolnum>8</manvolnum></citerefentry>.  For FreeBSD versions built from
	source, update to the latest
	<application>Subversion</application> revision in the
	branch.</para>

      <tip>
	<para xml:lang="en">For jails employing a
	  <literal>svn+<replaceable>*</replaceable></literal> method,
	  it is helpful to add <command>-J
	    <replaceable>NumberOfParallelBuildJobs</replaceable></command>
	  to speed up the build by increasing the number of parallel
	  compile jobs used.  For example, if the building machine has
	  6 <acronym>CPU</acronym>s, use:</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere jail -u -J 6 -j <replaceable>JAILNAME</replaceable></userinput></screen>
      </tip>
    </sect2>

    <sect2 xml:id="testing-poudriere-ports-tree">
      <title xml:lang="en">Setting Up Ports Trees for Use with
	<application>Poudriere</application></title>

      <para xml:lang="en">There are multiple ways to use ports trees in
	<application>Poudriere</application>.  The most
	straightforward way is to have
	<application>Poudriere</application> create a default ports
	tree for itself:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere ports -c</userinput></screen>

      <para xml:lang="en">This command creates
	<literal>tank/poudriere/ports/default</literal>, mount it on
	<filename>/poudriere/ports/default</filename>, and populate it
	using <citerefentry><refentrytitle>portsnap</refentrytitle><manvolnum>8</manvolnum></citerefentry>.  Afterward it is included in the list
	of known ports trees:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere ports -l</userinput>
PORTSTREE      METHOD     PATH
default        portsnap   /poudriere/ports/default</screen>

      <note>
	<para xml:lang="en">Note that the <quote>default</quote> ports tree is
	  special.  Each of the build commands explained later will
	  implicitly use this ports tree unless specifically specified
	  otherwise.  To use another tree, add <command>-p
	    <replaceable>treename</replaceable></command> to the
	  commands.</para>
      </note>

      <para xml:lang="en">While useful for regular bulk builds, having this default
	ports tree with the <citerefentry><refentrytitle>portsnap</refentrytitle><manvolnum>8</manvolnum></citerefentry> method may not be the
	best way to deal with local modifications for a ports
	contributor.  As with the creation of jails, it is possible to
	use a different method for creating the ports tree.  To add an
	additional ports tree for testing local modifications and
	ports development, checking out the tree via
	<application>Subversion</application> is possible:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere ports -c -m svn+https -p subversive</userinput></screen>

      <para xml:lang="en">Creates <literal>tank/poudriere/ports/subversive</literal>
	and mounts it on
	<filename>/poudriere/ports/subversive</filename>.  It is then
	populated using <application>Subversion</application>.
	Finally, it is added to the list of known ports trees:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere ports -l</userinput>
PORTSTREE            METHOD     PATH
default              portsnap   /poudriere/ports/default
subversive           svn+https  /poudriere/ports/subversive</screen>

      <tip>
	<para xml:lang="en">The <literal>svn</literal> method allows extra
	  qualifiers to tell <application>Subversion</application>
	  exactly how to fetch data.  This is explained in
	  <citerefentry vendor="ports"><refentrytitle>poudriere</refentrytitle><manvolnum>8</manvolnum></citerefentry>.  For instance, <command>poudriere ports
	    -c -m svn+ssh -p subversive</command> uses
	  <application>SSH</application> for the checkout.</para>
      </tip>

    </sect2>

    <sect2 xml:id="testing-poudriere-ports-tree-manual">
      <title xml:lang="en">Using Manually Managed Ports Trees with Poudriere</title>

      <para xml:lang="en">Depending on the workflow, it can be extremely helpful to
	use ports trees which are maintained manually.  For instance,
	if there is a local copy of the ports tree in
	<filename>/work/ports</filename>, point
	<application>Poudriere</application> to the location:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere ports -c -F -f none -M /work/ports -p development</userinput></screen>

      <para xml:lang="en">This will be listed in the table of known trees:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere ports -l</userinput>
PORTSTREE    METHOD   PATH
development  -        /work/ports</screen>

      <note>
	<para xml:lang="en">The dash in the <literal>METHOD</literal> column means
	  that <application>Poudriere</application> will not update or
	  change this ports tree, ever.  It is completely up to the
	  user to maintain this tree, including all local
	  modifications that may be used for testing new ports and
	  submitting patches.</para>
      </note>

    </sect2>

    <sect2 xml:id="testing-poudriere-ports-tree-updating">
      <title xml:lang="en">Keeping Poudriere Ports Trees Updated</title>

      <para xml:lang="en">As straightforward as with jails described earlier:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere ports -u -p <replaceable>PORTSTREE</replaceable></userinput></screen>

      <para xml:lang="en">Will update the given
	<replaceable>PORTSTREE</replaceable>, one tree given by the
	output of <command>poudriere -l</command>, to the latest
	revision available on the official servers.</para>

      <note>
	<para xml:lang="en">Ports trees without a method, see <xref linkend="testing-poudriere-ports-tree-manual"/>, cannot be
	  updated like this.  They must be updated manually by the
	  porter.</para>
      </note>

    </sect2>

    <sect2 xml:id="testing-poudriere-testing-ports">
      <title xml:lang="en">Testing Ports</title>

      <para xml:lang="en">After jails and ports trees have been set up, the result
	of a contributor's modifications to the ports tree can be
	tested.</para>

      <para xml:lang="en">For example, local modifications to the <package role="port">www/firefox</package> port located in
	<filename>/work/ports/www/firefox</filename> can be tested in
	the previously created 9.3-RELEASE jail:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere testport -j 93Ramd64 -p development -o www/firefox</userinput></screen>

      <para xml:lang="en">This will build all dependencies of
	<application>Firefox</application>.  If a dependency has been
	built previously and is still up-to-date, the pre-built
	package is installed.  If a dependency has no up-to-date
	package, one will be built with default options in a jail.
	Then <application>Firefox</application> itself is
	built.</para>

      <para xml:lang="en">The complete build of every port is logged to
	<filename>/poudriere/data/logs/bulk/93Ri386-development/<replaceable>build-time</replaceable>/logs</filename>.</para>

      <para xml:lang="en">The directory name <literal>93Ri386-development</literal>
	is derived from the arguments to <literal>-j</literal> and
	<literal>-p</literal>, respectively.  For convenience, a
	symbolic link
	<filename>/poudriere/data/logs/bulk/93Ri386-development/latest</filename>
	is also maintained.  The link points to the latest
	<replaceable>build-time</replaceable> directory.  Also in this
	directory is an <filename>index.html</filename> for observing
	the build process with a web browser.</para>

      <para xml:lang="en">By default, <application>Poudriere</application> cleans up
	the jails and leaves log files in the directories mentioned
	above.  To ease investigation, jails can be kept running after
	the build by adding <option>-i</option> to
	<command>testport</command>:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere testport -j 93Ramd64 -p development -i -o www/firefox</userinput></screen>

      <para xml:lang="en">After the build completes, and regardless of whether it
	was successful, a shell is provided within the jail.  The
	shell is used to investigate further.
	<application>Poudriere</application> can be told to leave the
	jail running after the build finishes with
	<option>-I</option>.  <application>Poudriere</application>
	will show the command to run when the jail is no longer
	needed.  It is then possible to <citerefentry><refentrytitle>jexec</refentrytitle><manvolnum>8</manvolnum></citerefentry> into it:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere testport -j 93Ramd64 -p development -I -o www/firefox</userinput>
[...]
====&gt;&gt; Installing local Pkg repository to /usr/local/etc/pkg/repos
====&gt;&gt; Leaving jail 93Ramd64-development-n running, mounted at /poudriere/data/.m/93Ramd64-development/ref for interactive run testing
====&gt;&gt; To enter jail: jexec 93Ramd64-development-n env -i TERM=$TERM /usr/bin/login -fp root
====&gt;&gt; To stop jail: poudriere jail -k -j 93Ramd64 -p development
<prompt>#</prompt> <userinput>jexec 93Ramd64-development-n env -i TERM=$TERM /usr/bin/login -fp root</userinput>
<prompt>#</prompt> <userinput><replaceable>[do some stuff in the jail]</replaceable></userinput>
<prompt>#</prompt> <userinput>exit</userinput>
<prompt>#</prompt> <userinput>poudriere jail -k -j 93Ramd64 -p development</userinput>
====&gt;&gt; Umounting file systems</screen>

      <para xml:lang="en">An integral part of the FreeBSD ports build infrastructure is
	the ability to tweak ports to personal preferences with
	options.  These can be tested with
	<application>Poudriere</application> as well.  Adding the
	<option>-c</option>:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere testport -c -o www/firefox</userinput></screen>

      <para xml:lang="en">Presents the port configuration dialog before the port is
	built.  The ports given after <option>-o</option> in the
	format
	<literal><replaceable>category</replaceable>/<replaceable>portname</replaceable></literal>
	will use the specified options, all dependencies will use the
	default options.  Testing dependent ports with non-default
	options can be accomplished using sets, see <xref linkend="testing-poudriere-sets"/>.</para>

      <tip>
	<para xml:lang="en">When testing ports where <filename>pkg-plist</filename>
	  is altered during build depending on the selected options,
	  it is recommended to perform a test run with all options
	  selected <emphasis>and</emphasis> one with all options
	  deselected.</para>
      </tip>
    </sect2>

    <sect2 xml:id="testing-poudriere-sets">
      <title xml:lang="en">Using Sets</title>

      <para xml:lang="en">For all actions involving builds, a so-called
	<emphasis>set</emphasis> can be specified using <literal>-z
	  <replaceable>setname</replaceable></literal>.  A set refers
	to a fully independent build.  This allows, for instance,
	usage of <command>testport</command> with non-standard options
	for the dependent ports.</para>

      <para xml:lang="en">To use sets, <application>Poudriere</application> expects
	an existing directory structure similar to
	<varname>PORT_DBDIR</varname>, defaults to
	<filename>/var/db/ports</filename> in its configuration
	directory.  This directory is then nullfs-mounted into the
	jails where the ports and their dependencies are built.
	Usually a suitable starting point can be obtained by
	recursively copying the existing <varname>PORT_DBDIR</varname>
	to
	<filename>/usr/local/etc/poudriere.d/<replaceable>jailname</replaceable>-<replaceable>portname</replaceable>-<replaceable>setname</replaceable>-options</filename>.
	This is described in detail in <citerefentry vendor="ports"><refentrytitle>poudriere</refentrytitle><manvolnum>8</manvolnum></citerefentry>.  For
	instance, testing <package role="port">www/firefox</package>
	in a specific set named <literal>devset</literal>, add the
	<literal>-z devset</literal> parameter to the testport
	command:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere testport -j 93Ramd64 -p development -z devset -o www/firefox</userinput></screen>

      <para xml:lang="en">This will look for the existence of these directories in
	this order:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en"><filename>/usr/local/etc/poudriere.d/93Ramd64-development-devset-options</filename></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><filename>/usr/local/etc/poudriere.d/93Ramd64-devset-options</filename></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><filename>/usr/local/etc/poudriere.d/93Ramd64-development-options</filename></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><filename>/usr/local/etc/poudriere.d/devset-options</filename></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><filename>/usr/local/etc/poudriere.d/development-options</filename></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><filename>/usr/local/etc/poudriere.d/93Ramd64-options</filename></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><filename>/usr/local/etc/poudriere.d/options</filename></para>
	</listitem>
      </itemizedlist>

      <para xml:lang="en">From this list, <application>Poudriere</application>
	nullfs-mounts the <emphasis>first existing</emphasis>
	directory tree into the <filename>/var/db/ports</filename>
	directory of the build jails.  Hence, all custom options are
	used for all the ports during this run of
	<command>testport</command>.</para>

      <para xml:lang="en">After the directory structure for a set is provided, the
	options for a particular port can be altered.  For
	example:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere options -c www/firefox -z devset</userinput></screen>

      <para xml:lang="en">The configuration dialog for <package role="port">www/firefox</package> is shown, and options can
	be edited.  The selected options are saved to the
	<literal>devset</literal> set.</para>

      <note>
	<para xml:lang="en"><application>Poudriere</application> is very flexible in
	  the option configuration.  They can be set for particular
	  jails, ports trees, and for multiple ports by one command.
	  Refer to <citerefentry vendor="ports"><refentrytitle>poudriere</refentrytitle><manvolnum>8</manvolnum></citerefentry> for details.</para>
      </note>

    </sect2>

    <sect2 xml:id="testing-poudriere-make-conf">
      <title xml:lang="en">Providing a Custom <filename>make.conf</filename>
	File</title>

      <para xml:lang="en">Similar to using sets,
	<application>Poudriere</application> will also use a custom
	<filename>make.conf</filename> if it is provided.  No special
	command line argument is necessary.  Instead,
	<application>Poudriere</application> looks for existing files
	matching a name scheme derived from the command line.  For
	instance:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere testport -j 93Ramd64 -p development -z devset -o www/firefox</userinput></screen>

      <para xml:lang="en">causes <application>Poudriere</application> to check for
	the existence of these files in this order:</para>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en"><filename>/usr/local/etc/poudriere.d/make.conf</filename></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><filename>/usr/local/etc/poudriere.d/devset-make.conf</filename></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><filename>/usr/local/etc/poudriere.d/development-make.conf</filename></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><filename>/usr/local/etc/poudriere.d/93Ramd64-make.conf</filename></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><filename>/usr/local/etc/poudriere.d/93Ramd64-development-make.conf</filename></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><filename>/usr/local/etc/poudriere.d/93Ramd64-devset-make.conf</filename></para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><filename>/usr/local/etc/poudriere.d/93Ramd64-development-devset-make.conf</filename></para>
	</listitem>
      </itemizedlist>

      <para xml:lang="en">Unlike with sets, all of the found files will be appended,
	<emphasis>in that order</emphasis>, into one
	<filename>make.conf</filename> inside the build jails.  It is
	hence possible to have general make variables, intended to
	affect all builds in
	<filename>/usr/local/etc/poudriere.d/make.conf</filename>.
	Special variables, intended to affect only certain jails or
	sets can be set in specialised <filename>make.conf</filename>
	files, such as
	<filename>/usr/local/etc/poudriere.d/93Ramd64-development-devset-make.conf</filename>.</para>

      <example xml:id="testing-poudriere-sets-perl">
	<title xml:lang="en">Using <filename>make.conf</filename> to Change Default
	  <application>Perl</application></title>

	<para xml:lang="en">To build a set with a non default
	  <application>Perl</application> version, for example,
	  <literal>5.20</literal>, using a set named
	  <literal>perl5-20</literal>, create a
	  <filename>perl5-20-make.conf</filename> with this
	  line:</para>

	<programlisting xml:lang="en">DEFAULT_VERSIONS+= perl=5.20</programlisting>

	<note>
	  <para xml:lang="en">Note the use of <literal>+=</literal> so that if the
	    variable is already set in the default
	    <filename>make.conf</filename> its content will not be
	    overwritten.</para>
	</note>
      </example>

    </sect2>

    <sect2 xml:id="testing-poudriere-pruning-distfiles">
      <title xml:lang="en">Pruning no Longer Needed Distfiles</title>

      <para xml:lang="en"><application>Poudriere</application> comes with a built-in
	mechanism to remove outdated distfiles that are no longer used
	by any port of a given tree.  The command</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere distclean -p <replaceable>portstree</replaceable></userinput></screen>

      <para xml:lang="en">will scan the distfiles folder,
	<varname>DISTFILES_CACHE</varname> in
	<filename>poudriere.conf</filename>, versus the ports tree
	given by the <literal>-p
	  <replaceable>portstree</replaceable></literal> argument and
	prompt for removal of those distfiles.  To skip the prompt and
	remove all unused files unconditionally, the
	<literal>-y</literal> argument can be added:</para>

      <screen xml:lang="en"><prompt>#</prompt> <userinput>poudriere distclean -p <replaceable>portstree</replaceable> -y</userinput></screen>
    </sect2>

    <!--
Tricks


TODO
- ZFS clones for ports tree modifications during builds

    -->

  </sect1>

  <sect1 xml:id="testing-tinderbox">
    <title xml:lang="en">Tinderbox</title>

    <para xml:lang="en">As an avid ports contributor, take
      a look at <application>Tinderbox</application>.  It is a
      powerful system for building and testing ports.  Install
      <application>Tinderbox</application> using
      <package role="port">ports-mgmt/tinderbox</package> port.  Be
      sure to read supplied documentation since the configuration is
      not trivial.</para>

    <para xml:lang="en">Visit the
      <link xlink:href="http://tinderbox.marcuscom.com/">Tinderbox
	website</link> for more details.</para>
  </sect1>
</chapter>

  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->

<chapter version="5.0" xml:id="port-upgrading">

  <title xml:lang="en">Upgrading a Port</title>

  <para xml:lang="en">When a port is not the most recent version available from the
    authors, update the local working copy of
    <filename>/usr/ports</filename>.  The port might have already been
    updated to the new version.</para>

  <para xml:lang="en">When working with more than a few ports, it will probably be
    easier to use <application>Subversion</application> to keep
    the whole ports collection up-to-date, as described in the <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/books/handbook/ports-using.html">Handbook</link>.
    This will have the added benefit of tracking all the port's
    dependencies.</para>

  <para xml:lang="en">The next step is to see if there is an update already pending.
    To do this, there are two options.  There is a searchable
    interface to the <link xlink:href="https://bugs.freebsd.org/search/">FreeBSD Problem
      Report (PR) or bug database</link>.  Select <literal>Ports
      Tree</literal> in the <literal>Product</literal> dropdown, and
    enter the name of the port in the <literal>Summary</literal>
    field.</para>

  <para xml:lang="en">However, sometimes people forget to put the name of the port
    into the Summary field in an unambiguous fashion.  In that
    case, try searching in the <literal>Comment</literal> field in
    the <literal>Detailled Bug Information</literal> section, or try
    the
    <link linkend="portsmon">FreeBSD Ports Monitoring System</link>
    (also known as <literal>portsmon</literal>).  This system
    attempts to classify port PRs by portname.  To search for PRs
    about a particular port, use the <link xlink:href="http://portsmon.FreeBSD.org/portoverview.py">Overview
      of One Port</link>.</para>

  <para xml:lang="en">If there is no pending PR, the next step is to send an email
    to the port's maintainer, as shown by
    <command>make maintainer</command>.  That person may already be
    working on an upgrade, or have a reason to not upgrade the port
    right now (because of, for example, stability problems of the
    new version), and there is no need to duplicate their work.  Note
    that unmaintained ports are listed with a maintainer of
    <literal>ports@FreeBSD.org</literal>, which is just the general
    ports mailing list, so sending mail there probably will not help
    in this case.</para>

  <para xml:lang="en">If the maintainer asks you to do the upgrade or there is
    no maintainer, then help out FreeBSD by
    preparing the update!  Please do this by using the
    <citerefentry><refentrytitle>diff</refentrytitle><manvolnum>1</manvolnum></citerefentry> command in the base system.</para>

  <para xml:lang="en">To create a suitable <command>diff</command> for a single
    patch, copy the file that needs patching to
    <filename><replaceable>something</replaceable>.orig</filename>,
    save the changes to
    <filename><replaceable>something</replaceable></filename> and then
    create the patch:</para>

  <informalexample>
    <screen xml:lang="en"><prompt>%</prompt> <userinput>diff -u <replaceable>something</replaceable>.orig <replaceable>something</replaceable> &gt; something.diff</userinput></screen>
  </informalexample>

  <para xml:lang="en">Otherwise, either use the
    <command>svn diff</command> method (<xref linkend="svn-diff"/>)
    or copy the contents of the port to an entire different
    directory and use the result of the recursive <citerefentry><refentrytitle>diff</refentrytitle><manvolnum>1</manvolnum></citerefentry>
    output of the new and old ports directories (for example, if the
    modified port directory is called <filename>superedit</filename>
    and the original is in our tree as
    <filename>superedit.bak</filename>, then save the result of
    <command>diff -ruN superedit.bak superedit</command>).  Either
    unified or context diff is fine, but port committers generally
    prefer unified diffs.  Note the use of the <literal>-N</literal>
    option—this is the accepted way to force diff to properly
    deal with the case of new files being added or old files being
    deleted.  Before sending us the diff, please examine the output
    to make sure all the changes make sense.  (In particular, make
    sure to first clean out the work directories with
    <command>make clean</command>).</para>

  <note>
    <para xml:lang="en">If some files have been added, copied, moved, or removed,
      add this information to the problem report so that the committer
      picking up the patch will know what <citerefentry><refentrytitle>svn</refentrytitle><manvolnum>1</manvolnum></citerefentry> commands to
      run.</para>
  </note>

  <para xml:lang="en">To simplify common operations with patch files, use
    <command>make makepatch</command> as described in <xref linkend="slow-patch"/>.
    Other tools exists, like
    <filename>/usr/ports/Tools/scripts/patchtool.py</filename>.
    Before using it, please read
    <filename>/usr/ports/Tools/scripts/README.patchtool</filename>.</para>

  <para xml:lang="en">If the port is unmaintained, and you are actively using
    it, please consider volunteering to become its
    maintainer.  FreeBSD has over 4000 ports without maintainers, and
    this is an area where more volunteers are always needed.  (For a
    detailed description of the responsibilities of maintainers,
    refer to the section in the <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/books/developers-handbook/policies.html#POLICIES-MAINTAINER">Developer's
      Handbook</link>.)</para>

  <para xml:lang="en">To submit the diff, use the <link xlink:href="https://bugs.freebsd.org/submit/">bug submit
      form</link> (product <literal>Ports &amp; Packages</literal>,
    component <literal>Individual Port(s)</literal>).  If the
    submitter is also
    maintaining the port, be sure to put
    <literal>[MAINTAINER]</literal> at the beginning of the
    <literal>Summary</literal> line.  Always include the category
    with the port name, followed by colon, and brief descripton of the
    issue.  For example:
    <literal><replaceable>category/portname</replaceable>:
      <replaceable>add FOO option</replaceable></literal>, or if
    maintaining the port, <literal>[MAINTAINER]
      <replaceable>category/portname</replaceable>:
      <replaceable>Update to X.Y</replaceable></literal>.
    Please mention any added or
    deleted files in the message, as they have to be explicitly
    specified to <citerefentry><refentrytitle>svn</refentrytitle><manvolnum>1</manvolnum></citerefentry> when doing a commit.  Do not compress or
    encode the diff.</para>

  <para xml:lang="en">Before submitting the bug, review the <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/articles/problem-reports/pr-writing.html">
    Writing the problem report</link> section in the Problem
    Reports article.  It contains far more information about how to
    write useful problem reports.</para>

  <important>
    <para xml:lang="en">If the upgrade is motivated by security concerns or a
      serious fault in the currently committed port, please notify
      the Ports Management Team <email>portmgr@FreeBSD.org</email> to request immediate rebuilding and
      redistribution of the port's package.  Unsuspecting users
      of <command>pkg</command> will otherwise continue to install
      the old version via <command>pkg install</command> for several
      weeks.</para>
  </important>

  <note>
    <para xml:lang="en">Once again, please use <citerefentry><refentrytitle>diff</refentrytitle><manvolnum>1</manvolnum></citerefentry> and not <citerefentry><refentrytitle>shar</refentrytitle><manvolnum>1</manvolnum></citerefentry>
      to send updates to existing ports!  This helps ports
      committers understand exactly what is being changed.</para>
  </note>

  <para xml:lang="en">Now that all of that is done, read about
    how to keep up-to-date in <xref linkend="keeping-up"/>.</para>

  <sect1 xml:id="svn-diff">
    <title xml:lang="en">Using <application>Subversion</application> to Make
      Patches</title>

    <para xml:lang="en">When possible, please submit a <citerefentry><refentrytitle>svn</refentrytitle><manvolnum>1</manvolnum></citerefentry> diff.  They
      are easier to handle than diffs between
      <quote>new and old</quote> directories.  It is easier
      to see what has changed, and to update the diff if
      something was modified in the Ports Collection since the
      work on it began, or if the
      committer asks for something to be fixed.  Also, a patch
      generated with <command>svn diff</command> can be easily applied
      with <command>svn patch</command> and will save some time to the
      committer.</para>

    <screen xml:lang="en"><prompt>%</prompt> <userinput>cd ~/my_wrkdir</userinput> <co xml:id="my-wrkdir"/>
<prompt>%</prompt> <userinput>svn co <replaceable>https://svn.FreeBSD.org</replaceable>/ports/head/dns/pdnsd</userinput> <co xml:id="svn-FreeBSD-org"/>
<prompt>%</prompt> <userinput>cd ~/my_wrkdir/pdnsd</userinput></screen>

    <calloutlist>
      <callout arearefs="my-wrkdir">

	<para xml:lang="en">This can be anywhere, of course.  Building
	  ports is not limited to within
	  <filename>/usr/ports/</filename>.</para>
      </callout>

      <callout arearefs="svn-FreeBSD-org">
	<para xml:lang="en"><link xlink:href="https://svn.FreeBSD.org/">svn.FreeBSD.org</link>
	  is the FreeBSD public <application>Subversion</application>
	  server.  See <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/books/handbook/svn.html#svn-mirrors">Subversion
	    mirror sites</link> for more information.</para>
      </callout>
    </calloutlist>

    <para xml:lang="en">While in the port directory, make any changes that are
      needed.  If adding, copying, moving, or removing a
      file, use <command>svn</command> to track these changes:</para>

    <screen xml:lang="en"><prompt>%</prompt> <userinput>svn add <replaceable>new_file</replaceable></userinput>
<prompt>%</prompt> <userinput>svn copy <replaceable>some_file</replaceable> <replaceable>file_copy</replaceable></userinput>
<prompt>%</prompt> <userinput>svn move <replaceable>old_name</replaceable> <replaceable>new_name</replaceable></userinput>
<prompt>%</prompt> <userinput>svn remove <replaceable>deleted_file</replaceable></userinput></screen>

    <para xml:lang="en">Make sure to check the port using the checklist in
      <xref linkend="porting-testing"/> and
      <xref linkend="porting-portlint"/>.</para>

    <screen xml:lang="en"><prompt>%</prompt> <userinput>svn status</userinput>
<prompt>%</prompt> <userinput>svn update</userinput> <co xml:id="svn-update"/></screen>

    <calloutlist>
      <callout arearefs="svn-update">
	<para xml:lang="en">This will attempt to merge the differences between the
	  patch and current repository version.  Watch the output
	  carefully.  The letter in front of each file name
	  indicates what was done with it.  See
	  <xref linkend="table-svn-up"/> for a complete list.</para>
      </callout>
    </calloutlist>

    <table pgwide="1" frame="none" xml:id="table-svn-up">
      <title xml:lang="en"><application>Subversion</application> Update File
	Prefixes</title>

      <tgroup cols="2">
	<tbody>
	  <row>
	    <entry xml:lang="en">U</entry>
	    <entry xml:lang="en">The file was updated without problems.</entry>
	  </row>

	  <row>
	    <entry xml:lang="en">G</entry>
	    <entry xml:lang="en">The file was updated without problems (only when
	      working against a remote
	      repository).</entry>
	  </row>

	  <row>
	    <entry xml:lang="en">M</entry>
	    <entry xml:lang="en">The file had been modified, and was merged
	      without conflicts.</entry>
	  </row>

	  <row>
	    <entry xml:lang="en">C</entry>
	    <entry xml:lang="en">The file had been modified, and was merged with
	      conflicts.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para xml:lang="en">If <literal>C</literal> is displayed as a result of
      <command>svn update</command>, it means something changed in
      the <application>Subversion</application> repository and
      <citerefentry><refentrytitle>svn</refentrytitle><manvolnum>1</manvolnum></citerefentry> was not able to merge the local changes with those
      from the repository.  It is always a good idea to inspect the
      changes anyway, since <citerefentry><refentrytitle>svn</refentrytitle><manvolnum>1</manvolnum></citerefentry> does not know anything about
      the structure of a port, so it might (and probably will) merge
      things that do not make sense.</para>

    <para xml:lang="en">The last step is to make a unified <citerefentry><refentrytitle>diff</refentrytitle><manvolnum>1</manvolnum></citerefentry>
      of the changes:</para>

    <screen xml:lang="en"><prompt>%</prompt> <userinput>svn diff &gt; ../`make -VPKGNAME`.diff</userinput></screen>

    <note>
      <para xml:lang="en">If files have been added, copied, moved, or removed,
	include the <citerefentry><refentrytitle>svn</refentrytitle><manvolnum>1</manvolnum></citerefentry> <command>add</command>,
	<command>copy</command>, <command>move</command>, and
	<command>remove</command> commands that were used.
	<command>svn move</command> or <command>svn copy</command>
	must be run before the patch can be applied.  <command>svn
	  add</command> or <command>svn remove</command> must be run
	after the patch is applied.</para>
    </note>

    <para xml:lang="en">Send the patch following the <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/articles/problem-reports/pr-writing.html">problem
	report submission guidelines</link>.</para>

    <tip>
      <para xml:lang="en">The patch can be automatically generated and the PR
	pre-filled with the contact information by using
	<command>port submit</command>.  See <xref linkend="testing-porttools"/> for more details.</para>
    </tip>
  </sect1>

  <sect1 xml:id="moved-and-updating-files">
    <title xml:lang="en"><filename>UPDATING</filename> and
      <filename>MOVED</filename></title>

    <sect2 xml:id="moved-and-updating-updating">
      <title xml:lang="en"><filename>/usr/ports/UPDATING</filename></title>

      <para xml:lang="en">If upgrading the port requires special steps like
	changing configuration files or running a specific program,
	it must be documented in this file.  The format of
	an entry in this file is:</para>

      <programlisting xml:lang="en">YYYYMMDD:
  AFFECTS: users of portcategory/portname
  AUTHOR: Your name &lt;Your email address&gt;

  Special instructions</programlisting>

      <tip>
	<para xml:lang="en">When including exact
	  <application>portmaster</application>,
	  <application>portupgrade</application>, and/or
	  <application>pkg</application> instructions, please make
	  sure
	  to get the shell escaping right.  For example, do
	  <emphasis>not</emphasis> use:</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>pkg delete -g -f docbook-xml* docbook-sk* docbook[2345]??-* docbook-4*</userinput></screen>

	<para xml:lang="en">As shown, the command will only work with
	  <application>bourne shells</application>.  Instead, use the
	  form shown below, which will work with both
	  <application>bourne shell</application> and
	  <application>c-shell</application>:</para>

	<screen xml:lang="en"><prompt>#</prompt> <userinput>pkg delete -g -f docbook-xml\* docbook-sk\* docbook\[2345\]\?\?-\* docbook-4\*</userinput></screen>
      </tip>

      <note>
	<para xml:lang="en">It is recommended that the AFFECTS line contains a glob
	  matching all the ports affected by the entry so that
	  automated tools can parse it as easily as possible.  If an
	  update concerns all the existing <application>BIND
	    9</application> versions the <literal>AFFECTS</literal>
	  content must be <literal>users of dns/bind9*</literal>, it
	  must <emphasis>not</emphasis> be <literal>users of BIND
	    9</literal></para>
      </note>

    </sect2>

    <sect2 xml:id="moved-and-updating-moved">
      <title xml:lang="en"><filename>/usr/ports/MOVED</filename></title>

      <para xml:lang="en">This file is used to
	list moved or removed ports.  Each line in the file is made
	up of the name of the port, where the port was moved, when,
	and why.  If the port was removed, the section detailing where
	it was moved can be left blank.  Each section must be
	separated by the <literal>|</literal> (pipe) character, like
	so:</para>

      <programlisting xml:lang="en">old name|new name (blank for deleted)|date of move|reason</programlisting>

      <para xml:lang="en">The date must be entered in the form
	<literal>YYYY-MM-DD</literal>.  New entries are added to
	the top of the file to keep it in reverse chronological order,
	with the last entry first.</para>

      <para xml:lang="en">If a port was removed but has since been restored,
	delete the line in this file that states that it was
	removed.</para>

      <para xml:lang="en">If a port was renamed and then renamed back to its
	original name, add a new one with the intermediate name to the
	old name, and remove the old entry as to not create a
	loop.</para>

      <note>
	<para xml:lang="en">Any changes must be validated with
	  <command>Tools/scripts/MOVEDlint.awk</command>.</para>

	<para xml:lang="en">If using a ports directory other than
	  <filename>/usr/ports</filename>, use:</para>

	<informalexample>
	  <screen xml:lang="en"><prompt>%</prompt> <userinput>cd <replaceable>/home/user/ports</replaceable></userinput>
  <prompt>%</prompt> <userinput>env PORTSDIR=$PWD Tools/scripts/MOVEDlint.awk</userinput></screen>
	</informalexample>
      </note>
    </sect2>
  </sect1>
</chapter>


  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter version="5.0" xml:id="security">

  <title>安全性</title>

  <sect1 xml:id="security-intro">
    <title xml:lang="en">Why Security is So Important</title>

    <para xml:lang="en">Bugs are occasionally introduced to the software.  Arguably,
      the most dangerous of them are those opening security
      vulnerabilities.  From the technical viewpoint, such
      vulnerabilities are to be closed by exterminating the bugs that
      caused them.  However, the policies for handling mere bugs and
      security vulnerabilities are very different.</para>

    <para xml:lang="en">A typical small bug affects only those users who have
      enabled some combination of options triggering the bug.  The
      developer will eventually release a patch followed by a new
      version of the software, free of the bug, but the majority of
      users will not take the trouble of upgrading immediately because
      the bug has never vexed them.  A critical bug that may cause
      data loss represents a graver issue.  Nevertheless, prudent
      users know that a lot of possible accidents, besides software
      bugs, are likely to lead to data loss, and so they make backups
      of important data; in addition, a critical bug will be
      discovered really soon.</para>

    <para xml:lang="en">A security vulnerability is all different.  First, it may
      remain unnoticed for years because often it does not cause
      software malfunction.  Second, a malicious party can use it to
      gain unauthorized access to a vulnerable system, to destroy or
      alter sensitive data; and in the worst case the user will not
      even notice the harm caused.  Third, exposing a vulnerable
      system often assists attackers to break into other systems that
      could not be compromised otherwise.  Therefore closing a
      vulnerability alone is not enough: notify the audience
      of it in the most clear and comprehensive manner, which
      will allow them to evaluate the danger and take appropriate
      action.</para>
  </sect1>

  <sect1 xml:id="security-fix">
    <title xml:lang="en">Fixing Security Vulnerabilities</title>

    <para xml:lang="en">While on the subject of ports and packages, a security
      vulnerability may initially appear in the original distribution
      or in the port files.  In the former case, the original software
      developer is likely to release a patch or a new version
      instantly.  Update the port promptly
      with respect to the author's fix.  If the fix is delayed for
      some reason, either
      <link linkend="dads-noinstall">mark the port as
      <varname>FORBIDDEN</varname></link> or introduce a patch file
      to the port.  In the case of a vulnerable port, just
      fix the port as soon as possible.  In either case, follow
      <link linkend="port-upgrading">the standard procedure for
      submitting changes</link> unless having
      rights to commit it directly to the ports tree.</para>

    <important>
      <para xml:lang="en">Being a ports committer is not enough to commit to an
	arbitrary port.  Remember that ports usually have maintainers,
	must be respected.</para>
    </important>

    <para xml:lang="en">Please make sure that the port's revision is bumped as soon
      as the vulnerability has been closed.  That is how the users who
      upgrade installed packages on a regular basis will see they need
      to run an update.  Besides, a new package will be built and
      distributed over FTP and WWW mirrors, replacing the vulnerable
      one.  Bump <varname>PORTREVISION</varname> unless
      <varname>PORTVERSION</varname> has changed in the course of
      correcting the vulnerability.  That is, bump
      <varname>PORTREVISION</varname> if adding a patch file
      to the port, but do not bump it if updating the port to
      the latest software version and thus already touched
      <varname>PORTVERSION</varname>.  Please refer to the
      <link linkend="makefile-naming-revepoch">corresponding
	section</link> for more information.</para>
  </sect1>

  <sect1 xml:id="security-notify">
    <title xml:lang="en">Keeping the Community Informed</title>

    <sect2 xml:id="security-notify-vuxml-db">
      <title xml:lang="en">The VuXML Database</title>

      <para xml:lang="en">A very important and urgent step to take as early after a
	security vulnerability is discovered as possible is to notify
	the community of port users about the jeopardy.  Such
	notification serves two purposes.  First, if the danger is
	really severe it will be wise to apply an instant workaround.
	For example, stop the affected network service or even
	deinstall the port completely until the vulnerability is
	closed.  Second, a lot of users tend to upgrade installed
	packages only occasionally.  They will know from the
	notification that they <emphasis>must</emphasis> update the
	package without delay as soon as a corrected version is
	available.</para>

      <para xml:lang="en">Given the huge number of ports in the tree, a security
	advisory cannot be issued on each incident without creating a
	flood and losing the attention of the audience when it comes
	to really serious matters.  Therefore security vulnerabilities
	found in ports are recorded in
	<link xlink:href="http://vuxml.freebsd.org/">the FreeBSD
	  VuXML database</link>.  The Security Officer Team members
	also monitor it for issues requiring their
	intervention.</para>

      <para xml:lang="en">Committers can update the <acronym>VuXML</acronym>
	database themselves, assisting the Security Officer Team and
	delivering crucial information to the community more quickly.
	Those who are not committers or have discovered an
	exceptionally severe vulnerability should not hesitate to
	contact the Security Officer Team directly, as described on
	the <link xlink:href="http://www.freebsd.org/security/#how">FreeBSD
	  Security Information</link> page.</para>

      <para xml:lang="en">The VuXML database is an <acronym>XML</acronym> document.
	Its source file <filename>vuln.xml</filename> is kept right
	inside the port <package role="port">security/vuxml</package>.
	Therefore the file's full pathname will be
	<filename>PORTSDIR/security/vuxml/vuln.xml</filename>.  Each
	time a security vulnerability is discovered in a port, please
	add an entry for it to that file.  Until familiar with
	VuXML, the best thing to do is to find an existing entry
	fitting the case at hand, then copy it and use it as a
	template.</para>
    </sect2>

    <sect2 xml:id="security-notify-vuxml-intro">
      <title xml:lang="en">A Short Introduction to VuXML</title>

      <para xml:lang="en">The full-blown <acronym>XML</acronym> format is complex,
	and far beyond the scope of this book.  However, to gain basic
	insight on the structure of a VuXML entry only the notion of
	tags is needed.  XML tag names are enclosed in angle brackets.
	Each opening &lt;tag&gt; must have a matching closing
	&lt;/tag&gt;.  Tags may be nested.  If nesting, the inner tags
	must be closed before the outer ones.  There is a hierarchy of
	tags, that is, more complex rules of nesting them.  This is
	similar to HTML.  The major difference is that XML is
	e<emphasis>X</emphasis>tensible, that is, based on defining
	custom tags.  Due to its intrinsic structure XML puts
	otherwise amorphous data into shape.  VuXML is particularly
	tailored to mark up descriptions of security
	vulnerabilities.</para>

      <para xml:lang="en">Now consider a realistic VuXML entry:</para>

      <programlisting xml:lang="en">&lt;vuln vid="f4bc80f4-da62-11d8-90ea-0004ac98a7b9"&gt; <co xml:id="co-vx-vid"/>
  &lt;topic&gt;Several vulnerabilities found in Foo&lt;/topic&gt; <co xml:id="co-vx-top"/>
  &lt;affects&gt;
    &lt;package&gt;
      &lt;name&gt;foo&lt;/name&gt; <co xml:id="co-vx-nam"/>
      &lt;name&gt;foo-devel&lt;/name&gt;
      &lt;name&gt;ja-foo&lt;/name&gt;
      &lt;range&gt;&lt;ge&gt;1.6&lt;/ge&gt;&lt;lt&gt;1.9&lt;/lt&gt;&lt;/range&gt; <co xml:id="co-vx-rng"/>
      &lt;range&gt;&lt;ge&gt;2.*&lt;/ge&gt;&lt;lt&gt;2.4_1&lt;/lt&gt;&lt;/range&gt;
      &lt;range&gt;&lt;eq&gt;3.0b1&lt;/eq&gt;&lt;/range&gt;
    &lt;/package&gt;
    &lt;package&gt;
      &lt;name&gt;openfoo&lt;/name&gt; <co xml:id="co-vx-nm2"/>
      &lt;range&gt;&lt;lt&gt;1.10_7&lt;/lt&gt;&lt;/range&gt; <co xml:id="co-vx-epo"/>
      &lt;range&gt;&lt;ge&gt;1.2,1&lt;/ge&gt;&lt;lt&gt;1.3_1,1&lt;/lt&gt;&lt;/range&gt;
    &lt;/package&gt;
  &lt;/affects&gt;
  &lt;description&gt;
    &lt;body xmlns="http://www.w3.org/1999/xhtml"&gt;
      &lt;p&gt;J. Random Hacker reports:&lt;/p&gt; <co xml:id="co-vx-bdy"/>
      &lt;blockquote
        cite="http://j.r.hacker.com/advisories/1"&gt;
        &lt;p&gt;Several issues in the Foo software may be exploited
          via carefully crafted QUUX requests.  These requests will
          permit the injection of Bar code, mumble theft, and the
          readability of the Foo administrator account.&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/body&gt;
  &lt;/description&gt;
  &lt;references&gt; <co xml:id="co-vx-ref"/>
    &lt;freebsdsa&gt;SA-10:75.foo&lt;/freebsdsa&gt; <co xml:id="co-vx-fsa"/>
    &lt;freebsdpr&gt;ports/987654&lt;/freebsdpr&gt; <co xml:id="co-vx-fpr"/>
    &lt;cvename&gt;CAN-2010-0201&lt;/cvename&gt; <co xml:id="co-vx-cve"/>
    &lt;cvename&gt;CAN-2010-0466&lt;/cvename&gt;
    &lt;bid&gt;96298&lt;/bid&gt; <co xml:id="co-vx-bid"/>
    &lt;certsa&gt;CA-2010-99&lt;/certsa&gt; <co xml:id="co-vx-cts"/>
    &lt;certvu&gt;740169&lt;/certvu&gt; <co xml:id="co-vx-ctv"/>
    &lt;uscertsa&gt;SA10-99A&lt;/uscertsa&gt; <co xml:id="co-vx-ucs"/>
    &lt;uscertta&gt;SA10-99A&lt;/uscertta&gt; <co xml:id="co-vx-uct"/>
    &lt;mlist msgid="201075606@hacker.com"&gt;http://marc.theaimsgroup.com/?l=bugtraq&amp;amp;m=203886607825605&lt;/mlist&gt; <co xml:id="co-vx-mls"/>
    &lt;url&gt;http://j.r.hacker.com/advisories/1&lt;/url&gt; <co xml:id="co-vx-url"/>
  &lt;/references&gt;
  &lt;dates&gt;
    &lt;discovery&gt;2010-05-25&lt;/discovery&gt; <co xml:id="co-vx-dsc"/>
    &lt;entry&gt;2010-07-13&lt;/entry&gt; <co xml:id="co-vx-ent"/>
    &lt;modified&gt;2010-09-17&lt;/modified&gt; <co xml:id="co-vx-mod"/>
  &lt;/dates&gt;
&lt;/vuln&gt;</programlisting>

      <para xml:lang="en">The tag names are supposed to be self-explanatory so we
	shall take a closer look only at fields which needs to be
	filled in:</para>

      <calloutlist>
	<callout arearefs="co-vx-vid">
	  <para xml:lang="en">This is the top-level tag of a VuXML entry.  It has a
	    mandatory attribute, <literal>vid</literal>, specifying a
	    universally unique identifier (UUID) for this entry (in
	    quotes).  Generate a UUID for each new VuXML
	    entry (and do not forget to substitute it for the template
	    UUID unless writing the entry from scratch).
	    use <citerefentry><refentrytitle>uuidgen</refentrytitle><manvolnum>1</manvolnum></citerefentry> to generate a VuXML UUID.</para>
	</callout>

	<callout arearefs="co-vx-top">
	  <para xml:lang="en">This is a one-line description of the issue
	    found.</para>
	</callout>

	<callout arearefs="co-vx-nam">
	  <para xml:lang="en">The names of packages affected are listed there.
	    Multiple names can be given since several packages may be
	    based on a single master port or software product.  This
	    may include stable and development branches, localized
	    versions, and slave ports featuring different choices of
	    important build-time configuration options.</para>

	  <important>
	    <para xml:lang="en">It is the submitter's responsibility to find all
	      such related packages when writing a VuXML entry.  Keep
	      in mind that <literal>make search name=foo</literal> is
	      helpful.  The primary points to look for are:</para>

	    <itemizedlist>
	      <listitem>
		<para xml:lang="en">the <filename>foo-devel</filename> variant for a
		  <filename>foo</filename> port;</para>
	      </listitem>

	      <listitem>
		<para xml:lang="en">other variants with a suffix like
		  <literal>-a4</literal> (for print-related packages),
		  <literal>-without-gui</literal> (for packages with X
		  support disabled), or similar;</para>
	      </listitem>

	      <listitem>
		<para xml:lang="en"><literal>jp-</literal>, <literal>ru-</literal>,
		  <literal>zh-</literal>, and other possible localized
		  variants in the corresponding national categories of
		  the ports collection.</para>
	      </listitem>
	    </itemizedlist>
	  </important>
	</callout>

	<callout arearefs="co-vx-rng">
	  <para xml:lang="en">Affected versions of the package(s) are specified
	    there as one or more ranges using a combination of
	    <literal>&lt;lt&gt;</literal>,
	    <literal>&lt;le&gt;</literal>,
	    <literal>&lt;eq&gt;</literal>,
	    <literal>&lt;ge&gt;</literal>, and
	    <literal>&lt;gt&gt;</literal> elements.  Check that the
	    version ranges given do not overlap.</para>

	  <para xml:lang="en">In a range specification, <literal>*</literal>
	    (asterisk) denotes the smallest version number.  In
	    particular, <literal>2.*</literal> is less than
	    <literal>2.a</literal>.  Therefore an asterisk may be used
	    for a range to match all possible
	    <literal>alpha</literal>, <literal>beta</literal>, and
	    <literal>RC</literal> versions.  For instance,
	    <literal>&lt;ge&gt;2.*&lt;/ge&gt;&lt;lt&gt;3.*&lt;/lt&gt;</literal>
	    will selectively match every <literal>2.x</literal>
	    version while
	    <literal>&lt;ge&gt;2.0&lt;/ge&gt;&lt;lt&gt;3.0&lt;/lt&gt;</literal>
	    will not since the latter misses <literal>2.r3</literal>
	    and matches <literal>3.b</literal>.</para>

	  <para xml:lang="en">The above example specifies that affected are versions
	    from <literal>1.6</literal> to <literal>1.9</literal>
	    inclusive, versions <literal>2.x</literal> before
	    <literal>2.4_1</literal>, and version
	    <literal>3.0b1</literal>.</para>
	</callout>

	<callout arearefs="co-vx-nm2">
	  <para xml:lang="en">Several related package groups (essentially, ports)
	    can be listed in the <literal>&lt;affected&gt;</literal>
	    section.  This can be used if several software products
	    (say FooBar, FreeBar and OpenBar) grow from the same code
	    base and still share its bugs and vulnerabilities.  Note
	    the difference from listing multiple names within a single
	    &lt;package&gt; section.</para>
	</callout>

	<callout arearefs="co-vx-epo">
	  <para xml:lang="en">The version ranges have to allow for
	    <varname>PORTEPOCH</varname> and
	    <varname>PORTREVISION</varname> if applicable.  Please
	    remember that according to the collation rules, a version
	    with a non-zero <varname>PORTEPOCH</varname> is greater
	    than any version without <varname>PORTEPOCH</varname>,
	    for example, <literal>3.0,1</literal> is greater than
	    <literal>3.1</literal> or even than
	    <literal>8.9</literal>.</para>
	</callout>

	<callout arearefs="co-vx-bdy">
	  <para xml:lang="en">This is a summary of the issue.  XHTML is used in this
	    field.  At least enclosing <literal>&lt;p&gt;</literal>
	    and <literal>&lt;/p&gt;</literal> has to appear.  More
	    complex mark-up may be used, but only for the sake of
	    accuracy and clarity: No eye candy please.</para>
	</callout>

	<callout arearefs="co-vx-ref">
	  <para xml:lang="en">This section contains references to relevant
	    documents.  As many references as apply are
	    encouraged.</para>
	</callout>

	<callout arearefs="co-vx-fsa">
	  <para xml:lang="en">This is a <link xlink:href="http://www.freebsd.org/security/#adv">FreeBSD
	      security advisory</link>.</para>
	</callout>

	<callout arearefs="co-vx-fpr">
	  <para xml:lang="en">This is a <link xlink:href="http://www.freebsd.org/support.html">FreeBSD
	      problem report</link>.</para>
	</callout>

	<callout arearefs="co-vx-cve">
	  <para xml:lang="en">This is a
	    <link xlink:href="http://www.cve.mitre.org/">MITRE
	      CVE</link> identifier.</para>
	</callout>

	<callout arearefs="co-vx-bid">
	  <para xml:lang="en">This is a <link xlink:href="http://www.securityfocus.com/bid">SecurityFocus
	      Bug ID</link>.</para>
	</callout>

	<callout arearefs="co-vx-cts">
	  <para xml:lang="en">This is a
	    <link xlink:href="http://www.cert.org/">US-CERT</link>
	    security advisory.</para>
	</callout>

	<callout arearefs="co-vx-ctv">
	  <para xml:lang="en">This is a
	    <link xlink:href="http://www.cert.org/">US-CERT</link>
	    vulnerability note.</para>
	</callout>

	<callout arearefs="co-vx-ucs">
	  <para xml:lang="en">This is a
	    <link xlink:href="http://www.cert.org/">US-CERT</link>
	    Cyber Security Alert.</para>
	</callout>

	<callout arearefs="co-vx-uct">
	  <para xml:lang="en">This is a
	    <link xlink:href="http://www.cert.org/">US-CERT</link>
	    Technical Cyber Security Alert.</para>
	</callout>

	<callout arearefs="co-vx-mls">
	  <para xml:lang="en">This is a URL to an archived posting in a mailing
	    list.  The attribute <literal>msgid</literal> is optional
	    and may specify the message ID of the posting.</para>
	</callout>

	<callout arearefs="co-vx-url">
	  <para xml:lang="en">This is a generic URL.  Only it if none
	    of the other reference categories apply.</para>
	</callout>

	<callout arearefs="co-vx-dsc">
	  <para xml:lang="en">This is the date when the issue was disclosed
	    (<replaceable>YYYY-MM-DD</replaceable>).</para>
	</callout>

	<callout arearefs="co-vx-ent">
	  <para xml:lang="en">This is the date when the entry was added
	    (<replaceable>YYYY-MM-DD</replaceable>).</para>
	</callout>

	<callout arearefs="co-vx-mod">
	  <para xml:lang="en">This is the date when any information in the entry was
	    last modified (<replaceable>YYYY-MM-DD</replaceable>).
	    New entries must not include this field.  Add it when
	    editing an existing entry.</para>
	</callout>
      </calloutlist>
    </sect2>

    <sect2 xml:id="security-notify-vuxml-testing">
      <title xml:lang="en">Testing Changes to the VuXML Database</title>

      <para xml:lang="en">This example describes a new entry for a vulnerability in
	the package <literal>dropbear</literal> that has been fixed in
	version <literal>dropbear-2013.59</literal>.</para>

      <para xml:lang="en">As a prerequisite, install a fresh version of
	<package role="port">security/vuxml</package> port.</para>

      <para xml:lang="en">First, check whether there already is an entry for this
	vulnerability.  If there were such an entry, it would match
	the previous version of the package,
	<literal>2013.58</literal>:</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>pkg audit dropbear-2013.58</userinput></screen>

      <para xml:lang="en">If there is none found, add a
	new entry for this vulnerability.</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>cd ${PORTSDIR}/security/vuxml</userinput>
<prompt>%</prompt> <userinput>make newentry</userinput></screen>

      <para xml:lang="en">Verify its syntax and formatting:</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>make validate</userinput></screen>

      <note>
	<para xml:lang="en">At least one of these packages needs to be installed:
	  <package role="port">textproc/libxml2</package>,
	  <package role="port">textproc/jade</package>.</para>
      </note>

      <para xml:lang="en">Verify that the <literal>&lt;affected&gt;</literal>
	section of the entry will match the correct packages:</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>pkg audit -f ${PORTSDIR}/security/vuxml/vuln.xml dropbear-2013.58</userinput></screen>

      <para xml:lang="en">Make sure that the entry produces no spurious matches in
	the output.</para>

      <para xml:lang="en">Now check whether the right package versions are matched
	by the entry:</para>

      <screen xml:lang="en"><prompt>%</prompt> <userinput>pkg audit -f ${PORTSDIR}/security/vuxml/vuln.xml dropbear-2013.58 dropbear-2013.59</userinput>
dropbear-2012.58 is vulnerable:
dropbear -- exposure of sensitive information, DoS
CVE: CVE-2013-4434
CVE: CVE-2013-4421
WWW: http://portaudit.FreeBSD.org/8c9b48d1-3715-11e3-a624-00262d8b701d.html

1 problem(s) in the installed packages found.</screen>

      <para xml:lang="en">The former version matches while the latter one
	does not.</para>
    </sect2>
  </sect1>
</chapter>

  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->

<chapter version="5.0" xml:id="porting-dads">

  <title xml:lang="en">Dos and Don'ts</title>

  <sect1 xml:id="dads-intro">
    <title>楔子</title>

    <para xml:lang="en">Here is a list of common dos and don'ts that are encountered
      during the porting process.  Check the port against this list,
      but also check ports in the <link xlink:href="https://bugs.FreeBSD.org/search/">PR
	database</link> that others have submitted.  Submit any
      comments on ports as described in <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/articles/contributing/contrib-how.html#CONTRIB-GENERAL">Bug
	Reports and General Commentary</link>.  Checking ports in the
      PR database will both make it faster for us to commit them, and
      prove that you know what you are doing.</para>
  </sect1>

  <sect1 xml:id="porting-wrkdir">
    <title xml:lang="en"><varname>WRKDIR</varname></title>

    <para xml:lang="en">Do not write anything to files outside
      <varname>WRKDIR</varname>.  <varname>WRKDIR</varname> is the
      only place that is guaranteed to be writable during the port
      build (see <link xlink:href="@@URL_RELPREFIX@@/doc/en_US.ISO8859-1/books/handbook/ports-using.html#PORTS-CD">
	installing ports from a CDROM</link> for an example of
      building ports from a read-only tree).  The
      <filename>pkg-<replaceable>*</replaceable></filename> files can
      be modified by <link linkend="pkg-names">redefining a
	variable</link> rather than overwriting the file.</para>
  </sect1>

  <sect1 xml:id="porting-wrkdirprefix">
    <title xml:lang="en"><varname>WRKDIRPREFIX</varname></title>

    <para xml:lang="en">Make sure the port honors <varname>WRKDIRPREFIX</varname>.
      Most ports do not have to worry about this.  In particular, when
      referring to a <varname>WRKDIR</varname> of another
      port, note that the correct location is
      <filename>WRKDIRPREFIXPORTSDIR/<replaceable>subdir</replaceable>/<replaceable>name</replaceable>/work</filename>
      not
      <filename>PORTSDIR/<replaceable>subdir</replaceable>/<replaceable>name</replaceable>/work</filename>
      or
      <filename>.CURDIR/../../<replaceable>subdir</replaceable>/<replaceable>name</replaceable>/work</filename>
      or some such.</para>

    <para xml:lang="en">Also, if defining <varname>WRKDIR</varname>,
      make sure to prepend
      <literal>${WRKDIRPREFIX}${.CURDIR}</literal> in
      the front.</para>
  </sect1>

  <sect1 xml:id="porting-versions">
    <title xml:lang="en">Differentiating Operating Systems and OS Versions</title>

    <para xml:lang="en">Some code needs modifications or
      conditional compilation based upon what version of FreeBSD Unix it
      is running under.  The preferred way to tell FreeBSD versions apart
      are the <literal>__FreeBSD_version</literal> and
      <literal>__FreeBSD__</literal> macros defined in <link xlink:href="http://svnweb.freebsd.org/base/head/sys/sys/param.h?view=markup">sys/param.h</link>.
      If this file is not included add the code,</para>

      <programlisting xml:lang="en">#include &lt;sys/param.h&gt;</programlisting>

      <para xml:lang="en">to the proper place in the <filename>.c</filename>
	file.</para>

      <para xml:lang="en"><literal>__FreeBSD__</literal> is defined in all versions
	of FreeBSD as their major version number.  For example, in FreeBSD
	9.x, <literal>__FreeBSD__</literal> is defined to be
	<literal>9</literal>.</para>

      <programlisting xml:lang="en">#if __FreeBSD__ &gt;= 9
#  if __FreeBSD_version &gt;= 901000
	 /* 9.1+ release specific code here */
#  endif
#endif</programlisting>

      <para xml:lang="en">A complete list of <literal>__FreeBSD_version</literal>
	values is available in <xref linkend="versions"/>.</para>
  </sect1>

  <sect1 xml:id="dads-after-port-mk">
    <title xml:lang="en">Writing Something After
      <filename>bsd.port.mk</filename></title>

    <para xml:lang="en">Do not write anything after the
      <literal>.include &lt;bsd.port.mk&gt;</literal> line.  It
      usually can be avoided by including
      <filename>bsd.port.pre.mk</filename> somewhere in the middle of
      the <filename>Makefile</filename> and
      <filename>bsd.port.post.mk</filename> at the end.</para>

    <important>
      <para xml:lang="en">Include either the
	<filename>bsd.port.pre.mk</filename>/<filename>bsd.port.post.mk</filename>
	pair or <filename>bsd.port.mk</filename> only; do not mix
	these two usages.</para>
    </important>

    <para xml:lang="en"><filename>bsd.port.pre.mk</filename> only defines a few
      variables, which can be used in tests in the
      <filename>Makefile</filename>,
      <filename>bsd.port.post.mk</filename> defines the rest.</para>

    <para xml:lang="en">Here are some important variables defined in
      <filename>bsd.port.pre.mk</filename> (this is not the complete
      list, please read <filename>bsd.port.mk</filename> for the
      complete list).</para>

    <informaltable frame="none" pgwide="0">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry xml:lang="en">Variable</entry>
	    <entry>描述</entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry xml:lang="en"><varname>ARCH</varname></entry>
	    <entry xml:lang="en">The architecture as returned by
	      <command>uname -m</command> (for example,
	      <literal>i386</literal>)</entry>
	  </row>

	  <row>
	    <entry xml:lang="en"><varname>OPSYS</varname></entry>
	    <entry xml:lang="en">The operating system type, as returned by
	      <command>uname -s</command> (for example,
	      <literal>FreeBSD</literal>)</entry>
	  </row>

	  <row>
	    <entry xml:lang="en"><varname>OSREL</varname></entry>
	    <entry xml:lang="en">The release version of the operating system
	      (for example, <literal>2.1.5</literal> or
	      <literal>2.2.7</literal>)</entry>
	  </row>

	  <row>
	    <entry xml:lang="en"><varname>OSVERSION</varname></entry>
	    <entry xml:lang="en">The numeric version of the operating system; the
	      same as <link linkend="versions"><literal>__FreeBSD_version</literal></link>.</entry>
	  </row>

	  <row>
	    <entry xml:lang="en"><varname>LOCALBASE</varname></entry>
	    <entry xml:lang="en">The base of the <quote>local</quote> tree (for
	      example, <literal>/usr/local</literal>)</entry>
	  </row>

	  <row>
	    <entry xml:lang="en"><varname>PREFIX</varname></entry>

	    <entry xml:lang="en">Where the port installs itself (see
	      <link linkend="porting-prefix">more on
		<varname>PREFIX</varname></link>).</entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>

    <note>
      <para xml:lang="en">When <varname>MASTERDIR</varname> is needed, always define
	it before including
	<filename>bsd.port.pre.mk</filename>.</para>
    </note>

    <para xml:lang="en">Here are some examples of things that can be added after
      <filename>bsd.port.pre.mk</filename>:</para>

    <programlisting xml:lang="en"># no need to compile lang/perl5 if perl5 is already in system
.if ${OSVERSION} &gt; 300003
BROKEN=	perl is in system
.endif</programlisting>

    <para xml:lang="en">Always use tab instead of spaces after
      <literal>BROKEN=</literal>.</para>
  </sect1>

  <sect1 xml:id="dads-sh-exec">
    <title>在 Wrapper Scripts 中使用 <function>exec</function>　敘述句</title>

    <para>若某 port 為了執行其他程式而安裝了一個 shell script， 而該程式同時也是該 script 最後一個動作，那麼需要確定該 script 是用 <function>exec</function> 敘述句（statement），例如：</para>

    <programlisting>#!/bin/sh
exec %%LOCALBASE%%/bin/java -jar %%DATADIR%%/foo.jar "$@"</programlisting>

    <para><function>exec</function>　敘述句以所指定的程式取代了該 shell 的程序。 若省略 <function>exec</function> ，那麼該 shell 程序 將會在程式執行中一直存在於記憶體，這無疑地浪費了系統資源。</para>
  </sect1>

  <sect1 xml:id="dads-rational">
    <title xml:lang="en">Do Things Rationally</title>

    <para xml:lang="en">The <filename>Makefile</filename> should do things in a
      simple and reasonable manner.  Making it a couple of lines
      shorter or more readable is always better.  Examples include
      using a make <literal>.if</literal> construct instead of a shell
      <literal>if</literal> construct, not redefining
      <buildtarget xml:lang="en">do-extract</buildtarget> if redefining
      <varname>EXTRACT*</varname> is enough, and using
      <varname>GNU_CONFIGURE</varname> instead of
      <literal>CONFIGURE_ARGS
	+= --prefix=${PREFIX}</literal>.</para>

    <para xml:lang="en">If a lot of new code is needed to do something, there may
      already be an implementation of it in
      <filename>bsd.port.mk</filename>.  While hard to read, there are
      a great many seemingly-hard problems for which
      <filename>bsd.port.mk</filename> already provides a shorthand
      solution.</para>
  </sect1>

  <sect1 xml:id="dads-cc">
    <title xml:lang="en">Respect Both <varname>CC</varname> and
      <varname>CXX</varname></title>

    <para xml:lang="en">The port must respect both <varname>CC</varname> and
      <varname>CXX</varname>.  What we mean by this is that
      the port must not set the values of these variables absolutely,
      overriding existing values; instead, it may append whatever
      values it needs to the existing values.  This is so that build
      options that affect all ports can be set globally.</para>

    <para xml:lang="en">If the port does not respect these variables,
      please add
      <literal>NO_PACKAGE=ignores either cc or cxx</literal> to the
      <filename>Makefile</filename>.</para>

    <para xml:lang="en">Here is an example of a <filename>Makefile</filename>
      respecting both <varname>CC</varname> and
      <varname>CXX</varname>.  Note the <literal>?=</literal>:</para>

    <programlisting xml:lang="en">CC?= gcc</programlisting>

    <programlisting xml:lang="en">CXX?= g++</programlisting>

    <para xml:lang="en">Here is an example which respects neither
      <varname>CC</varname> nor <varname>CXX</varname>:</para>

    <programlisting xml:lang="en">CC= gcc</programlisting>

    <programlisting xml:lang="en">CXX= g++</programlisting>

    <para xml:lang="en">Both <varname>CC</varname> and <varname>CXX</varname>
      can be defined on FreeBSD systems in
      <filename>/etc/make.conf</filename>.  The first example defines
      a value if it was not previously set in
      <filename>/etc/make.conf</filename>, preserving any system-wide
      definitions.  The second example clobbers anything previously
      defined.</para>
  </sect1>

  <sect1 xml:id="dads-cflags">
    <title xml:lang="en">Respect <varname>CFLAGS</varname></title>

    <para xml:lang="en">The port must respect <varname>CFLAGS</varname>.
      What we mean by this is that the port must not set
      the value of this variable absolutely, overriding the existing
      value.  Instead, it may append whatever values it needs to the
      existing value.  This is so that build options that affect all
      ports can be set globally.</para>

    <para xml:lang="en">If it does not, please add
      <literal>NO_PACKAGE=ignores cflags</literal> to the
      <filename>Makefile</filename>.</para>

    <para xml:lang="en">Here is an example of a <filename>Makefile</filename>
      respecting <varname>CFLAGS</varname>.  Note the
      <literal>+=</literal>:</para>

    <programlisting xml:lang="en">CFLAGS+= -Wall -Werror</programlisting>

    <para xml:lang="en">Here is an example which does not respect
      <varname>CFLAGS</varname>:</para>

    <programlisting xml:lang="en">CFLAGS= -Wall -Werror</programlisting>

    <para xml:lang="en"><varname>CFLAGS</varname> is defined on
      FreeBSD systems in <filename>/etc/make.conf</filename>.  The first
      example appends additional flags to
      <varname>CFLAGS</varname>, preserving any system-wide
      definitions.  The second example clobbers anything previously
      defined.</para>

    <para xml:lang="en">Remove optimization flags from the third party
      <filename>Makefile</filename>s.  The system
      <varname>CFLAGS</varname> contains system-wide optimization
      flags.  An example from an unmodified
      <filename>Makefile</filename>:</para>

    <programlisting xml:lang="en">CFLAGS= -O3 -funroll-loops -DHAVE_SOUND</programlisting>

    <para xml:lang="en">Using system optimization flags, the
      <filename>Makefile</filename> would look similar to this
      example:</para>

    <programlisting xml:lang="en">CFLAGS+= -DHAVE_SOUND</programlisting>
  </sect1>

  <sect1 xml:id="dads-feedback">
    <title xml:lang="en">Feedback</title>

    <para xml:lang="en">Do send applicable changes and patches to the upstream
      maintainer for inclusion in the next release of the code.
      This makes updating to the next release that much easier.</para>
  </sect1>

  <sect1 xml:id="dads-readme">
    <title xml:lang="en"><filename>README.html</filename></title>

    <para xml:lang="en"><filename>README.html</filename> is not part of the port,
      but generated by <command>make readme</command>.  Do not
      include this file in patches or commits.</para>

    <note>
      <para xml:lang="en">If <command>make readme</command> fails, make sure that
	the default value of <varname>ECHO_MSG</varname> has not
	been modified by the port.</para>
    </note>
  </sect1>

  <sect1 xml:id="dads-arch-neutral">
    <title xml:lang="en">Marking a Port as Architecture Neutral</title>

    <para xml:lang="en">Ports that do not have any architecture-dependent files
      or requirements are identified by setting
      <literal>NO_ARCH=yes</literal>.</para>
  </sect1>

  <sect1 xml:id="dads-noinstall">
    <title xml:lang="en">Marking a Port Not Installable with
      <varname>BROKEN</varname>, <varname>FORBIDDEN</varname>, or
      <varname>IGNORE</varname></title>

    <para xml:lang="en">In certain cases, users must be prevented from installing
      a port.  There are several variables that can be used in a
      port's <filename>Makefile</filename> to tell the user that the
      port cannot be installed.  The value of
      these make variables will be the
      reason that is shown to users for why the port refuses to
      install itself.  Please use the correct make
      variable.  Each variable conveys radically different
      meanings, both to users and to automated systems that depend on
      <filename>Makefile</filename>s, such as
      <link linkend="build-cluster">the ports build cluster</link>,
      <link linkend="freshports">FreshPorts</link>, and
      <link linkend="portsmon">portsmon</link>.</para>

    <sect2 xml:id="dads-noinstall-variables">
      <title>變數</title>

      <itemizedlist>
	<listitem>
	  <para xml:lang="en"><varname>BROKEN</varname> is reserved for ports that
	    currently do not compile, install, deinstall, or run
	    correctly.  Use it for ports where the problem
	    is believed to be temporary.</para>

	  <para xml:lang="en">If instructed, the build cluster will still attempt
	    to try to build them to see if the underlying problem has
	    been resolved.  (However, in general, the cluster is run
	    without this.)</para>

	  <para xml:lang="en">For instance, use <varname>BROKEN</varname> when a
	    port:</para>

	  <itemizedlist>
	    <listitem>
	      <para xml:lang="en">does not compile</para>
	    </listitem>

	    <listitem>
	      <para xml:lang="en">fails its configuration or installation
		process</para>
	    </listitem>

	    <listitem>
	      <para xml:lang="en">installs files outside of
		<filename>${PREFIX}</filename></para>
	    </listitem>

	    <listitem>
	      <para xml:lang="en">does not remove all its files cleanly upon
		deinstall (however, it may be acceptable, and
		desirable, for the port to leave user-modified files
		behind)</para>
	    </listitem>

	    <listitem>
	      <para xml:lang="en">has runtime issues on systems where it is
		supposed to run fine.</para>
	    </listitem>
	  </itemizedlist>
	</listitem>

	<listitem>
	  <para xml:lang="en"><varname>FORBIDDEN</varname> is used for ports that
	    contain a security vulnerability or induce grave concern
	    regarding the security of a FreeBSD system with a given port
	    installed (for example, a reputably insecure program or a
	    program that provides easily exploitable services).  Mark
	    ports as <varname>FORBIDDEN</varname> as soon as a
	    particular piece of software has a vulnerability and there
	    is no released upgrade.  Ideally upgrade ports as soon as
	    possible when a security vulnerability is discovered so as
	    to reduce the number of vulnerable FreeBSD hosts (we like
	    being known for being secure), however sometimes there is
	    a noticeable time gap between disclosure of a
	    vulnerability and an updated release of the vulnerable
	    software.  Do not mark a port <varname>FORBIDDEN</varname>
	    for any reason other than security.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en"><varname>IGNORE</varname> is reserved for ports that
	    must not be built for some other reason.  Use it
	    for ports where the problem is believed to be
	    structural.  The build cluster will not, under any
	    circumstances, build ports marked as
	    <varname>IGNORE</varname>.  For instance, use
	    <varname>IGNORE</varname> when a port:</para>

	  <itemizedlist>
	    <listitem>
	      <para xml:lang="en">does not work on the installed version of
		FreeBSD</para>
	    </listitem>

	    <listitem>
	      <para xml:lang="en">has a distfile which may not be automatically
		fetched due to licensing restrictions</para>
	    </listitem>

	    <listitem>
	      <para xml:lang="en">does not work with some other currently
		installed port (for instance, the port depends on
		<package role="port">www/apache20</package> but
		<package role="port">www/apache22</package> is
		installed)</para>
	    </listitem>
	  </itemizedlist>

	  <note>
	    <para xml:lang="en">If a port would conflict with a currently
	      installed port (for example, if they install a file in
	      the same place that performs a different function),
	      <link linkend="conflicts">use
		<varname>CONFLICTS</varname> instead</link>.
	      <varname>CONFLICTS</varname> will set
	      <varname>IGNORE</varname> by itself.</para>
	  </note>
	</listitem>

	<listitem>
	  <para xml:lang="en">To mark a port as <varname>IGNORE</varname>d
	    only on certain architectures, there are two other
	    convenience variables that will automatically set
	    <varname>IGNORE</varname>:
	    <varname>ONLY_FOR_ARCHS</varname> and
	    <varname>NOT_FOR_ARCHS</varname>.  Examples:</para>

	  <programlisting xml:lang="en">ONLY_FOR_ARCHS=	i386 amd64</programlisting>

	  <programlisting xml:lang="en">NOT_FOR_ARCHS=	ia64 sparc64</programlisting>

	  <para xml:lang="en">A custom <varname>IGNORE</varname> message can be
	    set using <varname>ONLY_FOR_ARCHS_REASON</varname> and
	    <varname>NOT_FOR_ARCHS_REASON</varname>.  Per
	    architecture entries are possible with
	    <varname>ONLY_FOR_ARCHS_REASON_<replaceable>ARCH</replaceable></varname>
	    and
	    <varname>NOT_FOR_ARCHS_REASON_<replaceable>ARCH</replaceable></varname>.</para>
	</listitem>

	<listitem>
	  <para xml:lang="en">If a port fetches i386 binaries and installs them,
	    set <varname>IA32_BINARY_PORT</varname>.  If this variable
	    is set, <filename>/usr/lib32</filename> must be present
	    for IA32 versions of libraries and the kernel must support
	    IA32 compatibility.  If one of these two
	    dependencies is not satisfied, <varname>IGNORE</varname>
	    will be set automatically.</para>
	</listitem>
      </itemizedlist>
    </sect2>

    <sect2 xml:id="dads-noinstall-notes">
      <title xml:lang="en">Implementation Notes</title>

      <para xml:lang="en">Do not quote the values of <varname>BROKEN</varname>,
	<varname>IGNORE</varname>, and related variables.  Due to the
	way the information is shown to the user, the wording of
	messages for each variable differ:</para>

      <programlisting xml:lang="en">BROKEN=	fails to link with base -lcrypto</programlisting>

      <programlisting xml:lang="en">IGNORE=	unsupported on recent versions</programlisting>

      <para xml:lang="en">resulting in this output from
	<command>make describe</command>:</para>

      <programlisting xml:lang="en">===&gt;  foobar-0.1 is marked as broken: fails to link with base -lcrypto.</programlisting>

      <programlisting xml:lang="en">===&gt;  foobar-0.1 is unsupported on recent versions.</programlisting>
    </sect2>
  </sect1>

  <sect1 xml:id="dads-deprecated">
    <title xml:lang="en">Marking a Port for Removal with
      <varname>DEPRECATED</varname> or
      <varname>EXPIRATION_DATE</varname></title>

    <para xml:lang="en">Do remember that <varname>BROKEN</varname> and
      <varname>FORBIDDEN</varname> are to be used as a temporary
      resort if a port is not working.  Permanently broken ports
      will be removed from the tree entirely.</para>

    <para xml:lang="en">When it makes sense to do so, users can be warned about
      a pending port removal with <varname>DEPRECATED</varname> and
      <varname>EXPIRATION_DATE</varname>.  The former is a
      string stating why the port is scheduled for removal; the latter
      is a string in ISO 8601 format (YYYY-MM-DD).  Both will be shown
      to the user.</para>

    <para xml:lang="en">It is possible to set <varname>DEPRECATED</varname>
      without an <varname>EXPIRATION_DATE</varname> (for instance,
      recommending a newer version of the port), but the converse
      does not make any sense.</para>

    <para xml:lang="en">There is no set policy on how much notice to give.
      Current practice seems to be one month for security-related
      issues and two months for build issues.  This also gives any
      interested committers a little time to fix the problems.</para>
  </sect1>

  <sect1 xml:id="dads-dot-error">
    <title xml:lang="en">Avoid Use of the <literal>.error</literal>
      Construct</title>

    <para xml:lang="en">The correct way for a <filename>Makefile</filename> to
      signal that the port cannot be installed due to some external
      factor (for instance, the user has specified an illegal
      combination of build options) is to set a non-blank value to
      <varname>IGNORE</varname>.  This value will be formatted and
      shown to the user by <command>make install</command>.</para>

    <para xml:lang="en">It is a common mistake to use <literal>.error</literal>
      for this purpose.  The problem with this is that many automated
      tools that work with the ports tree will fail in this situation.
      The most common occurrence of this is seen when trying to build
      <filename>/usr/ports/INDEX</filename> (see
      <xref linkend="make-describe"/>).  However, even more trivial
      commands such as <command>make maintainer</command> also fail in
      this scenario.  This is not acceptable.</para>

    <example xml:id="dot-error-breaks-index">
      <title xml:lang="en">How to Avoid Using <literal>.error</literal></title>

      <para xml:lang="en">The first of the
	next two <filename>Makefile</filename> snippets will cause
	<command>make index</command> to fail, while the second one
	will not:</para>

      <programlisting xml:lang="en">.error "option is not supported"</programlisting>

      <programlisting xml:lang="en">IGNORE=option is not supported</programlisting>
    </example>
  </sect1>

  <sect1 xml:id="dads-sysctl">
    <title><filename>sysctl</filename>　的使用</title>

    <para><filename>sysctl</filename>　除了在 targets 之外，都不鼓勵使用。 這是因為任何 <literal>makevar</literal> 的評估都有可能會使得程序執行速度變慢，例如在 <command>make index</command> 的過程中，就會需要用到 <filename>sysctl</filename>。</para>

    <para>若要使用  <citerefentry><refentrytitle>sysctl</refentrytitle><manvolnum>8</manvolnum></citerefentry> 則必須透過 <varname>SYSCTL</varname> 此一變數才可，因為這樣才會包含完整路徑， 同時也可以隨時因應使用者需求而替換為其他路徑。</para>
  </sect1>

  <sect1 xml:id="dads-rerolling-distfiles">
    <title xml:lang="en">Rerolling Distfiles</title>

    <para xml:lang="en">Sometimes the authors of software change the content of
      released distfiles without changing the file's name.
      Verify that the changes are official and have been performed
      by the author.  It has happened in the past that the distfile
      was silently altered on the download servers with the intent to
      cause harm or compromise end user security.</para>

    <para xml:lang="en">Put the old distfile aside, download the new one, unpack
      them and compare the content with <citerefentry><refentrytitle>diff</refentrytitle><manvolnum>1</manvolnum></citerefentry>.  If there is
      nothing suspicious, update
      <filename>distinfo</filename>.  Be sure to summarize the
      differences in the PR or commit log, so that other people know
      that nothing bad has
      happened.</para>

    <para xml:lang="en">Contact the authors of the software
      and confirm the changes with them.</para>
  </sect1>

  <sect1 xml:id="dads-avoiding-linuxisms">
    <title xml:lang="en">Avoiding Linuxisms</title>

    <para xml:lang="en">Do not use <filename>/proc</filename> if there are any
      other ways of getting the information.  For example,
      <function>setprogname(argv[0])</function> in
      <function>main()</function> and then <citerefentry><refentrytitle>getprogname</refentrytitle><manvolnum>3</manvolnum></citerefentry>
      to know the executable name&gt;.</para>

    <para xml:lang="en">Do not rely on behavior that is undocumented by
      <acronym>POSIX</acronym>.</para>

    <para xml:lang="en">Do not record timestamps in the critical path of the
      application if it also works without.  Getting timestamps may be
      slow, depending on the accuracy of timestamps in the
      <acronym>OS</acronym>.  If timestamps are really needed,
      determine how precise they have to be and use an
      <acronym>API</acronym> which is documented to just deliver the
      needed precision.</para>

    <para xml:lang="en">A number of simple syscalls (for example
      <citerefentry><refentrytitle>gettimeofday</refentrytitle><manvolnum>2</manvolnum></citerefentry>, <citerefentry><refentrytitle>getpid</refentrytitle><manvolnum>2</manvolnum></citerefentry>) are much faster on <trademark class="registered">Linux</trademark>
      than on any other operating system due to caching and the
      vsyscall performance optimizations.  Do not rely on them being
      cheap in performance-critical applications.  In general, try
      hard to avoid syscalls if possible.</para>

    <para xml:lang="en">Do not rely on <trademark class="registered">Linux</trademark>-specific socket behaviour.  In
      particular, default socket buffer sizes are different (call
      <citerefentry><refentrytitle>setsockopt</refentrytitle><manvolnum>2</manvolnum></citerefentry> with <literal>SO_SNDBUF</literal> and
      <literal>SO_RCVBUF</literal>, and while <trademark class="registered">Linux</trademark>'s <citerefentry><refentrytitle>send</refentrytitle><manvolnum>2</manvolnum></citerefentry>
      blocks when the socket buffer is full, FreeBSD's will fail and
      set <literal>ENOBUFS</literal> in errno.</para>

    <para xml:lang="en">If relying on non-standard behaviour is required,
      encapsulate it properly into a generic <acronym>API</acronym>,
      do a check for the behaviour in the configure stage, and stop
      if it is missing.</para>

    <para xml:lang="en">Check the
      <link xlink:href="http://www.freebsd.org/cgi/man.cgi">man
	pages</link> to see if the function used is a
      <acronym>POSIX</acronym> interface (in the
      <quote>STANDARDS</quote> section of the man page).</para>

    <para xml:lang="en">Do not assume that <filename>/bin/sh</filename> is
      <application>bash</application>.  Ensure that a command line
      passed to <citerefentry><refentrytitle>system</refentrytitle><manvolnum>3</manvolnum></citerefentry> will work with a
      <acronym>POSIX</acronym> compliant shell.</para>

    <para xml:lang="en">A list of common <application>bash</application>isms is
      available <link xlink:href="https://wiki.ubuntu.com/DashAsBinSh">here</link>.</para>

    <para xml:lang="en">Check that headers are included in the
      <acronym>POSIX</acronym> or man page recommended way.  For
      example, <filename>sys/types.h</filename> is often forgotten,
      which is not as much of a problem for <trademark class="registered">Linux</trademark> as it is for
      FreeBSD.</para>
  </sect1>

  <sect1 xml:id="dads-misc">
    <title xml:lang="en">Miscellanea</title>

    <para xml:lang="en">Always double-check <filename>pkg-descr</filename> and
      <filename>pkg-plist</filename>.
      If reviewing a port and a better wording can be achieved,
      do so.</para>

    <para xml:lang="en">Do not copy more copies of the GNU General Public License
      into our system, please.</para>

    <para xml:lang="en">Please be careful to note any legal issues! Do not let us
      illegally distribute software!</para>
  </sect1>
</chapter>

  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->

<chapter version="5.0" xml:id="porting-samplem">

  <title xml:lang="en">A Sample <filename>Makefile</filename></title>

  <para xml:lang="en">Here is a sample <filename>Makefile</filename> that can be
    used to create a new port.  Make sure to remove all the extra
    comments (ones between brackets).</para>

  <para xml:lang="en">The format shown is the recommended one for ordering
    variables, empty lines between sections, and so on.  This format is
    designed so that the most important information is easy to locate.
    We recommend using
    <link linkend="porting-portlint">portlint</link> to check the
    <filename>Makefile</filename>.</para>

  <programlisting xml:lang="en">[the header...just to make it easier for us to identify the ports.]
# Created by: Satoshi Asami &lt;asami@FreeBSD.org&gt;
[The optional <emphasis>Created by:</emphasis> line names the person who originally
created the port.  Note that the <quote>:</quote> is followed by a space
and not a tab character.
If this line is present, future maintainers must
not change or remove it except at the original author's request.]

# $FreeBSD$
[ ^^^^^^^^^ This will be automatically replaced with RCS ID string by SVN
when it is committed to our repository.  If upgrading a port, do not alter
this line back to "$FreeBSD$".  SVN deals with it automatically.]

[section to describe the port itself and the master site - PORTNAME
 and PORTVERSION are always first, followed by CATEGORIES,
 and then MASTER_SITES, which can be followed by MASTER_SITE_SUBDIR.
 PKGNAMEPREFIX and PKGNAMESUFFIX, if needed, will be after that.
 Then comes DISTNAME, EXTRACT_SUFX and/or DISTFILES, and then
 EXTRACT_ONLY, as necessary.]
PORTNAME=	xdvi
PORTVERSION=	18.2
CATEGORIES=	print
[do not forget the trailing slash ("/")!
 if not using MASTER_SITE_* macros]
MASTER_SITES=	${MASTER_SITE_XCONTRIB}
MASTER_SITE_SUBDIR=	applications
PKGNAMEPREFIX=	ja-
DISTNAME=	xdvi-pl18
[set this if the source is not in the standard ".tar.gz" form]
EXTRACT_SUFX=	.tar.Z

[section for distributed patches -- can be empty]
PATCH_SITES=	ftp://ftp.sra.co.jp/pub/X11/japanese/
PATCHFILES=	xdvi-18.patch1.gz xdvi-18.patch2.gz

[maintainer; *mandatory*!  This is the person who is volunteering to
 handle port updates, build breakages, and to whom a users can direct
 questions and bug reports.  To keep the quality of the Ports Collection
 as high as possible, we no longer accept new ports that are assigned to
 "ports@FreeBSD.org".]
MAINTAINER=	asami@FreeBSD.org
COMMENT=	DVI Previewer for the X Window System

[dependencies -- can be empty]
RUN_DEPENDS=	gs:${PORTSDIR}/print/ghostscript

[this section is for other standard bsd.port.mk variables that do not
 belong to any of the above]
[If it asks questions during configure, build, install...]
IS_INTERACTIVE=	yes
[If it extracts to a directory other than ${DISTNAME}...]
WRKSRC=		${WRKDIR}/xdvi-new
[If the distributed patches were not made relative to ${WRKSRC},
 this may need to be tweaked]
PATCH_DIST_STRIP=	-p1
[If it requires a "configure" script generated by GNU autoconf to be run]
GNU_CONFIGURE=	yes
[If it requires GNU make, not /usr/bin/make, to build...]
USES= gmake
[If it is an X application and requires "xmkmf -a" to be run...]
USES= imake
[et cetera.]

[non-standard variables to be used in the rules below]
MY_FAVORITE_RESPONSE=	"yeah, right"

[then the special rules, in the order they are called]
pre-fetch:
	i go fetch something, yeah

post-patch:
	i need to do something after patch, great

pre-install:
	and then some more stuff before installing, wow

[and then the epilogue]

.include &lt;bsd.port.mk&gt;</programlisting>
</chapter>

  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->

<chapter version="5.0" xml:id="keeping-up">

  <title xml:lang="en">Keeping Up</title>

  <para xml:lang="en">The FreeBSD Ports Collection is constantly changing.  Here is
    some information on how to keep up.</para>

  <sect1 xml:id="freshports">
    <title xml:lang="en">FreshPorts</title>

    <para xml:lang="en">One of the easiest ways to learn about updates that have
      already been committed is by subscribing to <link xlink:href="http://www.FreshPorts.org/">FreshPorts</link>.
      Multiple ports can be monitored.  Maintainers are
      strongly encouraged to subscribe, because they will receive
      notification of not only their own changes, but also any changes
      that any other FreeBSD committer has made.  (These are often
      necessary to keep up with changes in the underlying ports
      framework—although it would be most polite to receive an
      advance heads-up from those committing such changes, sometimes
      this is overlooked or impractical.  Also, in some
      cases, the changes are very minor in nature.  We expect everyone
      to use their best judgement in these cases.)</para>

    <para xml:lang="en">To use FreshPorts, an account is required.  Those with
      registered email addresses at <literal>@FreeBSD.org</literal>
      will see the opt-in link on the right-hand side of the web
      pages.  Those who already have a FreshPorts account but are not
      using a <literal>@FreeBSD.org</literal> email address can change
      the email to <literal>@FreeBSD.org</literal>, subscribe, then
      change it back again.</para>

    <para xml:lang="en">FreshPorts also has a sanity test feature which
      automatically tests each commit to the FreeBSD ports tree.  If
      subscribed to this service, a committer will receive
      notifications of any errors which FreshPorts detects during
      sanity testing of their commits.</para>
  </sect1>

  <sect1 xml:id="svnweb">
    <title xml:lang="en">The Web Interface to the Source Repository</title>

    <para xml:lang="en">It is possible to browse the files in the source
      repository by using a web interface.  Changes that affect the
      entire port system are now documented in the <link xlink:href="http://svnweb.FreeBSD.org/ports/head/CHANGES">CHANGES</link>
      file.  Changes that affect individual ports are now documented
      in the <link xlink:href="http://svnweb.FreeBSD.org/ports/head/UPDATING">UPDATING</link>
      file.  However, the definitive answer to any question is
      undoubtedly to read the source code of <link xlink:href="http://svnweb.FreeBSD.org/ports/head/Mk/bsd.port.mk">bsd.port.mk</link>,
      and associated files.</para>
  </sect1>

  <sect1 xml:id="ports-mailing-list">
    <title xml:lang="en">The FreeBSD Ports Mailing List</title>

    <para xml:lang="en">As a ports maintainer, consider subscribing to
      <link xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-ports">FreeBSD ports mailing list</link>.  Important changes to the way ports work will be
      announced there, and then committed to
      <filename>CHANGES</filename>.</para>

    <para xml:lang="en">If the volume of messages on this mailing list is too high,
      consider following <link xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-ports-announce">FreeBSD ports announce mailing list</link> which contains only
      announcements.</para>
  </sect1>

  <sect1 xml:id="build-cluster">
    <title xml:lang="en">The FreeBSD Port Building Cluster</title>

    <para xml:lang="en">One of the least-publicized strengths of FreeBSD is that
      an entire cluster of machines is dedicated to continually
      building the Ports Collection, for each of the major OS releases
      and for each Tier-1 architecture.</para>

    <para xml:lang="en">Individual ports are built unless they are specifically
      marked with <varname>IGNORE</varname>.  Ports that are marked
      with <varname>BROKEN</varname> will still be attempted, to see
      if the underlying problem has been resolved.  (This is done by
      passing <varname>TRYBROKEN</varname> to the port's
      <filename>Makefile</filename>.)</para>
  </sect1>

  <sect1 xml:id="distfile-survey">
    <title xml:lang="en">Portscout: the FreeBSD Ports Distfile Scanner</title>

    <para xml:lang="en">The build cluster is dedicated to building the latest
      release of each port with distfiles that have already been
      fetched.  However, as the Internet continually changes,
      distfiles can quickly go missing.  <link xlink:href="http://portscout.FreeBSD.org">Portscout</link>,
      the FreeBSD Ports distfile scanner, attempts to query every
      download site for every port to find out if each distfile is
      still available.  <application>Portscout</application> can
      generate <acronym>HTML</acronym> reports and send emails about
      newly available ports to those who request them.  Unless not
      otherwise subscribed, maintainers are asked to check
      periodically for changes, either by hand or using the
      <acronym>RSS</acronym> feed.</para>

    <para xml:lang="en"><application>Portscout</application>'s first page gives
      the email address of the port maintainer, the number of ports
      the maintainer is responsible for, the number of those ports
      with new distfiles, and the percentage of those ports that are
      out-of-date.  The search function allows for searching by email
      address for a specific maintainer, and for selecting whether
      only out-of-date ports are shown.</para>

    <para xml:lang="en">Upon clicking on a maintainer's email address, a list of
      all of their ports is displayed, along with port category,
      current version number, whether or not there is a new version,
      when the port was last updated, and finally when it was last
      checked.  A search function on this page allows the user to
      search for a specific port.</para>

    <para xml:lang="en">Clicking on a port name in the list displays the <link xlink:href="http://freshports.org">FreshPorts</link> port
      information.</para>
  </sect1>

  <sect1 xml:id="portsmon">
    <title xml:lang="en">The FreeBSD Ports Monitoring System</title>

    <para xml:lang="en">Another handy resource is the <link xlink:href="http://portsmon.FreeBSD.org">FreeBSD Ports
	Monitoring System</link> (also known as
      <literal>portsmon</literal>).  This system comprises a database
      that processes information from several sources and allows it to
      be browsed via a web interface.  Currently, the ports Problem
      Reports (PRs), the error logs from the build cluster, and
      individual files from the ports collection are used.  In the
      future, this will be expanded to include the distfile survey, as
      well as other sources.</para>

    <para xml:lang="en">To get started, use the <link xlink:href="http://portsmon.FreeBSD.org/portoverview.py">Overview
	of One Port</link> search page to find all the information
      about a port.</para>

    <para xml:lang="en">This is the only resource available that
      maps PR entries to portnames.  PR submitters do not
      always include the portname in their Synopsis, although we would
      prefer that they did.  So, <literal>portsmon</literal> is a
      good place to find out whether an existing
      port has any PRs filed against it, any build errors, or
      if a new port the porter is considering
      creating has already been submitted.</para>
  </sect1>
</chapter>

  
<!--
     The FreeBSD Documentation Project

     $FreeBSD$

-->

<!--

  Document up-to date with r398827 revision of the ports tree.

  This file documents the values of the USES make variable.  The
  format is easy to grasp from the already-added entries below (or use
  this scheme below as a skeleton):

<sect1 xml:id="uses-FEATURE">
  <title><literal>FEATURE</literal></title>

  <para>Possible arguments: ARGUMENTS</para>

  <para>DESCRIPTION</para>
</sect1>

-->
<chapter version="5.0" xml:id="uses">

  <title xml:id="uses-values" xml:lang="en">Using <varname>USES</varname>
    Macros</title>

  <sect1 xml:id="uses-intro">
    <title xml:lang="en">An Introduction to <varname>USES</varname></title>

    <para xml:lang="en"><varname>USES</varname> macros make it easy to declare
      requirements and settings for a port.  They can add
      dependencies, change building behavior, add metadata to
      packages, and so on, all by selecting simple, preset
      values..</para>

    <para xml:lang="en">Each section in this chapter describes a possible value for
      <varname>USES</varname>, along with its possible arguments.
      Arguments are appeneded to the value after a colon
      (<literal>:</literal>).  Multiple arguments are separated by
      commas (<literal>,</literal>).</para>

    <example>
      <title xml:lang="en">Using Multiple Values</title>

      <programlisting xml:lang="en">USES=	bison perl</programlisting>
    </example>

    <example>
      <title xml:lang="en">Adding an Argument</title>

      <programlisting xml:lang="en">USES=	gmake:lite</programlisting>
    </example>

    <example>
      <title xml:lang="en">Adding Multiple Arguments</title>

      <programlisting xml:lang="en">USES=	drupal:7,theme</programlisting>
    </example>

    <example>
      <title xml:lang="en">Mixing it All Together</title>

      <programlisting xml:lang="en">USES=	pgsql:9.3+ cpe python:2.7,build</programlisting>
    </example>
  </sect1>

  <sect1 xml:id="uses-ada">
    <title xml:lang="en"><literal>ada</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>47</literal>,
      <literal>49</literal>, <literal>5</literal></para>

    <para xml:lang="en">Depends on an <application>Ada</application>-capable
      compiler, and sets <varname>CC</varname> accordingly.  Defaults
      to a <application>gcc</application> 4.9 based compiler, use
      <literal>:47</literal> to use the older
      <application>gcc</application> 4.7 based one and
      <literal>:5</literal> to use the newer
      <application>gcc</application> 5 based one.</para>
  </sect1>

  <sect1 xml:id="uses-autoreconf">
    <title xml:lang="en"><literal>autoreconf</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>build</literal></para>

    <para xml:lang="en">Runs <command>autoreconf</command>.  It encapsulates the
      <command>aclocal</command>, <command>autoconf</command>,
      <command>autoheader</command>, <command>automake</command>,
      <command>autopoint</command>, and <command>libtoolize</command>
      commands.  Each command applies to
      <filename>${CONFIGURE_WRKSRC}/configure.ac</filename> or its old
      name, <filename>${CONFIGURE_WRKSRC}/configure.in</filename>.  If
      <filename>configure.ac</filename> defines subdirectories with
      their own <filename>configure.ac</filename> using
      <literal>AC_CONFIG_SUBDIRS</literal>,
      <command>autoreconf</command> will recursively update those as
      well.  The <literal>:build</literal> argument only adds build
      time dependencies on those tools but does not run
      <command>autoreconf</command>.</para>
  </sect1>

  <sect1 xml:id="uses-blaslapack">
    <title xml:lang="en"><literal>blaslapack</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>atlas</literal>,
      <literal>netlib</literal> (default),
      <literal>gotoblas</literal>, <literal>openblas</literal></para>

    <para xml:lang="en">Adds dependencies on Blas / Lapack libraries.</para>
  </sect1>

  <sect1 xml:id="uses-bison">
    <title xml:lang="en"><literal>bison</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>build</literal>,
      <literal>run</literal>, <literal>both</literal></para>

    <para xml:lang="en">Uses <package role="port">devel/bison</package> By default,
      with no arguments or with the <literal>build</literal> argument,
      it implies <command>bison</command> is a build-time dependency,
      <literal>run</literal> implies a run-time dependency, and
      <literal>both</literal> implies both run-time and build-time
      dependencies.</para>
  </sect1>

  <sect1 xml:id="uses-charsetfix">
    <title xml:lang="en"><literal>charsetfix</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Prevents the port from installing
      <filename>charset.alias</filename>.  This must be installed only
      by <package role="port">converters/libiconv</package>.
      <varname>CHARSETFIX_MAKEFILEIN</varname> can be set to a path
      relative to <varname>WRKSRC</varname> if
      <filename>charset.alias</filename> is not installed by
      <filename>${WRKSRC}/Makefile.in</filename>.</para>
  </sect1>

  <sect1 xml:id="uses-cmake">
    <title xml:lang="en"><literal>cmake</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>outsource</literal>,
      <literal>run</literal></para>

    <para xml:lang="en">Uses <application>CMake</application> for configuring and
      building.  With the <literal>outsource</literal> argument, an
      out-of-source build will be performed.  With the
      <literal>run</literal> argument, a run-time dependency is
      registered.  For more information see <xref linkend="using-cmake"/>.</para>
  </sect1>

  <sect1 xml:id="uses-compiler">
    <title xml:lang="en"><literal>compiler</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>c++14-lang</literal>,
      <literal>c++11-lang</literal>, <literal>gcc-c++11-lib</literal>,
      <literal>c++11-lib</literal>, <literal>c++0x</literal>,
      <literal>c11</literal>, <literal>openmp</literal>,
      <literal>nestedfct</literal>, <literal>features</literal></para>

    <para xml:lang="en">Determines which compiler to use based on any given wishes.
      Use <literal>c++14-lang</literal> if the port needs a
      C++14-capable compiler, <literal>gcc-c++11-lib</literal> if the
      port needs the <command>g++</command> compiler with a C++11
      library, or <literal>c++11-lib</literal> if the port needs
      a C++11-ready standard library.  If the port needs a compiler
      understanding C++11, C++0X, C11, OpenMP, or nested functions,
      the corresponding parameters can be used.  Use
      <literal>features</literal> to request a list of features
      supported by the default compiler.  After including
      <filename>bsd.port.pre.mk</filename> the port can inspect the
      results using these variables:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en"><varname>COMPILER_TYPE</varname>: the default compiler
	  on the system, either gcc or clang</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>ALT_COMPILER_TYPE</varname>: the alternative
	  compiler on the system, either gcc or clang.  Only set if
	  two compilers are present in the base system.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>COMPILER_VERSION</varname>: the first two
	  digits of the version of the default compiler.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>ALT_COMPILER_VERSION</varname>: the first two
	  digits of the version of the alternative compiler, if
	  present.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>CHOSEN_COMPILER_TYPE</varname>: the chosen
	  compiler, either gcc or clang</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>COMPILER_FEATURES</varname>: the features
	  supported by the default compiler.  It currently lists the
	  C++ library.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 xml:id="uses-cpe">
    <title xml:lang="en"><literal>cpe</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Include Common Platform Enumeration
      (<acronym>CPE</acronym>) information in package manifest as a
      <acronym>CPE</acronym> 2.3 formatted string.  See the <link xlink:href="http://scap.nist.gov/specifications/cpe/"><acronym>CPE</acronym>
	specification</link> for details.  To add
      <acronym>CPE</acronym> information to a port, follow these
      steps:</para>

    <procedure>
      <step>
	<para xml:lang="en">Search for the official CPE para for the software
	  product either by using the NVD's <link xlink:href="http://web.nvd.nist.gov/view/cpe/search"><acronym>CPE</acronym>
	    search engine</link> or in the <link xlink:href="http://static.nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml">official
	    <acronym>CPE</acronym> dictionary</link> (warning, very
	  large <acronym>XML</acronym> file).  <emphasis>Do not ever
	    make up <acronym>CPE</acronym> data.</emphasis></para>
      </step>

      <step>
	<para xml:lang="en">Add <literal>cpe</literal> to <varname>USES</varname>
	  and compare the result of <command>make -V CPE_STR</command>
	  to the <acronym>CPE</acronym> dictionary para.  Continue one
	  step at a time until <command>make -V CPE_STR</command> is
	  correct.</para>
      </step>

      <step>
	<para xml:lang="en">If the product name (second field, defaults to
	  <varname>PORTNAME</varname>) is incorrect, define
	  <varname>CPE_PRODUCT</varname>.</para>
      </step>

      <step>
	<para xml:lang="en">If the vendor name (first field, defaults to
	  <varname>CPE_PRODUCT</varname>) is incorrect, define
	  <varname>CPE_VENDOR</varname>.</para>
      </step>

      <step>
	<para xml:lang="en">If the version field (third field, defaults to
	  <varname>PORTVERSION</varname>) is incorrect, define
	  <varname>CPE_VERSION</varname>.</para>
      </step>

      <step>
	<para xml:lang="en">If the update field (fourth field, defaults to empty) is
	  incorrect, define <varname>CPE_UPDATE</varname>.</para>
      </step>

      <step>
	<para xml:lang="en">If it is still not correct, check
	  <filename>Mk/Uses/cpe.mk</filename> for additional details,
	  or contact the Ports Security Team <email>ports-secteam@FreeBSD.org</email>.</para>
      </step>

      <step>
	<para xml:lang="en">Derive as much as possible of the <acronym>CPE</acronym>
	  name from existing variables such as
	  <varname>PORTNAME</varname> and
	  <varname>PORTVERSION</varname>.  Use variable modifiers to
	  extract the relevant portions from these variables rather
	  than hardcoding the name.</para>
      </step>

      <step>
	<para xml:lang="en"><emphasis>Always</emphasis> run <command>make -V
	    CPE_STR</command> and check the output before committing
	  anything that changes <varname>PORTNAME</varname> or
	  <varname>PORTVERSION</varname> or any other variable which
	  is used to derive <varname>CPE_STR</varname>.</para>
      </step>
    </procedure>
  </sect1>

  <sect1 xml:id="uses-cran">
    <title xml:lang="en"><literal>cran</literal></title>

    <para xml:lang="en">Possible arguments: (none),
      <literal>auto-plist</literal></para>

    <para xml:lang="en">Uses the Comprehensive R Archive Network.  Specify
      <varname>auto-plist</varname> to automatically generate
      <filename>pkg-plist</filename>.</para>
  </sect1>

  <sect1 xml:id="uses-desktop-file-utils">
    <title xml:lang="en"><literal>desktop-file-utils</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Uses <application>update-desktop-database</application> from
      <package role="port">devel/desktop-file-utils</package>.  An
      extra post-install step will be run without interfering with any
      post-install steps already in the port
      <filename>Makefile</filename>.  A line with <link linkend="plist-keywords-desktop-file-utils"><literal>@desktop-file-utils</literal></link>
      will be added to the plist.</para>
  </sect1>

  <sect1 xml:id="uses-desthack">
    <title xml:lang="en"><literal>desthack</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Changes the behavior of GNU configure to properly support
      <varname>DESTDIR</varname> in case the original software does
      not.</para>
  </sect1>

  <sect1 xml:id="uses-display">
    <title xml:lang="en"><literal>display</literal></title>

    <para xml:lang="en">Possible arguments: (none),
      <replaceable>ARGS</replaceable></para>

    <para xml:lang="en">Set up a virtual display environment.  If the environment
      variable <varname>DISPLAY</varname> is not set, then
      <application>Xvfb</application> is added as a build dependency,
      and <varname>CONFIGURE_ENV</varname> is extended with the port
      number of the currently running instance of
      <application>Xvfb</application>.  The
      <replaceable>ARGS</replaceable>
      parameter defaults to <literal>install</literal> and controls
      the phase around which to start and stop the virtual
      display.</para>
  </sect1>

  <sect1 xml:id="uses-dos2unix">
    <title xml:lang="en"><literal>dos2unix</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">The port has files with line endings in
      <acronym>DOS</acronym> format which need to be converted.  Three
      variables can be set to control which files will be converted.
      The default is to convert <emphasis>all</emphasis> files,
      including binaries.  See <xref linkend="slow-patch-automatic-replacements"/> for
      examples.</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en"><varname>DOS2UNIX_REGEX</varname>: match file names
	  based on a regular expression.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>DOS2UNIX_FILES</varname>: match literal file
	  names.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>DOS2UNIX_GLOB</varname>: match file names based
	  on a glob pattern.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 xml:id="uses-drupal">
    <title xml:lang="en"><literal>drupal</literal></title>

    <para xml:lang="en">Possible arguments: <literal>6</literal>,
      <literal>7</literal>, <literal>module</literal>,
      <literal>theme</literal></para>

    <para xml:lang="en">Automate installation of a port that is a
      <application>Drupal</application> theme or module.  Use with the
      version of Drupal that the port is expecting.  For example,
      <literal>USES=drupal:6,module</literal> says that this port
      creates a Drupal 6 module.  A Drupal 7 theme can be specified
      with <literal>USES=drupal:7,theme</literal>.</para>
  </sect1>

  <sect1 xml:id="uses-execinfo">
    <title xml:lang="en"><literal>execinfo</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Add a library dependency on <package role="port">devel/libexecinfo</package> if
      <filename>libexecinfo.so</filename> is not present in the base
      system.</para>
  </sect1>

  <sect1 xml:id="uses-fakeroot">
    <title xml:lang="en"><literal>fakeroot</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Changes some default behaviour of build systems to allow
      installing as a user.  See <link xlink:href="http://fakeroot.alioth.debian.org/"/>for more
      information on <command>fakeroot</command>.</para>
  </sect1>

  <sect1 xml:id="uses-fam">
    <title xml:lang="en"><literal>fam</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>fam</literal>,
      <literal>gamin</literal></para>

    <para xml:lang="en">Uses a File Alteration Monitor as a library dependency,
      either <package role="port">devel/fam</package> or <package role="port">devel/gamin</package>.  End users can set
      WITH_FAM_SYSTEM to specify their preference.</para>
  </sect1>

  <sect1 xml:id="uses-fmake">
    <title xml:lang="en"><literal>fmake</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Uses <package role="port">devel/fmake</package> as a
      build-time dependency.</para>
  </sect1>

  <sect1 xml:id="uses-fonts">
    <title xml:lang="en"><literal>fonts</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>fc</literal>,
      <literal>fcfontsdir</literal> (default),
      <literal>fontsdir</literal>, <literal>none</literal></para>

    <para xml:lang="en">Adds a runtime dependency on tools needed to register fonts.
      Depending on the argument, add a <literal><link linkend="plist-keywords-fc">@fc</link> ${FONTSDIR}</literal>
      line, <literal><link linkend="plist-keywords-fcfontsdir">@fcfontsdir</link>
	${FONTSDIR}</literal> line, <literal><link linkend="plist-keywords-fontsdir">@fontsdir</link>
	${FONTSDIR}</literal> line, or no line if the argument is
      <literal>none</literal>, to the plist.
      <varname>FONTSDIR</varname> defaults to
      <filename>${PREFIX}/share/fonts/${FONTNAME}</filename> and
      <varname>FONTNAME</varname> to <literal>${PORTNAME}</literal>.
      Add <literal>FONTSDIR</literal> to <varname>PLIST_SUB</varname>
      and <varname>SUB_LIST</varname></para>
  </sect1>

  <sect1 xml:id="uses-fortran">
    <title xml:lang="en"><literal>fortran</literal></title>

    <para xml:lang="en">Possible arguments: <literal>gcc</literal> (default),
      <literal>ifort</literal></para>

    <para xml:lang="en">Uses the Fortran compiler from either GNU or Intel.</para>
  </sect1>

  <sect1 xml:id="uses-fuse">
    <title xml:lang="en"><literal>fuse</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">The port will depend on the FUSE library and handle the
      dependency on the kernel module depending on the version of
      FreeBSD.</para>
  </sect1>

  <sect1 xml:id="uses-gecko">
    <title xml:lang="en"><literal>gecko</literal></title>

    <para xml:lang="en">Possible arguments: <literal>libxul</literal> (default),
      <literal>firefox</literal>, <literal>seamonkey</literal>,
      <literal>thunderbird</literal>, <literal>build</literal>,
      <literal><replaceable>XY</replaceable></literal>,
      <literal><replaceable>XY</replaceable>+</literal></para>

    <para xml:lang="en">Add a dependency on different
      <application>gecko</application> based applications.  If
      <literal>libxul</literal> is used, it is the only argument
      allowed.  When the argument is not <literal>libxul</literal>,
      the <literal>firefox</literal>, <literal>seamonkey</literal>, or
      <literal>thunderbird</literal> arguments can be used, along with
      optional <literal>build</literal> and
      <literal><replaceable>XY</replaceable></literal>/<literal><replaceable>XY</replaceable>+</literal>
      version arguments.</para>
  </sect1>

  <sect1 xml:id="uses-gettext">
    <title xml:lang="en"><literal>gettext</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Deprecated.  Will include both <link linkend="uses-gettext-runtime"><literal>gettext-runtime</literal></link>
      and <link linkend="uses-gettext-tools"><literal>gettext-tools</literal></link>.</para>
  </sect1>

  <sect1 xml:id="uses-gettext-runtime">
    <title xml:lang="en"><literal>gettext-runtime</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>lib</literal>
      (default), <literal>build</literal>,
      <literal>run</literal></para>

    <para xml:lang="en">Uses <package role="port">devel/gettext-runtime</package>.
      By default, with no arguments or with the <literal>lib</literal>
      argument, implies a library dependency on
      <filename>libintl.so</filename>.  <literal>build</literal> and
      <literal>run</literal> implies, respectively a build-time and a
      run-time dependency on <filename>gettext</filename>.</para>
  </sect1>

  <sect1 xml:id="uses-gettext-tools">
    <title xml:lang="en"><literal>gettext-tools</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>build</literal>
      (default), <literal>run</literal></para>

    <para xml:lang="en">Uses <package role="port">devel/gettext-tools</package>.  By
      default, with no argument, or with the <literal>build</literal>
      argument, a build time dependency on <filename>msgfmt</filename>
      is registered.  With the <literal>run</literal> argument, a
      run-time dependency is registered.</para>
  </sect1>

  <sect1 xml:id="uses-ghostscript">
    <title xml:lang="en"><literal>ghostscript</literal></title>

    <para xml:lang="en">Possible arguments: <replaceable>X</replaceable>,
      <literal>build</literal>, <literal>run</literal>,
      <literal>nox11</literal></para>

    <para xml:lang="en">A specific version <replaceable>X</replaceable> can be used.
      Possible versions are <literal>7</literal>,
      <literal>8</literal>, <literal>9</literal> (default), and
      <literal>agpl</literal>.  <literal>nox11</literal> indicates
      that the <literal>-nox11</literal> version of the port is
      required.  <literal>build</literal> and <literal>run</literal>
      add build- and run-time dependencies on
      <application>Ghostscript</application>.  The default is both
      build- and run-time dependencies.</para>
  </sect1>

  <sect1 xml:id="uses-gmake">
    <title xml:lang="en"><literal>gmake</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>lite</literal></para>

    <para xml:lang="en">Uses <package role="port">devel/gmake</package>, or <package role="port">devel/gmake-lite</package> if the
      <literal>lite</literal> argument is used, as a build-time
      dependency and sets up the environment to use
      <command>gmake</command> as the default <command>make</command>
      for the build.</para>
  </sect1>

  <sect1 xml:id="uses-gperf">
    <title xml:lang="en"><literal>gperf</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Add a buildtime dependency on <package role="port">devel/gperf</package> if <command>gperf</command>
      is not present in the base system.</para>
  </sect1>

  <sect1 xml:id="uses-gssapi">
    <title xml:lang="en"><literal>gssapi</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>base</literal>
      (default), <literal>heimdal</literal>, <literal>mit</literal>,
      <literal>flags</literal>, <literal>bootstrap</literal></para>

    <para xml:lang="en">Handle dependencies needed by consumers of the
      <acronym>GSS-API</acronym>.  Only libraries that provide the
      <application>Kerberos</application> mechanism are available.  By
      default, or set to <literal>base</literal>, the
      <acronym>GSS-API</acronym> library from the base system is used.
      Can also be set to <literal>heimdal</literal> to use <package role="port">security/heimdal</package>, or
      <literal>mit</literal> to use <package role="port">security/krb5</package>.</para>

    <para xml:lang="en">When the local <application>Kerberos</application>
      installation is not in <varname>LOCALBASE</varname>, set
      <varname>HEIMDAL_HOME</varname> (for <literal>heimdal</literal>)
      or <varname>KRB5_HOME</varname> (for <literal>krb5</literal>) to
      the location of the <application>Kerberos</application>
      installation.</para>

    <para xml:lang="en">These variables are exported for the ports to use:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en"><varname>GSSAPIBASEDIR</varname></para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>GSSAPICPPFLAGS</varname></para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>GSSAPIINCDIR</varname></para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>GSSAPILDFLAGS</varname></para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>GSSAPILIBDIR</varname></para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>GSSAPILIBS</varname></para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>GSSAPI_CONFIGURE_ARGS</varname></para>
      </listitem>
    </itemizedlist>

    <para xml:lang="en">The <literal>flags</literal> option can be given alongside
      <literal>base</literal>, <literal>heimdal</literal>, or
      <literal>mit</literal> to automatically add
      <varname>GSSAPICPPFLAGS</varname>,
      <varname>GSSAPILDFLAGS</varname>, and
      <varname>GSSAPILIBS</varname> to <varname>CFLAGS</varname>,
      <varname>LDFLAGS</varname>, and <varname>LDADD</varname>,
      respectively.  For example, use
      <literal>base,flags</literal>.</para>

    <para xml:lang="en">The <literal>bootstrap</literal> option is a special prefix
      only for use by <package role="port">security/krb5</package> and
      <package role="port">security/heimdal</package>.  For example,
      use <literal>bootstrap,mit</literal>.</para>

    <example>
      <title xml:lang="en">Typical Use</title>

      <programlisting xml:lang="en">OPTIONS_SINGLE=	GSSAPI
OPTIONS_SINGLE_GSSAPI=	GSSAPI_BASE GSSAPI_HEIMDAL GSSAPI_MIT GSSAPI_NONE

GSSAPI_BASE_USES=	gssapi
GSSAPI_BASE_CONFIGURE_ON=	--with-gssapi=${GSSAPIBASEDIR} ${GSSAPI_CONFIGURE_ARGS}
GSSAPI_HEIMDAL_USES=	gssapi:heimdal
GSSAPI_HEIMDAL_CONFIGURE_ON=	--with-gssapi=${GSSAPIBASEDIR} ${GSSAPI_CONFIGURE_ARGS}
GSSAPI_MIT_USES=	gssapi:mit
GSSAPI_MIT_CONFIGURE_ON=	--with-gssapi=${GSSAPIBASEDIR} ${GSSAPI_CONFIGURE_ARGS}
GSSAPI_NONE_CONFIGURE_ON=	--without-gssapi</programlisting>
    </example>
  </sect1>

  <sect1 xml:id="uses-horde">
    <title xml:lang="en"><literal>horde</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Add buildtime and runtime dependencies on <package role="port">devel/pear-channel-horde</package>.  Other
      <application>Horde</application> dependencies can be added
      with <varname>USE_HORDE_BUILD</varname> and
      <varname>USE_HORDE_RUN</varname>.  See <xref linkend="php-horde"/> for more information.</para>
  </sect1>

  <sect1 xml:id="uses-iconv">
    <title xml:lang="en"><literal>iconv</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>lib</literal>,
      <literal>build</literal>,
      <literal>patch</literal>, <literal>translit</literal>,
      <literal>wchar_t</literal></para>

    <para xml:lang="en">Uses <command>iconv</command> functions, either from the
      port <package role="port">converters/libiconv</package> as a
      build-time and run-time dependency, or from the base system on
      10-CURRENT after a native <command>iconv</command> was committed
      in <revnumber>254273</revnumber>.  By default, with no arguments
      or with the <literal>lib</literal> argument, implies
      <command>iconv</command> with build-time and run-time
      dependencies.  <literal>build</literal> implies a build-time
      dependency, and <literal>patch</literal> implies a patch-time
      dependency.  If the port uses the <literal>WCHAR_T</literal> or
      <literal>//TRANSLIT</literal> iconv extensions, add the relevant
      arguments so that the correct iconv is used.  For more
      information see <xref linkend="using-iconv"/>.</para>
  </sect1>

  <sect1 xml:id="uses-imake">
    <title xml:lang="en"><literal>imake</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>env</literal>,
      <literal>notall</literal>, <literal>noman</literal></para>

    <para xml:lang="en">Add <package role="port">devel/imake</package> as a
      build-time dependency and run <command>xmkmf -a</command> during
      the <buildtarget xml:lang="en">configure</buildtarget> stage.  If the
      <literal>env</literal> argument is given, the
      <buildtarget xml:lang="en">configure</buildtarget> target is not set.  If the
      <option>-a</option> flag is a problem for the port, add the
      <literal>notall</literal> argument.  If <command>xmkmf</command>
      does not generate a <buildtarget xml:lang="en">install.man</buildtarget>
      target, add the <literal>noman</literal> argument.</para>
  </sect1>

  <sect1 xml:id="uses-kmod">
    <title xml:lang="en"><literal>kmod</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Fills in the boilerplate for kernel module ports,
      currently:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en">Add <literal>kld</literal> to
	  <varname>CATEGORIES</varname>.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Set <varname>SSP_UNSAFE</varname>.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Set <varname>IGNORE</varname> if the kernel sources are
	  not found in <varname>SRC_BASE</varname>.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Define <varname>KMODDIR</varname> to
	  <filename>/boot/modules</filename> by default, add it to
	  <varname>PLIST_SUB</varname> and
	  <varname>MAKE_ENV</varname>, and create it upon
	  installation.  If <varname>KMODDIR</varname> is set to
	  <filename>/boot/kernel</filename>, it will be rewritten to
	  <filename>/boot/modules</filename>.  This prevents breaking
	  packages when upgrading the kernel due to
	  <filename>/boot/kernel</filename> being renamed to
	  <filename>/boot/kernel.old</filename> in the process.</para>
      </listitem>

      <listitem>
	<para xml:lang="en">Handle cross-referencing kernel modules upon
	  installation and deinstallation, using <link linkend="plist-keywords-kld"><literal>@kld</literal></link>.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 xml:id="uses-lha">
    <title xml:lang="en"><literal>lha</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Set <varname>EXTRACT_SUFX</varname> to
      <literal>.lzh</literal></para>
  </sect1>

  <sect1 xml:id="uses-libarchive">
    <title xml:lang="en"><literal>libarchive</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Registers a dependency on <package role="port">archivers/libarchive</package>.  Any ports
      depending on <application>libarchive</application> must include
      <literal>USES=libarchive</literal>.</para>
  </sect1>

  <sect1 xml:id="uses-libedit">
    <title xml:lang="en"><literal>libedit</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Registers a dependency on <package role="port">devel/libedit</package>.  Any ports depending on
      <application>libedit</application> must include
      <literal>USES=libedit</literal>.</para>
  </sect1>

  <sect1 xml:id="uses-libtool">
    <title xml:lang="en"><literal>libtool</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>keepla</literal>,
      <literal>build</literal></para>

    <para xml:lang="en">Patches <command>libtool</command> scripts.  This must be
      added to all ports that use <command>libtool</command>.  The
      <literal>keepla</literal> argument can be used to keep
      <filename>.la</filename> files.  Some ports do not ship with
      their own copy of libtool and need a build time dependency on
      <package role="port">devel/libtool</package>, use the
      <literal>:build</literal> argument to add such
      dependency.</para>
  </sect1>

  <sect1 xml:id="uses-localbase">
    <title xml:lang="en"><literal>localbase</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Ensures that libraries from dependencies in
      <varname>LOCALBASE</varname> are used instead of the ones from
      the base system.  Ports that depend on libraries that are also
      present in the base system should use this.  It is also used
      internally by a few other <varname>USES</varname>.</para>
  </sect1>

  <sect1 xml:id="uses-lua">
    <title xml:lang="en"><literal>lua</literal></title>

    <para xml:lang="en">Possible arguments: (none),
      <literal><replaceable>XY</replaceable>+</literal>,
      <literal><replaceable>XY</replaceable></literal>,
      <literal>build</literal>, <literal>run</literal></para>

    <para xml:lang="en">Adds a dependency on <application>Lua</application>.  By
      default this is a library dependency, unless overridden by the
      <literal>build</literal> or <literal>run</literal> option.  The
      default version is 5.2, unless set by the
      <literal><replaceable>XY</replaceable></literal> parameter (for
      example, <literal>51</literal> or
      <literal>52+</literal>).</para>
  </sect1>

  <sect1 xml:id="uses-makeinfo">
    <title xml:lang="en"><literal>makeinfo</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Add a build-time dependency on <command>makeinfo</command>
      if it is not present in the base system.</para>
  </sect1>

  <sect1 xml:id="uses-makeself">
    <title xml:lang="en"><literal>makeself</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Indicates that the distribution files are makeself archives
      and sets the appropriate dependencies.</para>
  </sect1>

  <sect1 xml:id="uses-metaport">
    <title xml:lang="en"><literal>metaport</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Sets the following variables to make it easier to create a
      metaport: <varname>MASTER_SITES</varname>,
      <varname>DISTFILES</varname>, <varname>EXTRACT_ONLY</varname>,
      <varname>NO_BUILD</varname>, <varname>NO_INSTALL</varname>,
      <varname>NO_MTREE</varname>, <varname>NO_ARCH</varname>.</para>
  </sect1>

  <sect1 xml:id="uses-mono">
    <title xml:lang="en"><literal>mono</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Adds a dependency on the <application>Mono</application>
      (currently only C#) framework by setting the appropriate
      dependencies.</para>
  </sect1>

  <sect1 xml:id="uses-motif">
    <title xml:lang="en"><literal>motif</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Uses <package role="port">x11-toolkits/open-motif</package>
      as a library dependency.  End users can set
      <varname>WANT_LESSTIF</varname> for the dependency to be on
      <package role="port">x11-toolkits/lesstif</package> instead of
      <package role="port">x11-toolkits/open-motif</package>.</para>
  </sect1>

  <sect1 xml:id="uses-ncurses">
    <title xml:lang="en"><literal>ncurses</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>base</literal>,
      <literal>port</literal></para>

    <para xml:lang="en">Uses <application>ncurses</application>, and causes some
      useful variables to be set.</para>
  </sect1>

  <sect1 xml:id="uses-ninja">
    <title xml:lang="en"><literal>ninja</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Uses <application>ninja</application> to build the port.
      End users can set <varname>NINJA_VERBOSE</varname> for verbose
      output.</para>
  </sect1>

  <sect1 xml:id="uses-objc">
    <title xml:lang="en"><literal>objc</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Add objective C dependencies (compiler, runtime library) if
      the base system does not support it.</para>
  </sect1>

  <sect1 xml:id="uses-openal">
    <title xml:lang="en"><literal>openal</literal></title>

    <para xml:lang="en">Possible arguments: <literal>al</literal>,
      <literal>soft</literal> (default), <literal>si</literal>,
      <literal>alut</literal></para>

    <para xml:lang="en">Uses <application>OpenAL</application>.  The backend can be
      specified, with the software implementation as the default.  The
      user can specify a preferred backend with
      <varname>WANT_OPENAL</varname>.  Valid values for this knob are
      <literal>soft</literal> (default) and
      <literal>si</literal>.</para>
  </sect1>

  <sect1 xml:id="uses-pathfix">
    <title xml:lang="en"><literal>pathfix</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Look for <filename>Makefile.in</filename> and
      <filename>configure</filename> in the port's associated sources
      and fix common paths to make sure they respect the FreeBSD
      hierarchy.  If the port uses <command>automake</command>, set
      <varname>PATHFIX_MAKEFILEIN</varname> to
      <filename>Makefile.am</filename> if needed.</para>
  </sect1>

  <sect1 xml:id="uses-pear">
    <title xml:lang="en"><literal>pear</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Adds a dependency on <package role="port">devel/pear</package>.  It will setup default
      behavior for software using the <application>PHP</application>
      Extension and Application Repository.  See <xref linkend="php-pear"/> for more information.</para>
  </sect1>

  <sect1 xml:id="uses-perl5">
    <title xml:lang="en"><literal>perl5</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Depends on <application>Perl</application>.  These variables
      can be set:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en"><varname>PERL_VERSION</varname>: Full version of
	  <application>Perl</application> to use, or the default if
	  not set</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>PERL_ARCH</varname>: Directory name of
	  architecture dependent libraries, defaults to
	  <filename>mach</filename></para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>PERL_PORT</varname>: Name of the
	  <application>Perl</application> port to be installed, the
	  default is derived from
	  <varname>PERL_VERSION</varname></para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>SITE_PERL</varname>: Directory name for site
	  specific <application>Perl</application> packages</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>USE_PERL5</varname>: Phases in which to use
	  <application>Perl</application>, can be
	  <literal>extract</literal>, <literal>patch</literal>,
	  <literal>build</literal>, <literal>install</literal>, or
	  <literal>run</literal>.  It can also be
	  <literal>configure</literal>, <literal>modbuild</literal>,
	  or <literal>modbuildtiny</literal> when
	  <filename>Makefile.PL</filename>,
	  <filename>Build.PL</filename>, or the Module::Build::Tiny
	  flavor of <filename>Build.PL</filename> is required.  It
	  defaults to <literal>build run</literal>.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 xml:id="uses-pgsql">
    <title xml:lang="en"><literal>pgsql</literal></title>

    <para xml:lang="en">Possible arguments: (none),
      <literal><replaceable>X.Y</replaceable></literal>,
      <literal><replaceable>X.Y</replaceable>+</literal>,
      <literal><replaceable>X.Y</replaceable>-</literal></para>

    <para xml:lang="en">Provide support for PostgreSQL.  Maintainer can set version
      required.  Minimum and maximum versions can be specified; for
      example, 9.0-, 8.4+.</para>

    <para xml:lang="en">Add PostgreSQL component dependency, using
      <literal>WANT_PGSQL=component[:target]</literal>.  for example,
      <literal>WANT_PGSQL=server:configure pltcl plperl</literal>  For
      the full list use <command>make -V
	_USE_PGSQL_DEP</command>.</para>
  </sect1>

  <sect1 xml:id="uses-pkgconfig">
    <title xml:lang="en"><literal>pkgconfig</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>build</literal>
      (default), <literal>run</literal>,
      <literal>both</literal></para>

    <para xml:lang="en">Uses <package role="port">devel/pkgconf</package>.  With no
      arguments or with the <literal>build</literal> argument, it
      implies <command>pkg-config</command> as a build-time
      dependency.  <literal>run</literal> implies a run-time
      dependency and <literal>both</literal> implies both run-time and
      build-time dependencies.</para>
  </sect1>

  <sect1 xml:id="uses-pure">
    <title xml:lang="en"><literal>pure</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>ffi</literal></para>

    <para xml:lang="en">Uses <package role="port">lang/pure</package>.  Largely used
      for building related <application>pure</application> ports.
      With the <literal>ffi</literal> argument, it implies <package role="port">devel/pure-ffi</package> as a run-time
      dependency.</para>
  </sect1>

  <sect1 xml:id="uses-python">
    <title><literal>python</literal></title>

    <para xml:lang="en">Possible arguments: (none),
      <literal><replaceable>X.Y</replaceable></literal>,
      <literal><replaceable>X.Y+</replaceable></literal>,
      <literal><replaceable>-X.Y</replaceable></literal>,
      <literal><replaceable>X.Y-Z.A</replaceable></literal>,
      <literal>build</literal>, <literal>run</literal></para>

    <para xml:lang="en">Uses <application>Python</application>.  A supported version
      or version range can be specified.  If Python is only needed at
      build or run time, it can be set as a build or run dependency
      with <literal>build</literal> or <literal>run</literal>.  See
      <xref linkend="using-python"/> for more information.</para>
  </sect1>

  <sect1 xml:id="uses-qmail">
    <title xml:lang="en"><literal>qmail</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>build</literal>,
      <literal>run</literal>, <literal>both</literal>,
      <literal>vars</literal></para>

    <para xml:lang="en">Uses <package role="port">mail/qmail</package>.  With the
      <literal>build</literal> argument, it implies
      <command>qmail</command> as a build-time dependency.
      <literal>run</literal> implies a run-time dependency.  Using no
      argument or the <literal>both</literal> argument implies both
      run-time and build-time dependencies.  <literal>vars</literal>
      will only set QMAIL variables for the port to use.</para>
  </sect1>

  <sect1 xml:id="uses-qmake">
    <title><literal>qmake</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>norecursive</literal>,
      <literal>outsource</literal></para>

    <para xml:lang="en">Uses <application>QMake</application> for configuring.  For
      more information see <xref linkend="using-qmake"/>.</para>
  </sect1>

  <sect1 xml:id="uses-readline">
    <title xml:lang="en"><literal>readline</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>port</literal></para>

    <para xml:lang="en">Uses <application>readline</application> as a library
      dependency, and sets <varname>CPPFLAGS</varname> and
      <varname>LDFLAGS</varname> as necessary.  If the
      <literal>port</literal> argument is used or if readline is not
      present in the base system, add a dependency on <package role="port">devel/readline</package></para>
  </sect1>

  <sect1 xml:id="uses-scons">
    <title xml:lang="en"><literal>scons</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Provide support for the use of <package role="port">devel/scons</package></para>
  </sect1>

  <sect1 xml:id="uses-shared-mime-info">
    <title xml:lang="en"><literal>shared-mime-info</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Uses <application>update-mime-database</application> from
      <package role="port">misc/shared-mime-info</package>.  This uses
      will automatically add a post-install step in such a way that
      the port itself still can specify there own post-install step if
      needed.  It also add an <link linkend="plist-keywords-shared-mime-info"><literal>@shared-mime-info</literal></link>
      para to the plist.</para>
  </sect1>

  <sect1 xml:id="uses-shebangfix">
    <title xml:lang="en"><literal>shebangfix</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">A lot of software uses incorrect locations for script
      interpreters, most notably <filename>/usr/bin/perl</filename>
      and <filename>/bin/bash</filename>.  The shebagngfix macro fixes
      shebang lines in scripts listed in
      <varname>SHEBANG_FILES</varname>.  The shebangfix macro is run
      from <literal>${WRKSRC}</literal>, so it can contain paths that
      are relative to <literal>${WRKSRC}</literal>.  It can also deal
      with absolute paths if files outside of
      <literal>${WRKSRC}</literal> require patching.  For
      example:</para>

    <programlisting xml:lang="en">USES=	shebangfix
SHEBANG_FILES=	scripts/foobar.pl scripts/*.sh</programlisting>

    <para xml:lang="en">Currently
      <application>Bash</application>,
      <application>Java</application>, <application>Ksh</application>,
      <application>Lua</application>,
      <application>Perl</application>, <application>PHP</application>,
      <application>Python</application>,
      <application>Ruby</application>, <application>Tcl</application>,
      and <application>Tk</application> are supported by default.  To
      support another interpreter, set
      <varname>SHEBANG_LANG</varname>,
      <varname><replaceable>interp</replaceable>_OLD_CMD</varname> and
      <varname><replaceable>interp</replaceable>_CMD</varname>.  For
      example:</para>

    <programlisting xml:lang="en">SHEBANG_LANG=	lua
lua_OLD_CMD=	/usr/bin/lua
lua_CMD=	${LOCALBASE}/bin/lua</programlisting>

    <para xml:lang="en"><literal><replaceable>interp</replaceable>_OLD_CMD</literal>
      will contain multiple values.  Any entry with spaces must be
      quoted.  For example, if it was not already defined, the
      <application>Ksh</application> entry could be defined as:</para>

    <programlisting xml:lang="en">SHEBANG_LANG=	ksh
ksh_OLD_CMD=	"/usr/bin/env ksh" /bin/ksh /usr/bin/ksh
ksh_CMD=	${LOCALBASE}/bin/ksh</programlisting>

    <para xml:lang="en">Some software uses strange locations for an interpreter.
      For example, an application might expect
      <application>Python</application> to be located in
      <filename>/opt/bin/python2.7</filename>.  The strange path to be
      replaced can be declared in the port
      <filename>Makefile</filename>:</para>

    <programlisting xml:lang="en">python_OLD_CMD=	/opt/bin/python2.7</programlisting>

    <note>
      <para xml:lang="en">The fixing of shebangs is done during the
	<buildtarget xml:lang="en">patch</buildtarget> phase.  If scripts are
	created with incorrect shebangs during the
	<buildtarget xml:lang="en">build</buildtarget> phase, the build process (for
	examples, the <filename>configure</filename> script, or the
	<filename>Makefiles</filename>) must be patched to generate
	the right shebangs.  Correct paths for supported interpreters
	are available in
	<literal><replaceable>interp</replaceable>_CMD</literal>.</para>
    </note>
  </sect1>

  <sect1 xml:id="uses-tar">
    <title xml:lang="en"><literal>tar</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>Z</literal>,
      <literal>bz2</literal>, <literal>bzip2</literal>,
      <literal>lzma</literal>, <literal>tbz</literal>,
      <literal>tbz2</literal>,
      <literal>tgz</literal>, <literal>txz</literal>,
      <literal>xz</literal></para>

    <para xml:lang="en">Set <varname>EXTRACT_SUFX</varname> to
      <literal>.tar</literal>, <literal>.tar.Z</literal>,
      <literal>.tar.bz2</literal>, <literal>.tar.bz2</literal>,
      <literal>.tar.lzma</literal>, <literal>.tbz</literal>,
      <literal>.tbz2</literal>,
      <literal>.tgz</literal>, <literal>.txz</literal> or
      <literal>.tar.xz</literal> respectively.</para>
  </sect1>

  <sect1 xml:id="uses-tcl">
    <title xml:lang="en"><literal>tcl</literal></title>

    <para xml:lang="en">Possible arguments: <literal>PORT</literal></para>

    <para xml:lang="en">Add a dependency on <application>Tcl</application>.  The
      <literal>PORT</literal> parameter can be either
      <literal>tcl</literal> or <literal>tk</literal>.  Either a
      version or wrapper dependency can be appended using
      <literal>PORT:version</literal> or
      <literal>PORT:wrapper</literal>.  The version can be empty, one
      or more exact version numbers (currently <literal>84</literal>,
      <literal>85</literal>, or <literal>86</literal>), or a minimal
      version number (currently <literal>84+</literal>,
      <literal>85+</literal> or <literal>86+</literal>).  A build- or
      run-time only dependency can be specified using
      <literal>PORT,build</literal> or <literal>PORT,run</literal>.
      After including <filename>bsd.port.pre.mk</filename> the port
      can inspect the results using these variables:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en"><varname>TCL_VER</varname>: chosen major.minor version
	  of <application>Tcl</application></para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>TCLSH</varname>: full path of the
	  <application>Tcl</application> interpreter</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>TCL_LIBDIR</varname>: path of the
	  <application>Tcl</application> libraries</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>TCL_INCLUDEDIR</varname>: path of the
	  <application>Tcl</application> C header files</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>TK_VER</varname>: chosen major.minor version of
	  <application>Tk</application></para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>WISH</varname>: full path of the
	  <application>Tk</application> interpreter</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>TK_LIBDIR</varname>: path of the
	  <application>Tk</application> libraries</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>TK_INCLUDEDIR</varname>: path of the
	  <application>Tk</application> C header files</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 xml:id="uses-terminfo">
    <title xml:lang="en"><literal>terminfo</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Adds <link linkend="plist-keywords-terminfo"><literal>@terminfo</literal></link>
      to the <filename>plist</filename>.  Use when the port installs
      <filename><replaceable>*</replaceable>.terminfo</filename> files
      in <filename>${PREFIX}/share/misc</filename>.</para>
  </sect1>

  <sect1 xml:id="uses-tk">
    <title xml:lang="en"><literal>tk</literal></title>

    <para xml:lang="en">Same as arguments for <literal>tcl</literal></para>

    <para xml:lang="en">Small wrapper when using both <application>Tcl</application>
      and <application>Tk</application>.  The same variables are
      returned as when using <application>Tcl</application>.</para>
  </sect1>

  <sect1 xml:id="uses-twisted">
    <title xml:lang="en"><literal>twisted</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>ARGS</literal></para>

    <para xml:lang="en">Add a dependency on <application>twistedCore</application>.
      The list of required components can be specified as a value of
      this variable.  <literal>ARGS</literal> can be one of:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en"><literal>build</literal>: add
	  <application>twistedCore</application> or any specified
	  component as build dependency.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>run</literal>: add
	  <application>twistedCore</application> or any specified
	  component as run dependency.</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="en">Besides <literal>build</literal> and <literal>run</literal>,
      one or more other supported <application>twisted</application>
      components can be specified.  Supported values are listed in
      <filename>Uses/twisted.mk</filename>.</para>
  </sect1>

  <sect1 xml:id="uses-uidfix">
    <title xml:lang="en"><literal>uidfix</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Changes some default behavior (mostly variables) of
      the build system to allow installing this port as a normal
      user.  Try this in the port before adding
      <literal>NEED_ROOT=yes</literal></para>
  </sect1>

  <sect1 xml:id="uses-uniquefiles">
    <title xml:lang="en"><literal>uniquefiles</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>dirs</literal></para>

    <para xml:lang="en">Make files or directories 'unique', by adding a prefix or
      suffix.  If the <literal>dirs</literal> argument is used, the
      port needs a prefix (a only a prefix) based on
      <varname>UNIQUE_PREFIX</varname> for standard directories
      <varname>DOCSDIR</varname>, <varname>EXAMPLESDIR</varname>,
      <varname>DATADIR</varname>, <varname>WWWDIR</varname>,
      <varname>ETCDIR</varname>.  These variables are available for
      ports:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en"><varname>UNIQUE_PREFIX</varname>: The prefix to be used
	  for directories and files.  Default:
	  <varname>${PKGNAMEPREFIX}</varname>.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>UNIQUE_PREFIX_FILES</varname>: A list of files
	  that need to be prefixed.  Default: empty.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>UNIQUE_SUFFIX</varname>: The suffix to be used
	  for files.  Default:
	  <varname>${PKGNAMESUFFIX}</varname>.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>UNIQUE_SUFFIX_FILES</varname>: A list of files
	  that need to be suffixed.  Default: empty.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 xml:id="uses-webplugin">
    <title xml:lang="en"><literal>webplugin</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>ARGS</literal></para>

    <para xml:lang="en">Automatically create and remove symbolic links for each
      application that supports the webplugin framework.
      <literal>ARGS</literal> can be one of:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en"><literal>gecko</literal>: support plug-ins based on
	  Gecko</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>native</literal>: support plug-ins for Gecko,
	  Opera, and WebKit-GTK</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>linux</literal>: support Linux plug-ins</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><literal>all</literal> (default, implicit): support all
	  plug-in types</para>
      </listitem>

      <listitem>
	<para xml:lang="en">(individual entries): support only the browsers
	  listed</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="en">These variables can be adjusted:</para>

    <itemizedlist>
      <listitem>
	<para xml:lang="en"><varname>WEBPLUGIN_FILES</varname>: No default, must be
	  set manually.  The plug-in files to install.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>WEBPLUGIN_DIR</varname>: The directory to
	  install the plug-in files to, default
	  <filename><replaceable>PREFIX</replaceable>/lib/browser_plugins/<replaceable>WEBPLUGIN_NAME</replaceable></filename>.
	  Set this if the port installs plug-in files outside of the
	  default directory to prevent broken symbolic links.</para>
      </listitem>

      <listitem>
	<para xml:lang="en"><varname>WEBPLUGIN_NAME</varname>: The final directory
	  to install the plug-in files into, default
	  <varname>PKGBASE</varname>.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 xml:id="uses-xfce">
    <title xml:lang="en"><literal>xfce</literal></title>

    <para xml:lang="en">Possible arguments: (none), <literal>gtk3</literal></para>

    <para xml:lang="en">Provide support for <application>Xfce</application> related
      ports.  See <xref linkend="using-xfce"/> for details.</para>

    <para xml:lang="en">The <literal>gtk3</literal> argument specifies that the port
      requires <application>GTK3</application> support.  It adds
      additional features provided by some core components, for
      example, <package role="port">x11/libxfce4menu</package> and
      <package role="port">x11-wm/xfce4-panel</package>.</para>
  </sect1>

  <sect1 xml:id="uses-zip">
    <title xml:lang="en"><literal>zip</literal></title>

    <para xml:lang="en">Possible arguments: (none),
      <literal>infozip</literal></para>

    <para xml:lang="en">Indicates that the distribution files use the ZIP
      compression algorithm.  For files using the InfoZip algorithm
      the <literal>infozip</literal> argument must be passed to set
      the appropriate dependencies.</para>
  </sect1>

  <sect1 xml:id="uses-zope">
    <title xml:lang="en"><literal>zope</literal></title>

    <para xml:lang="en">Possible arguments: (none)</para>

    <para xml:lang="en">Uses <package role="port">www/zope</package>.  Mostly used
      for building <application>zope</application> related ports.
      <varname>ZOPE_VERSION</varname> can be used by a port to
      indicate that a specific version of
      <application>zope</application> shall be used.</para>
  </sect1>
</chapter>

  

<!--
     The FreeBSD Documentation Project
     $FreeBSD$
-->

<chapter version="5.0" xml:id="versions">

  <title xml:lang="en"><literal>__FreeBSD_version</literal>
    Values</title>

  <para xml:lang="en">Here is a convenient list of
    <literal>__FreeBSD_version</literal> values as defined in
    <link xlink:href="http://svnweb.FreeBSD.org/base/head/sys/sys/param.h?view=markup">sys/param.h</link>:</para>

  <table frame="none" xml:id="freebsd-versions-table">
    <title xml:lang="en"><literal>__FreeBSD_version</literal> Values</title>

    <tgroup cols="3">
      <thead>
	<row>
	  <entry xml:lang="en">Value</entry>

	  <entry xml:lang="en">Date</entry>

	  <entry xml:lang="en">Release</entry>
	</row>
      </thead>

      <tbody>
	<row>
	  <entry>119411</entry>
	  <entry/>
	  <entry>2.0-RELEASE</entry>
	</row>

	<row>
	  <entry>199501, 199503</entry>
	  <entry>March 19, 1995</entry>
	  <entry>2.1-CURRENT</entry>
	</row>

	<row>
	  <entry>199504</entry>
	  <entry>April 9, 1995</entry>
	  <entry>2.0.5-RELEASE</entry>
	</row>

	<row>
	  <entry>199508</entry>
	  <entry>August 26, 1995</entry>
	  <entry xml:lang="en">2.2-CURRENT before 2.1</entry>
	</row>

	<row>
	  <entry>199511</entry>
	  <entry>November 10, 1995</entry>
	  <entry>2.1.0-RELEASE</entry>
	</row>

	<row>
	  <entry>199512</entry>
	  <entry>November 10, 1995</entry>
	  <entry xml:lang="en">2.2-CURRENT before 2.1.5</entry>
	</row>

	<row>
	  <entry>199607</entry>
	  <entry>July 10, 1996</entry>
	  <entry>2.1.5-RELEASE</entry>
	</row>

	<row>
	  <entry>199608</entry>
	  <entry>July 12, 1996</entry>
	  <entry xml:lang="en">2.2-CURRENT before 2.1.6</entry>
	</row>

	<row>
	  <entry>199612</entry>
	  <entry>November 15, 1996</entry>
	  <entry>2.1.6-RELEASE</entry>
	</row>

	<row>
	  <entry>199612</entry>
	  <entry/>
	  <entry>2.1.7-RELEASE</entry>
	</row>

	<row>
	  <entry>220000</entry>
	  <entry>February 19, 1997</entry>
	  <entry>2.2-RELEASE</entry>
	</row>

	<row>
	  <entry xml:lang="en">(not changed)</entry>
	  <entry/>
	  <entry>2.2.1-RELEASE</entry>
	</row>

	<row>
	  <entry xml:lang="en">(not changed)</entry>
	  <entry/>
	  <entry xml:lang="en">2.2-STABLE after 2.2.1-RELEASE</entry>
	</row>

	<row>
	  <entry>221001</entry>
	  <entry>April 15, 1997</entry>
	  <entry xml:lang="en">2.2-STABLE after texinfo-3.9</entry>
	</row>

	<row>
	  <entry>221002</entry>
	  <entry>April 30, 1997</entry>
	  <entry xml:lang="en">2.2-STABLE after top</entry>
	</row>

	<row>
	  <entry>222000</entry>
	  <entry>May 16, 1997</entry>
	  <entry>2.2.2-RELEASE</entry>
	</row>

	<row>
	  <entry>222001</entry>
	  <entry>May 19, 1997</entry>
	  <entry xml:lang="en">2.2-STABLE after 2.2.2-RELEASE</entry>
	</row>

	<row>
	  <entry>225000</entry>
	  <entry xml:lang="en">October 2, 1997</entry>
	  <entry xml:lang="en">2.2.5-RELEASE</entry>
	</row>

	<row>
	  <entry>225001</entry>
	  <entry>November 20, 1997</entry>
	  <entry xml:lang="en">2.2-STABLE after 2.2.5-RELEASE</entry>
	</row>

	<row>
	  <entry>225002</entry>
	  <entry>December 27, 1997</entry>
	  <entry xml:lang="en">2.2-STABLE after ldconfig -R merge</entry>
	</row>

	<row>
	  <entry>226000</entry>
	  <entry>March 24, 1998</entry>
	  <entry>2.2.6-RELEASE</entry>
	</row>

	<row>
	  <entry>227000</entry>
	  <entry>July 21, 1998</entry>
	  <entry>2.2.7-RELEASE</entry>
	</row>

	<row>
	  <entry>227001</entry>
	  <entry>July 21, 1998</entry>
	  <entry xml:lang="en">2.2-STABLE after 2.2.7-RELEASE</entry>
	</row>

	<row>
	  <entry>227002</entry>
	  <entry>September 19, 1998</entry>
	  <entry xml:lang="en">2.2-STABLE after <citerefentry><refentrytitle>semctl</refentrytitle><manvolnum>2</manvolnum></citerefentry> change</entry>
	</row>

	<row>
	  <entry>228000</entry>
	  <entry>November 29, 1998</entry>
	  <entry>2.2.8-RELEASE</entry>
	</row>

	<row>
	  <entry>228001</entry>
	  <entry>November 29, 1998</entry>
	  <entry xml:lang="en">2.2-STABLE after 2.2.8-RELEASE</entry>
	</row>

	<row>
	  <entry>300000</entry>
	  <entry>February 19, 1996</entry>
	  <entry xml:lang="en">3.0-CURRENT before <citerefentry><refentrytitle>mount</refentrytitle><manvolnum>2</manvolnum></citerefentry> change</entry>
	</row>

	<row>
	  <entry>300001</entry>
	  <entry>September 24, 1997</entry>
	  <entry xml:lang="en">3.0-CURRENT after <citerefentry><refentrytitle>mount</refentrytitle><manvolnum>2</manvolnum></citerefentry> change</entry>
	</row>

	<row>
	  <entry>300002</entry>
	  <entry>June 2, 1998</entry>
	  <entry xml:lang="en">3.0-CURRENT after <citerefentry><refentrytitle>semctl</refentrytitle><manvolnum>2</manvolnum></citerefentry> change</entry>
	</row>

	<row>
	  <entry>300003</entry>
	  <entry>June 7, 1998</entry>
	  <entry xml:lang="en">3.0-CURRENT after ioctl arg changes</entry>
	</row>

	<row>
	  <entry>300004</entry>
	  <entry>September 3, 1998</entry>
	  <entry xml:lang="en">3.0-CURRENT after ELF conversion</entry>
	</row>

	<row>
	  <entry>300005</entry>
	  <entry>October 16, 1998</entry>
	  <entry>3.0-RELEASE</entry>
	</row>

	<row>
	  <entry>300006</entry>
	  <entry>October 16, 1998</entry>
	  <entry xml:lang="en">3.0-CURRENT after 3.0-RELEASE</entry>
	</row>

	<row>
	  <entry>300007</entry>
	  <entry>January 22, 1999</entry>
	  <entry xml:lang="en">3.0-STABLE after 3/4 branch</entry>
	</row>

	<row>
	  <entry>310000</entry>
	  <entry>February 9, 1999</entry>
	  <entry>3.1-RELEASE</entry>
	</row>

	<row>
	  <entry>310001</entry>
	  <entry>March 27, 1999</entry>
	  <entry xml:lang="en">3.1-STABLE after 3.1-RELEASE</entry>
	</row>

	<row>
	  <entry>310002</entry>
	  <entry>April 14, 1999</entry>
	  <entry xml:lang="en">3.1-STABLE after C++ constructor/destructor order
	    change</entry>
	</row>

	<row>
	  <entry>320000</entry>
	  <entry/>
	  <entry>3.2-RELEASE</entry>
	</row>

	<row>
	  <entry>320001</entry>
	  <entry>May 8, 1999</entry>
	  <entry>3.2-STABLE</entry>
	</row>

	<row>
	  <entry>320002</entry>
	  <entry>August 29, 1999</entry>
	  <entry xml:lang="en">3.2-STABLE after binary-incompatible IPFW and
	    socket changes</entry>
	</row>

	<row>
	  <entry>330000</entry>
	  <entry>September 2, 1999</entry>
	  <entry>3.3-RELEASE</entry>
	</row>

	<row>
	  <entry>330001</entry>
	  <entry>September 16, 1999</entry>
	  <entry>3.3-STABLE</entry>
	</row>

	<row>
	  <entry>330002</entry>
	  <entry>November 24, 1999</entry>
	  <entry xml:lang="en">3.3-STABLE after adding <citerefentry><refentrytitle>mkstemp</refentrytitle><manvolnum>3</manvolnum></citerefentry>
	    to libc</entry>
	</row>

	<row>
	  <entry>340000</entry>
	  <entry>December 5, 1999</entry>
	  <entry>3.4-RELEASE</entry>
	</row>

	<row>
	  <entry>340001</entry>
	  <entry>December 17, 1999</entry>
	  <entry>3.4-STABLE</entry>
	</row>

	<row>
	  <entry>350000</entry>
	  <entry>June 20, 2000</entry>
	  <entry>3.5-RELEASE</entry>
	</row>

	<row>
	  <entry>350001</entry>
	  <entry>July 12, 2000</entry>
	  <entry>3.5-STABLE</entry>
	</row>

	<row>
	  <entry>400000</entry>
	  <entry>January 22, 1999</entry>
	  <entry xml:lang="en">4.0-CURRENT after 3.4 branch</entry>
	</row>

	<row>
	  <entry>400001</entry>
	  <entry>February 20, 1999</entry>
	  <entry xml:lang="en">4.0-CURRENT after change in dynamic linker
	    handling</entry>
	</row>

	<row>
	  <entry>400002</entry>
	  <entry>March 13, 1999</entry>
	  <entry xml:lang="en">4.0-CURRENT after C++ constructor/destructor
	    order change</entry>
	</row>

	<row>
	  <entry>400003</entry>
	  <entry>March 27, 1999</entry>
	  <entry xml:lang="en">4.0-CURRENT after functioning
	    <citerefentry><refentrytitle>dladdr</refentrytitle><manvolnum>3</manvolnum></citerefentry></entry>
	</row>

	<row>
	  <entry>400004</entry>
	  <entry>April 5, 1999</entry>
	  <entry xml:lang="en">4.0-CURRENT after __deregister_frame_info dynamic
	    linker bug fix (also 4.0-CURRENT after EGCS 1.1.2
	    integration)</entry>
	</row>

	<row>
	  <entry>400005</entry>
	  <entry>April 27, 1999</entry>
	  <entry xml:lang="en">4.0-CURRENT after <citerefentry><refentrytitle>suser</refentrytitle><manvolnum>9</manvolnum></citerefentry> API change
	    (also 4.0-CURRENT after newbus)</entry>
	</row>

	<row>
	  <entry>400006</entry>
	  <entry>May 31, 1999</entry>
	  <entry xml:lang="en">4.0-CURRENT after cdevsw registration
	    change</entry>
	</row>

	<row>
	  <entry>400007</entry>
	  <entry>June 17, 1999</entry>
	  <entry xml:lang="en">4.0-CURRENT after the addition of so_cred for
	    socket level credentials</entry>
	</row>

	<row>
	  <entry>400008</entry>
	  <entry>June 20, 1999</entry>
	  <entry xml:lang="en">4.0-CURRENT after the addition of a poll syscall
	    wrapper to libc_r</entry>
	</row>

	<row>
	  <entry>400009</entry>
	  <entry>July 20, 1999</entry>
	  <entry xml:lang="en">4.0-CURRENT after the change of the kernel's
	    <literal>dev_t</literal> type to <literal>struct
	      specinfo</literal> pointer</entry>
	</row>

	<row>
	  <entry>400010</entry>
	  <entry>September 25, 1999</entry>
	  <entry xml:lang="en">4.0-CURRENT after fixing a hole
	    in <citerefentry><refentrytitle>jail</refentrytitle><manvolnum>2</manvolnum></citerefentry></entry>
	</row>

	<row>
	  <entry>400011</entry>
	  <entry>September 29, 1999</entry>
	  <entry xml:lang="en">4.0-CURRENT after the <literal>sigset_t</literal>
	    datatype change</entry>
	</row>

	<row>
	  <entry>400012</entry>
	  <entry>November 15, 1999</entry>
	  <entry xml:lang="en">4.0-CURRENT after the cutover to the GCC 2.95.2
	    compiler</entry>
	</row>

	<row>
	  <entry>400013</entry>
	  <entry>December 4, 1999</entry>
	  <entry xml:lang="en">4.0-CURRENT after adding pluggable linux-mode
	    ioctl handlers</entry>
	</row>

	<row>
	  <entry>400014</entry>
	  <entry>January 18, 2000</entry>
	  <entry xml:lang="en">4.0-CURRENT after importing OpenSSL</entry>
	</row>

	<row>
	  <entry>400015</entry>
	  <entry>January 27, 2000</entry>
	  <entry xml:lang="en">4.0-CURRENT after the C++ ABI change in GCC
	    2.95.2 from -fvtable-thunks to -fno-vtable-thunks by
	    default</entry>
	</row>

	<row>
	  <entry>400016</entry>
	  <entry>February 27, 2000</entry>
	  <entry xml:lang="en">4.0-CURRENT after importing OpenSSH</entry>
	</row>

	<row>
	  <entry>400017</entry>
	  <entry>March 13, 2000</entry>
	  <entry>4.0-RELEASE</entry>
	</row>

	<row>
	  <entry>400018</entry>
	  <entry>March 17, 2000</entry>
	  <entry xml:lang="en">4.0-STABLE after 4.0-RELEASE</entry>
	</row>

	<row>
	  <entry>400019</entry>
	  <entry>May 5, 2000</entry>
	  <entry xml:lang="en">4.0-STABLE after the introduction of delayed
	    checksums.</entry>
	</row>

	<row>
	  <entry>400020</entry>
	  <entry>June 4, 2000</entry>
	  <entry xml:lang="en">4.0-STABLE after merging libxpg4 code into
	    libc.</entry>
	</row>

	<row>
	  <entry>400021</entry>
	  <entry>July 8, 2000</entry>
	  <entry xml:lang="en">4.0-STABLE after upgrading Binutils to 2.10.0,
	    ELF branding changes, and tcsh in the base
	    system.</entry>
	</row>

	<row>
	  <entry>410000</entry>
	  <entry>July 14, 2000</entry>
	  <entry>4.1-RELEASE</entry>
	</row>

	<row>
	  <entry>410001</entry>
	  <entry>July 29, 2000</entry>
	  <entry xml:lang="en">4.1-STABLE after 4.1-RELEASE</entry>
	</row>

	<row>
	  <entry>410002</entry>
	  <entry>September 16, 2000</entry>
	  <entry xml:lang="en">4.1-STABLE after <citerefentry><refentrytitle>setproctitle</refentrytitle><manvolnum>3</manvolnum></citerefentry> moved from
	    libutil to libc.</entry>
	</row>

	<row>
	  <entry>411000</entry>
	  <entry>September 25, 2000</entry>
	  <entry>4.1.1-RELEASE</entry>
	</row>

	<row>
	  <entry>411001</entry>
	  <entry/>
	  <entry xml:lang="en">4.1.1-STABLE after 4.1.1-RELEASE</entry>
	</row>

	<row>
	  <entry>420000</entry>
	  <entry>October 31, 2000</entry>
	  <entry>4.2-RELEASE</entry>
	</row>

	<row>
	  <entry>420001</entry>
	  <entry>January 10, 2001</entry>
	  <entry xml:lang="en">4.2-STABLE after combining libgcc.a and
	    libgcc_r.a, and associated GCC linkage
	    changes.</entry>
	</row>

	<row>
	  <entry>430000</entry>
	  <entry>March 6, 2001</entry>
	  <entry>4.3-RELEASE</entry>
	</row>

	<row>
	  <entry>430001</entry>
	  <entry>May 18, 2001</entry>
	  <entry xml:lang="en">4.3-STABLE after wint_t introduction.</entry>
	</row>

	<row>
	  <entry>430002</entry>
	  <entry>July 22, 2001</entry>
	  <entry xml:lang="en">4.3-STABLE after PCI powerstate API
	    merge.</entry>
	</row>

	<row>
	  <entry>440000</entry>
	  <entry>August 1, 2001</entry>
	  <entry>4.4-RELEASE</entry>
	</row>

	<row>
	  <entry>440001</entry>
	  <entry>October 23, 2001</entry>
	  <entry xml:lang="en">4.4-STABLE after d_thread_t introduction.</entry>
	</row>

	<row>
	  <entry>440002</entry>
	  <entry>November 4, 2001</entry>
	  <entry xml:lang="en">4.4-STABLE after mount structure changes (affects
	    filesystem klds).</entry>
	</row>

	<row>
	  <entry>440003</entry>
	  <entry>December 18, 2001</entry>
	  <entry xml:lang="en">4.4-STABLE after the userland components of smbfs
	    were imported.</entry>
	</row>

	<row>
	  <entry>450000</entry>
	  <entry>December 20, 2001</entry>
	  <entry>4.5-RELEASE</entry>
	</row>

	<row>
	  <entry>450001</entry>
	  <entry>February 24, 2002</entry>
	  <entry xml:lang="en">4.5-STABLE after the usb structure element
	    rename.</entry>
	</row>

	<row>
	  <entry>450004</entry>
	  <entry>April 16, 2002</entry>
	  <entry xml:lang="en">4.5-STABLE after the
	    <literal>sendmail_enable</literal> <citerefentry><refentrytitle>rc.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>
	    variable was made to take the value
	    <literal>NONE</literal>.</entry>
	</row>

	<row>
	  <entry>450005</entry>
	  <entry>April 27, 2002</entry>
	  <entry xml:lang="en">4.5-STABLE after moving to XFree86 4 by default
	    for package builds.</entry>
	</row>

	<row>
	  <entry>450006</entry>
	  <entry>May 1, 2002</entry>
	  <entry xml:lang="en">4.5-STABLE after accept filtering was fixed so
	    that is no longer susceptible to an easy DoS.</entry>
	</row>

	<row>
	  <entry>460000</entry>
	  <entry>June 21, 2002</entry>
	  <entry>4.6-RELEASE</entry>
	</row>

	<row>
	  <entry>460001</entry>
	  <entry>June 21, 2002</entry>
	  <entry xml:lang="en">4.6-STABLE <citerefentry><refentrytitle>sendfile</refentrytitle><manvolnum>2</manvolnum></citerefentry> fixed to comply with
	    documentation, not to count any headers sent against
	    the amount of data to be sent from the file.</entry>
	</row>

	<row>
	  <entry>460002</entry>
	  <entry>July 19, 2002</entry>
	  <entry>4.6.2-RELEASE</entry>
	</row>

	<row>
	  <entry>460100</entry>
	  <entry>June 26, 2002</entry>
	  <entry>4.6-STABLE</entry>
	</row>

	<row>
	  <entry>460101</entry>
	  <entry>June 26, 2002</entry>
	  <entry xml:lang="en">4.6-STABLE after MFC of `sed -i'.</entry>
	</row>

	<row>
	  <entry>460102</entry>
	  <entry>September 1, 2002</entry>
	  <entry xml:lang="en">4.6-STABLE after MFC of many new pkg_install
	    features from the HEAD.</entry>
	</row>

	<row>
	  <entry>470000</entry>
	  <entry>October 8, 2002</entry>
	  <entry>4.7-RELEASE</entry>
	</row>

	<row>
	  <entry>470100</entry>
	  <entry>October 9, 2002</entry>
	  <entry>4.7-STABLE</entry>
	</row>

	<row>
	  <entry>470101</entry>
	  <entry>November 10, 2002</entry>
	  <entry xml:lang="en">Start generated __std{in,out,err}p references
	    rather than __sF.  This changes std{in,out,err} from a
	    compile time expression to a runtime one.</entry>
	</row>

	<row>
	  <entry>470102</entry>
	  <entry>January 23, 2003</entry>
	  <entry xml:lang="en">4.7-STABLE after MFC of mbuf changes to replace
	    m_aux mbufs by m_tag's</entry>
	</row>

	<row>
	  <entry>470103</entry>
	  <entry>February 14, 2003</entry>
	  <entry xml:lang="en">4.7-STABLE gets OpenSSL 0.9.7</entry>
	</row>

	<row>
	  <entry>480000</entry>
	  <entry>March 30, 2003</entry>
	  <entry> </entry>
	</row>

	<row>
	  <entry>480100</entry>
	  <entry>April 5, 2003</entry>
	  <entry>4.8-STABLE</entry>
	</row>

	<row>
	  <entry>480101</entry>
	  <entry>May 22, 2003</entry>
	  <entry xml:lang="en">4.8-STABLE after <citerefentry><refentrytitle>realpath</refentrytitle><manvolnum>3</manvolnum></citerefentry> has been made
	    thread-safe</entry>
	</row>

	<row>
	  <entry>480102</entry>
	  <entry>August 10, 2003</entry>
	  <entry xml:lang="en">4.8-STABLE 3ware API changes to twe.</entry>
	</row>

	<row>
	  <entry>490000</entry>
	  <entry>October 27, 2003</entry>
	  <entry>4.9-RELEASE</entry>
	</row>

	<row>
	  <entry>490100</entry>
	  <entry>October 27, 2003</entry>
	  <entry>4.9-STABLE</entry>
	</row>

	<row>
	  <entry>490101</entry>
	  <entry>January 8, 2004</entry>
	  <entry xml:lang="en">4.9-STABLE after e_sid was added to struct
	    kinfo_eproc.</entry>
	</row>

	<row>
	  <entry>490102</entry>
	  <entry>February 4, 2004</entry>
	  <entry xml:lang="en">4.9-STABLE after MFC of libmap functionality
	    for rtld.</entry>
	</row>

	<row>
	  <entry>491000</entry>
	  <entry>May 25, 2004</entry>
	  <entry>4.10-RELEASE</entry>
	</row>

	<row>
	  <entry>491100</entry>
	  <entry>June 1, 2004</entry>
	  <entry>4.10-STABLE</entry>
	</row>

	<row>
	  <entry>491101</entry>
	  <entry>August 11, 2004</entry>
	  <entry xml:lang="en">4.10-STABLE after MFC of revision 20040629 of
	    the package tools</entry>
	</row>

	<row>
	  <entry>491102</entry>
	  <entry xml:lang="en">November 16, 2004</entry>
	  <entry xml:lang="en">4.10-STABLE after VM fix dealing with unwiring
	    of fictitious pages</entry>
	</row>

	<row>
	  <entry>492000</entry>
	  <entry>December 17, 2004</entry>
	  <entry>4.11-RELEASE</entry>
	</row>

	<row>
	  <entry>492100</entry>
	  <entry>December 17, 2004</entry>
	  <entry>4.11-STABLE</entry>
	</row>

	<row>
	  <entry>492101</entry>
	  <entry>April 18, 2006</entry>
	  <entry xml:lang="en">4.11-STABLE after adding libdata/ldconfig
	    directories to mtree files.</entry>
	</row>

	<row>
	  <entry>500000</entry>
	  <entry>March 13, 2000</entry>
	  <entry>5.0-CURRENT</entry>
	</row>

	<row>
	  <entry>500001</entry>
	  <entry>April 18, 2000</entry>
	  <entry xml:lang="en">5.0-CURRENT after adding addition ELF header
	    fields, and changing our ELF binary branding
	    method.</entry>
	</row>

	<row>
	  <entry>500002</entry>
	  <entry>May 2, 2000</entry>
	  <entry xml:lang="en">5.0-CURRENT after kld metadata changes.</entry>
	</row>

	<row>
	  <entry>500003</entry>
	  <entry>May 18, 2000</entry>
	  <entry xml:lang="en">5.0-CURRENT after buf/bio changes.</entry>
	</row>

	<row>
	  <entry>500004</entry>
	  <entry>May 26, 2000</entry>
	  <entry xml:lang="en">5.0-CURRENT after binutils upgrade.</entry>
	</row>

	<row>
	  <entry>500005</entry>
	  <entry>June 3, 2000</entry>
	  <entry xml:lang="en">5.0-CURRENT after merging libxpg4 code into
	    libc and after TASKQ interface introduction.</entry>
	</row>

	<row>
	  <entry>500006</entry>
	  <entry>June 10, 2000</entry>
	  <entry xml:lang="en">5.0-CURRENT after the addition of AGP
	    interfaces.</entry>
	</row>

	<row>
	  <entry>500007</entry>
	  <entry>June 29, 2000</entry>
	  <entry xml:lang="en">5.0-CURRENT after Perl upgrade to 5.6.0</entry>
	</row>

	<row>
	  <entry>500008</entry>
	  <entry>July 7, 2000</entry>
	  <entry xml:lang="en">5.0-CURRENT after the update of KAME code to
	    2000/07 sources.</entry>
	</row>

	<row>
	  <entry>500009</entry>
	  <entry>July 14, 2000</entry>
	  <entry xml:lang="en">5.0-CURRENT after ether_ifattach() and
	    ether_ifdetach() changes.</entry>
	</row>

	<row>
	  <entry>500010</entry>
	  <entry>July 16, 2000</entry>
	  <entry xml:lang="en">5.0-CURRENT after changing mtree defaults
	    back to original variant, adding -L to follow
	    symlinks.</entry>
	</row>

	<row>
	  <entry>500011</entry>
	  <entry>July 18, 2000</entry>
	  <entry xml:lang="en">5.0-CURRENT after kqueue API changed.</entry>
	</row>

	<row>
	  <entry>500012</entry>
	  <entry>September 2, 2000</entry>
	  <entry xml:lang="en">5.0-CURRENT after <citerefentry><refentrytitle>setproctitle</refentrytitle><manvolnum>3</manvolnum></citerefentry> moved from
	    libutil to libc.</entry>
	</row>

	<row>
	  <entry>500013</entry>
	  <entry>September 10, 2000</entry>
	  <entry xml:lang="en">5.0-CURRENT after the first SMPng commit.</entry>
	</row>

	<row>
	  <entry>500014</entry>
	  <entry>January 4, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after &lt;sys/select.h&gt; moved to
	    &lt;sys/selinfo.h&gt;.</entry>
	</row>

	<row>
	  <entry>500015</entry>
	  <entry>January 10, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after combining libgcc.a and
	    libgcc_r.a, and associated GCC linkage
	    changes.</entry>
	</row>

	<row>
	  <entry>500016</entry>
	  <entry>January 24, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after change allowing libc and libc_r
	    to be linked together, deprecating -pthread
	    option.</entry>
	</row>

	<row>
	  <entry>500017</entry>
	  <entry>February 18, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after switch from struct ucred to
	    struct xucred to stabilize kernel-exported API for
	    mountd et al.</entry>
	</row>

	<row>
	  <entry>500018</entry>
	  <entry>February 24, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after addition of CPUTYPE make
	    variable for controlling CPU-specific
	    optimizations.</entry>
	</row>

	<row>
	  <entry>500019</entry>
	  <entry>June 9, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after moving machine/ioctl_fd.h to
	    sys/fdcio.h</entry>
	</row>

	<row>
	  <entry>500020</entry>
	  <entry>June 15, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after locale names renaming.</entry>
	</row>

	<row>
	  <entry>500021</entry>
	  <entry>June 22, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after Bzip2 import.
	    Also signifies removal of S/Key.</entry>
	</row>

	<row>
	  <entry>500022</entry>
	  <entry>July 12, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after SSE support.</entry>
	</row>

	<row>
	  <entry>500023</entry>
	  <entry>September 14, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after KSE Milestone 2.</entry>
	</row>

	<row>
	  <entry>500024</entry>
	  <entry>October 1, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after d_thread_t,
	    and moving UUCP to ports.</entry>
	</row>

	<row>
	  <entry>500025</entry>
	  <entry>October 4, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after ABI change for descriptor
	    and creds passing on 64 bit platforms.</entry>
	</row>

	<row>
	  <entry>500026</entry>
	  <entry>October 9, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after moving to XFree86 4 by default
	    for package builds, and after the new libc strnstr()
	    function was added.</entry>
	</row>

	<row>
	  <entry>500027</entry>
	  <entry>October 10, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after the new libc strcasestr()
	    function was added.</entry>
	</row>

	<row>
	  <entry>500028</entry>
	  <entry>December 14, 2001</entry>
	  <entry xml:lang="en">5.0-CURRENT after the userland components of
	    smbfs were imported.</entry>
	</row>

	<row>
	  <entry xml:lang="en">(not changed)</entry>
	  <entry/>
	  <entry xml:lang="en">5.0-CURRENT after the new C99 specific-width
	    integer types were added.</entry>
	</row>

	<row>
	  <entry>500029</entry>
	  <entry>January 29, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT after a change was made in the return
	    value of <citerefentry><refentrytitle>sendfile</refentrytitle><manvolnum>2</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry>500030</entry>
	  <entry>February 15, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT after the introduction of the
	    type <literal>fflags_t</literal>, which is the
	    appropriate size for file flags.</entry>
	</row>

	<row>
	  <entry>500031</entry>
	  <entry>February 24, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT after the usb structure element
	    rename.</entry>
	</row>

	<row>
	  <entry>500032</entry>
	  <entry>March 16, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT after the introduction of
	    Perl 5.6.1.</entry>
	</row>

	<row>
	  <entry>500033</entry>
	  <entry>April 3, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT after the
	    <literal>sendmail_enable</literal> <citerefentry><refentrytitle>rc.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>
	    variable was made to take the value
	    <literal>NONE</literal>.</entry>
	</row>

	<row>
	  <entry>500034</entry>
	  <entry>April 30, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT after mtx_init() grew a third
	    argument.</entry>
	</row>

	<row>
	  <entry>500035</entry>
	  <entry>May 13, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT with Gcc 3.1.</entry>
	</row>

	<row>
	  <entry>500036</entry>
	  <entry>May 17, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT without Perl in /usr/src</entry>
	</row>

	<row>
	  <entry>500037</entry>
	  <entry>May 29, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT after the addition of
	    <citerefentry><refentrytitle>dlfunc</refentrytitle><manvolnum>3</manvolnum></citerefentry></entry>
	</row>

	<row>
	  <entry>500038</entry>
	  <entry>July 24, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT after the types of some struct
	    sockbuf members were changed and the structure was
	    reordered.</entry>
	</row>

	<row>
	  <entry>500039</entry>
	  <entry>September 1, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT after GCC 3.2.1 import.
	    Also after headers stopped using
	    _BSD_FOO_T_ and started using _FOO_T_DECLARED.
	    This value can also be used as a conservative
	    estimate of the start of <citerefentry><refentrytitle>bzip2</refentrytitle><manvolnum>1</manvolnum></citerefentry> package
	    support.</entry>
	</row>

	<row>
	  <entry>500040</entry>
	  <entry>September 20, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT after various changes to disk
	    functions were made in the name of removing dependency
	    on disklabel structure internals.</entry>
	</row>

	<row>
	  <entry>500041</entry>
	  <entry>October 1, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT after the addition of
	    <citerefentry><refentrytitle>getopt_long</refentrytitle><manvolnum>3</manvolnum></citerefentry> to libc.</entry>
	</row>

	<row>
	  <entry>500042</entry>
	  <entry>October 15, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT after Binutils 2.13 upgrade, which
	    included new FreeBSD emulation, vec, and output
	    format.</entry>
	</row>

	<row>
	  <entry>500043</entry>
	  <entry>November 1, 2002</entry>
	  <entry xml:lang="en">5.0-CURRENT after adding weak pthread_XXX stubs
	    to libc, obsoleting libXThrStub.so.
	    5.0-RELEASE.</entry>
	</row>

	<row>
	  <entry>500100</entry>
	  <entry>January 17, 2003</entry>
	  <entry xml:lang="en">5.0-CURRENT after branching for
	    RELENG_5_0</entry>
	</row>

	<row>
	  <entry>500101</entry>
	  <entry>February 19, 2003</entry>
	  <entry xml:lang="en">&lt;sys/dkstat.h&gt; is empty.  Do not include
	    it.</entry>
	</row>

	<row>
	  <entry>500102</entry>
	  <entry>February 25, 2003</entry>
	  <entry xml:lang="en">5.0-CURRENT after the d_mmap_t interface
	    change.</entry>
	</row>

	<row>
	  <entry>500103</entry>
	  <entry>February 26, 2003</entry>
	  <entry xml:lang="en">5.0-CURRENT after taskqueue_swi changed to run
	    without Giant, and taskqueue_swi_giant added to run
	    with Giant.</entry>
	</row>

	<row>
	  <entry>500104</entry>
	  <entry>February 27, 2003</entry>
	  <entry xml:lang="en">cdevsw_add() and cdevsw_remove() no
	    longer exists.
	    Appearance of MAJOR_AUTO allocation facility.</entry>
	</row>

	<row>
	  <entry>500105</entry>
	  <entry>March 4, 2003</entry>
	  <entry xml:lang="en">5.0-CURRENT after new cdevsw initialization
	    method.</entry>
	</row>

	<row>
	  <entry>500106</entry>
	  <entry>March 8, 2003</entry>
	  <entry xml:lang="en">devstat_add_entry() has been replaced by
	    devstat_new_entry()</entry>
	</row>

	<row>
	  <entry>500107</entry>
	  <entry>March 15, 2003</entry>
	  <entry xml:lang="en">Devstat interface change; see sys/sys/param.h
	    1.149</entry>
	</row>

	<row>
	  <entry>500108</entry>
	  <entry>March 15, 2003</entry>
	  <entry xml:lang="en">Token-Ring interface changes.</entry>
	</row>

	<row>
	  <entry>500109</entry>
	  <entry>March 25, 2003</entry>
	  <entry xml:lang="en">Addition of vm_paddr_t.</entry>
	</row>

	<row>
	  <entry>500110</entry>
	  <entry>March 28, 2003</entry>
	  <entry xml:lang="en">5.0-CURRENT after <citerefentry><refentrytitle>realpath</refentrytitle><manvolnum>3</manvolnum></citerefentry> has been made
	    thread-safe</entry>
	</row>

	<row>
	  <entry>500111</entry>
	  <entry>April 9, 2003</entry>
	  <entry xml:lang="en">5.0-CURRENT after <citerefentry><refentrytitle>usbhid</refentrytitle><manvolnum>3</manvolnum></citerefentry> has been synced
	    with NetBSD</entry>
	</row>

	<row>
	  <entry>500112</entry>
	  <entry>April 17, 2003</entry>
	  <entry xml:lang="en">5.0-CURRENT after new NSS implementation
	    and addition of POSIX.1 getpw*_r, getgr*_r
	    functions</entry>
	</row>

	<row>
	  <entry>500113</entry>
	  <entry>May 2, 2003</entry>
	  <entry xml:lang="en">5.0-CURRENT after removal of the old rc
	    system.</entry>
	</row>

	<row>
	  <entry>501000</entry>
	  <entry>June 4, 2003</entry>
	  <entry>5.1-RELEASE.</entry>
	</row>

	<row>
	  <entry>501100</entry>
	  <entry>June 2, 2003</entry>
	  <entry xml:lang="en">5.1-CURRENT after branching for
	    RELENG_5_1.</entry>
	</row>

	<row>
	  <entry>501101</entry>
	  <entry>June 29, 2003</entry>
	  <entry xml:lang="en">5.1-CURRENT after correcting the semantics of
	    sigtimedwait(2) and sigwaitinfo(2).</entry>
	</row>

	<row>
	  <entry>501102</entry>
	  <entry>July 3, 2003</entry>
	  <entry xml:lang="en">5.1-CURRENT after adding the lockfunc and
	    lockfuncarg fields to
	    <citerefentry><refentrytitle>bus_dma_tag_create</refentrytitle><manvolnum>9</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry xml:lang="en">501103</entry>
	  <entry>July 31, 2003</entry>
	  <entry xml:lang="en">5.1-CURRENT after GCC 3.3.1-pre 20030711 snapshot
	    integration.</entry>
	</row>

	<row>
	  <entry>501104</entry>
	  <entry>August 5, 2003</entry>
	  <entry xml:lang="en">5.1-CURRENT 3ware API changes to twe.</entry>
	</row>

	<row>
	  <entry>501105</entry>
	  <entry>August 17, 2003</entry>
	  <entry xml:lang="en">5.1-CURRENT dynamically-linked /bin and /sbin
	    support and movement of libraries to /lib.</entry>
	</row>

	<row>
	  <entry>501106</entry>
	  <entry>September 8, 2003</entry>
	  <entry xml:lang="en">5.1-CURRENT after adding kernel support for
	    Coda 6.x.</entry>
	</row>

	<row>
	  <entry>501107</entry>
	  <entry>September 17, 2003</entry>
	  <entry xml:lang="en">5.1-CURRENT after 16550 UART constants moved from
	    <filename>&lt;dev/sio/sioreg.h&gt;</filename> to
	    <filename>&lt;dev/ic/ns16550.h&gt;</filename>.
	    Also when libmap functionality was unconditionally
	    supported by rtld.</entry>
	</row>

	<row>
	  <entry>501108</entry>
	  <entry>September 23, 2003</entry>
	  <entry xml:lang="en">5.1-CURRENT after PFIL_HOOKS API update</entry>
	</row>

	<row>
	  <entry>501109</entry>
	  <entry>September 27, 2003</entry>
	  <entry xml:lang="en">5.1-CURRENT after adding kiconv(3)</entry>
	</row>

	<row>
	  <entry>501110</entry>
	  <entry>September 28, 2003</entry>
	  <entry xml:lang="en">5.1-CURRENT after changing default operations
	    for open and close in cdevsw</entry>
	</row>

	<row>
	  <entry>501111</entry>
	  <entry>October 16, 2003</entry>
	  <entry xml:lang="en">5.1-CURRENT after changed layout of
	    cdevsw</entry>
	</row>

	<row>
	  <entry>501112</entry>
	  <entry>October 16, 2003</entry>
	  <entry xml:lang="en"> 5.1-CURRENT after adding kobj multiple
	    inheritance</entry>
	</row>

	<row>
	  <entry>501113</entry>
	  <entry>October 31, 2003</entry>
	  <entry xml:lang="en"> 5.1-CURRENT after the if_xname change in
	    struct ifnet</entry>
	</row>

	<row>
	  <entry>501114</entry>
	  <entry>November 16, 2003</entry>
	  <entry xml:lang="en"> 5.1-CURRENT after changing /bin and /sbin to
	    be dynamically linked</entry>
	</row>

	<row>
	  <entry>502000</entry>
	  <entry>December 7, 2003</entry>
	  <entry>5.2-RELEASE</entry>
	</row>

	<row>
	  <entry>502010</entry>
	  <entry>February 23, 2004</entry>
	  <entry>5.2.1-RELEASE</entry>
	</row>

	<row>
	  <entry>502100</entry>
	  <entry>December 7, 2003</entry>
	  <entry xml:lang="en">5.2-CURRENT after branching for
	    RELENG_5_2</entry>
	</row>

	<row>
	  <entry>502101</entry>
	  <entry>December 19, 2003</entry>
	  <entry xml:lang="en">5.2-CURRENT after __cxa_atexit/__cxa_finalize
	    functions were added to libc.</entry>
	</row>

	<row>
	  <entry>502102</entry>
	  <entry>January 30, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after change of default thread
	    library from libc_r to libpthread.</entry>
	</row>

	<row>
	  <entry>502103</entry>
	  <entry>February 21, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after device driver API
	    megapatch.</entry>
	</row>

	<row>
	  <entry>502104</entry>
	  <entry>February 25, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after getopt_long_only()
	    addition.</entry>
	</row>

	<row>
	  <entry>502105</entry>
	  <entry>March 5, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after NULL is made into ((void *)0)
	    for C, creating more warnings.</entry>
	</row>

	<row>
	  <entry>502106</entry>
	  <entry>March 8, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after pf is linked to the build and
	    install.</entry>
	</row>

	<row>
	  <entry>502107</entry>
	  <entry>March 10, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after time_t is changed to a
	    64-bit value on sparc64.</entry>
	</row>

	<row>
	  <entry>502108</entry>
	  <entry>March 12, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after Intel C/C++ compiler support in
	    some headers and execve(2) changes to be more strictly
	    conforming to POSIX.</entry>
	</row>

	<row>
	  <entry>502109</entry>
	  <entry>March 22, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after the introduction of the
	    bus_alloc_resource_any API</entry>
	</row>

	<row>
	  <entry>502110</entry>
	  <entry>March 27, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after the addition of UTF-8
	    locales</entry>
	</row>

	<row>
	  <entry>502111</entry>
	  <entry xml:lang="en">April 11, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after the removal of the getvfsent(3)
	    API</entry>
	</row>

	<row>
	  <entry>502112</entry>
	  <entry>April 13, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after the addition of the .warning
	    directive for make.</entry>
	</row>

	<row>
	  <entry>502113</entry>
	  <entry>June 4, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after ttyioctl() was made mandatory
	    for serial drivers.</entry>
	</row>

	<row>
	  <entry>502114</entry>
	  <entry>June 13, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after import of the ALTQ
	    framework.</entry>
	</row>

	<row>
	  <entry>502115</entry>
	  <entry>June 14, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after changing sema_timedwait(9) to
	    return 0 on success and a non-zero error code on
	    failure.</entry>
	</row>

	<row>
	  <entry>502116</entry>
	  <entry>June 16, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after changing kernel dev_t to be
	    pointer to struct cdev *.</entry>
	</row>

	<row>
	  <entry>502117</entry>
	  <entry>June 17, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after changing kernel udev_t to
	    dev_t.</entry>
	</row>

	<row>
	  <entry>502118</entry>
	  <entry>June 17, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after adding support for
	    CLOCK_VIRTUAL and CLOCK_PROF to clock_gettime(2) and
	    clock_getres(2).</entry>
	</row>

	<row>
	  <entry>502119</entry>
	  <entry>June 22, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after changing network interface
	    cloning overhaul.</entry>
	</row>

	<row>
	  <entry>502120</entry>
	  <entry>July 2, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after the update of the package tools
	    to revision 20040629.</entry>
	</row>

	<row>
	  <entry>502121</entry>
	  <entry>July 9, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after marking Bluetooth code as
	    non-i386 specific.</entry>
	</row>

	<row>
	  <entry>502122</entry>
	  <entry>July 11, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after the introduction of the KDB
	    debugger framework, the conversion of DDB into a
	    backend and the introduction of the GDB
	    backend.</entry>
	</row>

	<row>
	  <entry>502123</entry>
	  <entry>July 12, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after change to make VFS_ROOT take a
	    struct thread argument as does vflush.  Struct
	    kinfo_proc now has a user data pointer.  The switch of
	    the default X implementation to
	    <literal>xorg</literal> was also made at this
	    time.</entry>
	</row>

	<row>
	  <entry>502124</entry>
	  <entry>July 24, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after the change to separate the way
	    ports rc.d and legacy scripts are started.</entry>
	</row>

	<row>
	  <entry>502125</entry>
	  <entry>July 28, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after the backout of the previous
	    change.</entry>
	</row>

	<row>
	  <entry>502126</entry>
	  <entry>July 31, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after the removal of
	    kmem_alloc_pageable() and the import of gcc
	    3.4.2.</entry>
	</row>

	<row>
	  <entry>502127</entry>
	  <entry>August 2, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after changing the UMA kernel
	    API to allow ctors/inits to fail.</entry>
	</row>

	<row>
	  <entry>502128</entry>
	  <entry>August 8, 2004</entry>
	  <entry xml:lang="en">5.2-CURRENT after the change of the
	    vfs_mount signature as well as global replacement of
	    PRISON_ROOT with SUSER_ALLOWJAIL for the suser(9)
	    API.</entry>
	</row>

	<row>
	  <entry>503000</entry>
	  <entry>August 23, 2004</entry>
	  <entry xml:lang="en">5.3-BETA/RC before the pfil API change</entry>
	</row>

	<row>
	  <entry>503001</entry>
	  <entry>September 22, 2004</entry>
	  <entry>5.3-RELEASE</entry>
	</row>

	<row>
	  <entry>503100</entry>
	  <entry>October 16, 2004</entry>
	  <entry xml:lang="en">5.3-STABLE after branching for RELENG_5_3</entry>
	</row>

	<row>
	  <entry>503101</entry>
	  <entry>December 3, 2004</entry>
	  <entry xml:lang="en">5.3-STABLE after addition of glibc style
	    <citerefentry><refentrytitle>strftime</refentrytitle><manvolnum>3</manvolnum></citerefentry> padding options.</entry>
	</row>

	<row>
	  <entry>503102</entry>
	  <entry>February 13, 2005</entry>
	  <entry xml:lang="en">5.3-STABLE after OpenBSD's nc(1) import
	    MFC.</entry>
	</row>

	<row>
	  <entry>503103</entry>
	  <entry>February 27, 2005</entry>
	  <entry xml:lang="en">5.4-PRERELEASE after the MFC of the fixes in
	    <filename>&lt;src/include/stdbool.h&gt;</filename> and
	    <filename>&lt;src/sys/i386/include/_types.h&gt;</filename>
	    for using the GCC-compatibility of the Intel C/C++
	    compiler.</entry>
	</row>

	<row>
	  <entry>503104</entry>
	  <entry>February 28, 2005</entry>
	  <entry xml:lang="en">5.4-PRERELEASE after the MFC of the change of
	    ifi_epoch from wall clock time to uptime.</entry>
	</row>

	<row>
	  <entry>503105</entry>
	  <entry>March 2, 2005</entry>
	  <entry xml:lang="en">5.4-PRERELEASE after the MFC of the fix of
	    EOVERFLOW check in vswprintf(3).</entry>
	</row>

	<row>
	  <entry>504000</entry>
	  <entry>April 3, 2005</entry>
	  <entry>5.4-RELEASE.</entry>
	</row>

	<row>
	  <entry>504100</entry>
	  <entry>April 3, 2005</entry>
	  <entry xml:lang="en">5.4-STABLE after branching for RELENG_5_4</entry>
	</row>

	<row>
	  <entry>504101</entry>
	  <entry>May 11, 2005</entry>
	  <entry xml:lang="en">5.4-STABLE after increasing the default
	    thread stacksizes</entry>
	</row>

	<row>
	  <entry>504102</entry>
	  <entry>June 24, 2005</entry>
	  <entry xml:lang="en">5.4-STABLE after the addition of sha256</entry>
	</row>

	<row>
	  <entry>504103</entry>
	  <entry>October 3, 2005</entry>
	  <entry xml:lang="en">5.4-STABLE after the MFC of if_bridge</entry>
	</row>

	<row>
	  <entry>504104</entry>
	  <entry>November 13, 2005</entry>
	  <entry xml:lang="en">5.4-STABLE after the MFC of bsdiff and
	    portsnap</entry>
	</row>

	<row>
	  <entry>504105</entry>
	  <entry>January 17, 2006</entry>
	  <entry xml:lang="en">5.4-STABLE after MFC of ldconfig_local_dirs
	    change.</entry>
	</row>

	<row>
	  <entry>505000</entry>
	  <entry>May 12, 2006</entry>
	  <entry>5.5-RELEASE.</entry>
	</row>

	<row>
	  <entry>505100</entry>
	  <entry>May 12, 2006</entry>
	  <entry xml:lang="en">5.5-STABLE after branching for RELENG_5_5</entry>
	</row>

	<row>
	  <entry>600000</entry>
	  <entry>August 18, 2004</entry>
	  <entry>6.0-CURRENT</entry>
	</row>

	<row>
	  <entry>600001</entry>
	  <entry>August 27, 2004</entry>
	  <entry xml:lang="en">6.0-CURRENT after permanently enabling PFIL_HOOKS
	    in the kernel.</entry>
	</row>

	<row>
	  <entry>600002</entry>
	  <entry>August 30, 2004</entry>
	  <entry xml:lang="en">6.0-CURRENT after initial addition of
	    ifi_epoch to struct if_data.  Backed out after a
	    few days.  Do not use this value.</entry>
	</row>

	<row>
	  <entry>600003</entry>
	  <entry>September 8, 2004</entry>
	  <entry xml:lang="en">6.0-CURRENT after the re-addition of the
	    ifi_epoch member of struct if_data.</entry>
	</row>

	<row>
	  <entry>600004</entry>
	  <entry>September 29, 2004</entry>
	  <entry xml:lang="en">6.0-CURRENT after addition of the struct inpcb
	    argument to the pfil API.</entry>
	</row>

	<row>
	  <entry>600005</entry>
	  <entry>October 5, 2004</entry>
	  <entry xml:lang="en">6.0-CURRENT after addition of the "-d
	    DESTDIR" argument to newsyslog.</entry>
	</row>

	<row>
	  <entry>600006</entry>
	  <entry>November 4, 2004</entry>
	  <entry xml:lang="en">6.0-CURRENT after addition of glibc style
	    <citerefentry><refentrytitle>strftime</refentrytitle><manvolnum>3</manvolnum></citerefentry> padding options.</entry>
	</row>

	<row>
	  <entry>600007</entry>
	  <entry>December 12, 2004</entry>
	  <entry xml:lang="en">6.0-CURRENT after addition of 802.11 framework
	    updates.</entry>
	</row>

	<row>
	  <entry>600008</entry>
	  <entry>January 25, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after changes to VOP_*VOBJECT()
	    functions and introduction of MNTK_MPSAFE flag for
	    Giantfree filesystems.</entry>
	</row>

	<row>
	  <entry>600009</entry>
	  <entry>February 4, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after addition of the cpufreq
	    framework and drivers.</entry>
	</row>

	<row>
	  <entry>600010</entry>
	  <entry>February 6, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after importing OpenBSD's
	    nc(1).</entry>
	</row>

	<row>
	  <entry>600011</entry>
	  <entry>February 12, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after removing semblance of SVID2
	    <literal>matherr()</literal> support.</entry>
	</row>

	<row>
	  <entry>600012</entry>
	  <entry>February 15, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after increase of default thread
	    stacks' size.</entry>
	</row>

	<row>
	  <entry>600013</entry>
	  <entry>February 19, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after fixes in
	    <filename>&lt;src/include/stdbool.h&gt;</filename> and
	    <filename>&lt;src/sys/i386/include/_types.h&gt;</filename>
	    for using the GCC-compatibility of the Intel C/C++
	    compiler.</entry>
	</row>

	<row>
	  <entry>600014</entry>
	  <entry>February 21, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after EOVERFLOW checks in
	    vswprintf(3) fixed.</entry>
	</row>

	<row>
	  <entry>600015</entry>
	  <entry>February 25, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after changing the struct if_data
	    member, ifi_epoch, from wall clock time to
	    uptime.</entry>
	</row>

	<row>
	  <entry>600016</entry>
	  <entry>February 26, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after LC_CTYPE disk format
	    changed.</entry>
	</row>

	<row>
	  <entry>600017</entry>
	  <entry>February 27, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after NLS catalogs disk format
	    changed.</entry>
	</row>

	<row>
	  <entry>600018</entry>
	  <entry>February 27, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after LC_COLLATE disk format
	    changed.</entry>
	</row>

	<row>
	  <entry>600019</entry>
	  <entry>February 28, 2005</entry>
	  <entry xml:lang="en">Installation of acpica includes into
	    /usr/include.</entry>
	</row>

	<row>
	  <entry>600020</entry>
	  <entry>March 9, 2005</entry>
	  <entry xml:lang="en">Addition of MSG_NOSIGNAL flag to send(2)
	    API.</entry>
	</row>

	<row>
	  <entry>600021</entry>
	  <entry>March 17, 2005</entry>
	  <entry xml:lang="en">Addition of fields to cdevsw</entry>
	</row>

	<row>
	  <entry>600022</entry>
	  <entry>March 21, 2005</entry>
	  <entry xml:lang="en">Removed gtar from base system.</entry>
	</row>

	<row>
	  <entry>600023</entry>
	  <entry>April 13, 2005</entry>
	  <entry xml:lang="en">LOCAL_CREDS, LOCAL_CONNWAIT socket options added
	    to unix(4).</entry>
	</row>

	<row>
	  <entry>600024</entry>
	  <entry>April 19, 2005</entry>
	  <entry xml:lang="en"><citerefentry><refentrytitle>hwpmc</refentrytitle><manvolnum>4</manvolnum></citerefentry> and related tools added to
	    6.0-CURRENT.</entry>
	</row>

	<row>
	  <entry>600025</entry>
	  <entry>April 26, 2005</entry>
	  <entry xml:lang="en">struct icmphdr added to 6.0-CURRENT.</entry>
	</row>

	<row>
	  <entry>600026</entry>
	  <entry>May 3, 2005</entry>
	  <entry xml:lang="en">pf updated to 3.7.</entry>
	</row>

	<row>
	  <entry>600027</entry>
	  <entry>May 6, 2005</entry>
	  <entry xml:lang="en">Kernel libalias and ng_nat introduced.</entry>
	</row>

	<row>
	  <entry>600028</entry>
	  <entry>May 13, 2005</entry>
	  <entry xml:lang="en">POSIX ttyname_r(3) made available through
	    unistd.h and libc.</entry>
	</row>

	<row>
	  <entry>600029</entry>
	  <entry>May 29, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after libpcap updated to v0.9.1 alpha
	    096.</entry>
	</row>

	<row>
	  <entry>600030</entry>
	  <entry>June 5, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after importing NetBSD's
	    if_bridge(4).</entry>
	</row>

	<row>
	  <entry>600031</entry>
	  <entry>June 10, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after struct ifnet was broken out
	    of the driver softcs.</entry>
	</row>

	<row>
	  <entry>600032</entry>
	  <entry>July 11, 2005</entry>
	  <entry xml:lang="en">6.0-CURRENT after the import of libpcap
	    v0.9.1.</entry>
	</row>

	<row>
	  <entry>600033</entry>
	  <entry>July 25, 2005</entry>
	  <entry xml:lang="en">6.0-STABLE after bump of all shared library
	    versions that had not been changed since
	    RELENG_5.</entry>
	</row>

	<row>
	  <entry>600034</entry>
	  <entry>August 13, 2005</entry>
	  <entry xml:lang="en">6.0-STABLE after credential argument is added to
	    dev_clone event handler.  6.0-RELEASE.</entry>
	</row>

	<row>
	  <entry>600100</entry>
	  <entry>November 1, 2005</entry>
	  <entry xml:lang="en">6.0-STABLE after 6.0-RELEASE</entry>
	</row>

	<row>
	  <entry>600101</entry>
	  <entry>December 21, 2005</entry>
	  <entry xml:lang="en">6.0-STABLE after incorporating scripts from the
	    local_startup directories into the base
	    <citerefentry><refentrytitle>rcorder</refentrytitle><manvolnum>8</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry>600102</entry>
	  <entry>December 30, 2005</entry>
	  <entry xml:lang="en">6.0-STABLE after updating the ELF types and
	    constants.</entry>
	</row>

	<row>
	  <entry>600103</entry>
	  <entry>January 15, 2006</entry>
	  <entry xml:lang="en">6.0-STABLE after MFC of pidfile(3) API.</entry>
	</row>

	<row>
	  <entry>600104</entry>
	  <entry>January 17, 2006</entry>
	  <entry xml:lang="en">6.0-STABLE after MFC of ldconfig_local_dirs
	    change.</entry>
	</row>

	<row>
	  <entry>600105</entry>
	  <entry>February 26, 2006</entry>
	  <entry xml:lang="en">6.0-STABLE after NLS catalog support of
	    csh(1).</entry>
	</row>

	<row>
	  <entry>601000</entry>
	  <entry>May 6, 2006</entry>
	  <entry>6.1-RELEASE</entry>
	</row>

	<row>
	  <entry>601100</entry>
	  <entry>May 6, 2006</entry>
	  <entry xml:lang="en">6.1-STABLE after 6.1-RELEASE.</entry>
	</row>

	<row>
	  <entry>601101</entry>
	  <entry>June 22, 2006</entry>
	  <entry xml:lang="en">6.1-STABLE after the import of csup.</entry>
	</row>

	<row>
	  <entry>601102</entry>
	  <entry>July 11, 2006</entry>
	  <entry xml:lang="en">6.1-STABLE after the iwi(4) update.</entry>
	</row>

	<row>
	  <entry>601103</entry>
	  <entry>July 17, 2006</entry>
	  <entry xml:lang="en">6.1-STABLE after the resolver update to
	    BIND9, and exposure of reentrant version of
	    netdb functions.</entry>
	</row>

	<row>
	  <entry>601104</entry>
	  <entry>August 8, 2006</entry>
	  <entry xml:lang="en">6.1-STABLE after DSO (dynamic shared
	    objects) support has been enabled in
	    OpenSSL.</entry>
	</row>

	<row>
	  <entry>601105</entry>
	  <entry>September 2, 2006</entry>
	  <entry xml:lang="en">6.1-STABLE after 802.11 fixups changed the
	    api for the IEEE80211_IOC_STA_INFO ioctl.</entry>
	</row>

	<row>
	  <entry>602000</entry>
	  <entry>November 15, 2006</entry>
	  <entry>6.2-RELEASE</entry>
	</row>

	<row>
	  <entry>602100</entry>
	  <entry>September 15, 2006</entry>
	  <entry xml:lang="en">6.2-STABLE after 6.2-RELEASE.</entry>
	</row>

	<row>
	  <entry>602101</entry>
	  <entry>December 12, 2006</entry>
	  <entry xml:lang="en">6.2-STABLE after the addition of Wi-Spy
	    quirk.</entry>
	</row>

	<row>
	  <entry>602102</entry>
	  <entry>December 28, 2006</entry>
	  <entry xml:lang="en">6.2-STABLE after pci_find_extcap()
	    addition.</entry>
	</row>

	<row>
	  <entry>602103</entry>
	  <entry>January 16, 2007</entry>
	  <entry xml:lang="en">6.2-STABLE after MFC of dlsym change to look for
	    a requested symbol both in specified dso and its
	    implicit dependencies.</entry>
	</row>

	<row>
	  <entry>602104</entry>
	  <entry>January 28, 2007</entry>
	  <entry xml:lang="en">6.2-STABLE after MFC of ng_deflate(4) and
	    ng_pred1(4) netgraph nodes and new compression and
	    encryption modes for ng_ppp(4) node.</entry>
	</row>

	<row>
	  <entry>602105</entry>
	  <entry>February 20, 2007</entry>
	  <entry xml:lang="en">6.2-STABLE after MFC of BSD licensed version of
	    <citerefentry><refentrytitle>gzip</refentrytitle><manvolnum>1</manvolnum></citerefentry> ported from NetBSD.</entry>
	</row>

	<row>
	  <entry>602106</entry>
	  <entry>March 31, 2007</entry>
	  <entry xml:lang="en">6.2-STABLE after MFC of PCI MSI and MSI-X
	    support.</entry>
	</row>

	<row>
	  <entry>602107</entry>
	  <entry>April 6, 2007</entry>
	  <entry xml:lang="en">6.2-STABLE after MFC of ncurses 5.6 and wide
	    character support.</entry>
	</row>

	<row>
	  <entry>602108</entry>
	  <entry>April 11, 2007</entry>
	  <entry xml:lang="en">6.2-STABLE after MFC of CAM 'SG' peripheral
	    device, which implements a subset of Linux SCSI SG
	    passthrough device API.</entry>
	</row>

	<row>
	  <entry>602109</entry>
	  <entry>April 17, 2007</entry>
	  <entry xml:lang="en">6.2-STABLE after MFC of readline 5.2 patchset
	    002.</entry>
	</row>

	<row>
	  <entry>602110</entry>
	  <entry>May 2, 2007</entry>
	  <entry xml:lang="en">6.2-STABLE after MFC of pmap_invalidate_cache(),
	    pmap_change_attr(), pmap_mapbios(),
	    pmap_mapdev_attr(), and pmap_unmapbios() for amd64 and
	    i386.</entry>
	</row>

	<row>
	  <entry>602111</entry>
	  <entry>June 11, 2007</entry>
	  <entry xml:lang="en">6.2-STABLE after MFC of BOP_BDFLUSH and caused
	    breakage of the filesystem modules KBI.</entry>
	</row>

	<row>
	  <entry>602112</entry>
	  <entry>September 21, 2007</entry>
	  <entry xml:lang="en">6.2-STABLE after libutil(3) MFC's.</entry>
	</row>

	<row>
	  <entry>602113</entry>
	  <entry>October 25, 2007</entry>
	  <entry xml:lang="en">6.2-STABLE after MFC of wide and single byte
	    ctype separation.  Newly compiled binary that
	    references to ctype.h may require a new symbol,
	    __mb_sb_limit, which is not available on older
	    systems.</entry>
	</row>

	<row>
	  <entry>602114</entry>
	  <entry>October 30, 2007</entry>
	  <entry xml:lang="en">6.2-STABLE after ctype ABI forward compatibility
	    restored.</entry>
	</row>

	<row>
	  <entry>602115</entry>
	  <entry>November 21, 2007</entry>
	  <entry xml:lang="en">6.2-STABLE after back out of wide and single byte
	    ctype separation.</entry>
	</row>

	<row>
	  <entry>603000</entry>
	  <entry>November 25, 2007</entry>
	  <entry>6.3-RELEASE</entry>
	</row>

	<row>
	  <entry>603100</entry>
	  <entry>November 25, 2007</entry>
	  <entry xml:lang="en">6.3-STABLE after 6.3-RELEASE.</entry>
	</row>

	<row>
	  <entry>603101</entry>
	  <entry>December 7, 2007</entry>
	  <entry xml:lang="en">6.3-STABLE after fixing
	    multibyte type support in bit macro.</entry>
	</row>

	<row>
	  <entry>603102</entry>
	  <entry>April 24, 2008</entry>
	  <entry xml:lang="en">6.3-STABLE after adding l_sysid to struct
	    flock.</entry>
	</row>

	<row>
	  <entry>603103</entry>
	  <entry>May 27, 2008</entry>
	  <entry xml:lang="en">6.3-STABLE after MFC of the
	    <function>memrchr</function> function.</entry>
	</row>

	<row>
	  <entry>603104</entry>
	  <entry>June 15, 2008</entry>
	  <entry xml:lang="en">6.3-STABLE after MFC of support for
	    <literal>:u</literal> variable modifier in
	    make(1).</entry>
	</row>

	<row>
	  <entry>604000</entry>
	  <entry>October 4, 2008</entry>
	  <entry>6.4-RELEASE</entry>
	</row>

	<row>
	  <entry>604100</entry>
	  <entry>October 4, 2008</entry>
	  <entry xml:lang="en">6.4-STABLE after 6.4-RELEASE.</entry>
	</row>

	<row>
	  <entry>700000</entry>
	  <entry>July 11, 2005</entry>
	  <entry>7.0-CURRENT.</entry>
	</row>

	<row>
	  <entry>700001</entry>
	  <entry>July 23, 2005</entry>
	  <entry xml:lang="en">7.0-CURRENT after bump of all shared library
	    versions that had not been changed since
	    RELENG_5.</entry>
	</row>

	<row>
	  <entry>700002</entry>
	  <entry>August 13, 2005</entry>
	  <entry xml:lang="en">7.0-CURRENT after credential argument is added to
	    dev_clone event handler.</entry>
	</row>

	<row>
	  <entry>700003</entry>
	  <entry>August 25, 2005</entry>
	  <entry xml:lang="en">7.0-CURRENT after memmem(3) is added to
	    libc.</entry>
	</row>

	<row>
	  <entry>700004</entry>
	  <entry>October 30, 2005</entry>
	  <entry xml:lang="en">7.0-CURRENT after solisten(9) kernel arguments
	    are modified to accept a backlog parameter.</entry>
	</row>

	<row>
	  <entry>700005</entry>
	  <entry>November 11, 2005</entry>
	  <entry xml:lang="en">7.0-CURRENT after IFP2ENADDR() was changed to
	    return a pointer to IF_LLADDR().</entry>
	</row>

	<row>
	  <entry>700006</entry>
	  <entry>November 11, 2005</entry>
	  <entry xml:lang="en">7.0-CURRENT after addition of
	    <literal>if_addr</literal> member to <literal>struct
	      ifnet</literal> and IFP2ENADDR() removal.</entry>
	</row>

	<row>
	  <entry>700007</entry>
	  <entry>December 2, 2005</entry>
	  <entry xml:lang="en">7.0-CURRENT after incorporating scripts from the
	    local_startup directories into the base
	    <citerefentry><refentrytitle>rcorder</refentrytitle><manvolnum>8</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry>700008</entry>
	  <entry>December 5, 2005</entry>
	  <entry xml:lang="en">7.0-CURRENT after removal of MNT_NODEV mount
	    option.</entry>
	</row>

	<row>
	  <entry>700009</entry>
	  <entry>December 19, 2005</entry>
	  <entry xml:lang="en">7.0-CURRENT after ELF-64 type changes and symbol
	    versioning.</entry>
	</row>

	<row>
	  <entry>700010</entry>
	  <entry>December 20, 2005</entry>
	  <entry xml:lang="en">7.0-CURRENT after addition of hostb and vgapci
	    drivers, addition of pci_find_extcap(), and changing
	    the AGP drivers to no longer map the aperture.</entry>
	</row>

	<row>
	  <entry>700011</entry>
	  <entry>December 31, 2005</entry>
	  <entry xml:lang="en">7.0-CURRENT after tv_sec was made time_t on
	    all platforms but Alpha.</entry>
	</row>

	<row>
	  <entry>700012</entry>
	  <entry>January 8, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after ldconfig_local_dirs
	    change.</entry>
	</row>

	<row>
	  <entry>700013</entry>
	  <entry>January 12, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after changes to
	    <filename>/etc/rc.d/abi</filename> to support
	    <filename>/compat/linux/etc/ld.so.cache</filename>
	    being a symlink in a readonly filesystem.</entry>
	</row>

	<row>
	  <entry>700014</entry>
	  <entry>January 26, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after pts import.</entry>
	</row>

	<row>
	  <entry>700015</entry>
	  <entry>March 26, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after the introduction of version 2
	    of <citerefentry><refentrytitle>hwpmc</refentrytitle><manvolnum>4</manvolnum></citerefentry>'s ABI.</entry>
	</row>

	<row>
	  <entry>700016</entry>
	  <entry>April 22, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after addition of <citerefentry><refentrytitle>fcloseall</refentrytitle><manvolnum>3</manvolnum></citerefentry>
	    to libc.</entry>
	</row>

	<row>
	  <entry>700017</entry>
	  <entry>May 13, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after removal of ip6fw.</entry>
	</row>

	<row>
	  <entry>700018</entry>
	  <entry>July 15, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after import of snd_emu10kx.</entry>
	</row>

	<row>
	  <entry>700019</entry>
	  <entry>July 29, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after import of OpenSSL
	    0.9.8b.</entry>
	</row>

	<row>
	  <entry>700020</entry>
	  <entry>September 3, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after addition of bus_dma_get_tag
	    function</entry>
	</row>

	<row>
	  <entry>700021</entry>
	  <entry>September 4, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after libpcap 0.9.4 and tcpdump 3.9.4
	    import.</entry>
	</row>

	<row>
	  <entry>700022</entry>
	  <entry>September 9, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after dlsym change to look for a
	    requested symbol both in specified dso and its
	    implicit dependencies.</entry>
	</row>

	<row>
	  <entry>700023</entry>
	  <entry>September 23, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after adding new sound IOCTLs for the
	    OSSv4 mixer API.</entry>
	</row>

	<row>
	  <entry>700024</entry>
	  <entry>September 28, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after import of OpenSSL
	    0.9.8d.</entry>
	</row>

	<row>
	  <entry>700025</entry>
	  <entry>November 11, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after the addition of libelf.</entry>
	</row>

	<row>
	  <entry>700026</entry>
	  <entry>November 26, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after major changes on sound
	    sysctls.</entry>
	</row>

	<row>
	  <entry>700027</entry>
	  <entry>November 30, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after the addition of Wi-Spy
	    quirk.</entry>
	</row>

	<row>
	  <entry>700028</entry>
	  <entry>December 15, 2006</entry>
	  <entry xml:lang="en">7.0-CURRENT after the addition of sctp calls to
	    libc</entry>
	</row>

	<row>
	  <entry>700029</entry>
	  <entry>January 26, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after the GNU <citerefentry><refentrytitle>gzip</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	    implementation was replaced with a BSD licensed
	    version ported from NetBSD.</entry>
	</row>

	<row>
	  <entry>700030</entry>
	  <entry>February 7, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after the removal of IPIP tunnel
	    encapsulation (VIFF_TUNNEL) from the IPv4 multicast
	    forwarding code.</entry>
	</row>

	<row>
	  <entry>700031</entry>
	  <entry>February 23, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after the modification of
	    bus_setup_intr() (newbus).</entry>
	</row>

	<row>
	  <entry>700032</entry>
	  <entry>March 2, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after the inclusion of ipw(4) and
	    iwi(4) firmware.</entry>
	</row>

	<row>
	  <entry>700033</entry>
	  <entry>March 9, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after the inclusion of ncurses wide
	    character support.</entry>
	</row>

	<row>
	  <entry>700034</entry>
	  <entry>March 19, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after changes to how insmntque(),
	    getnewvnode(), and vfs_hash_insert() work.</entry>
	</row>

	<row>
	  <entry>700035</entry>
	  <entry>March 26, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after addition of a notify mechanism
	    for CPU frequency changes.</entry>
	</row>

	<row>
	  <entry>700036</entry>
	  <entry>April 6, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after import of the ZFS
	    filesystem.</entry>
	</row>

	<row>
	  <entry>700037</entry>
	  <entry>April 8, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after addition of CAM 'SG' peripheral
	    device, which implements a subset of Linux SCSI SG
	    passthrough device API.</entry>
	</row>

	<row>
	  <entry>700038</entry>
	  <entry>April 30, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after changing <citerefentry><refentrytitle>getenv</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
	    <citerefentry><refentrytitle>putenv</refentrytitle><manvolnum>3</manvolnum></citerefentry>, <citerefentry><refentrytitle>setenv</refentrytitle><manvolnum>3</manvolnum></citerefentry> and <citerefentry><refentrytitle>unsetenv</refentrytitle><manvolnum>3</manvolnum></citerefentry> to
	    be POSIX conformant.</entry>
	</row>

	<row>
	  <entry>700039</entry>
	  <entry>May 1, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after the changes in 700038 were
	    backed out.</entry>
	</row>

	<row>
	  <entry>700040</entry>
	  <entry>May 10, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after the addition of <citerefentry><refentrytitle>flopen</refentrytitle><manvolnum>3</manvolnum></citerefentry>
	    to libutil.</entry>
	</row>

	<row>
	  <entry>700041</entry>
	  <entry>May 13, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after enabling symbol versioning, and
	    changing the default thread library to libthr.</entry>
	</row>

	<row>
	  <entry>700042</entry>
	  <entry>May 19, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after the import of gcc
	    4.2.0.</entry>
	</row>

	<row>
	  <entry>700043</entry>
	  <entry>May 21, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after bump of all shared library
	    versions that had not been changed since
	    RELENG_6.</entry>
	</row>

	<row>
	  <entry>700044</entry>
	  <entry>June 7, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after changing the argument for
	    vn_open()/VOP_OPEN() from file descriptor index to the
	    struct file *.</entry>
	</row>

	<row>
	  <entry>700045</entry>
	  <entry>June 10, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after changing <citerefentry><refentrytitle>pam_nologin</refentrytitle><manvolnum>8</manvolnum></citerefentry> to
	    provide an account management function instead of an
	    authentication function to the PAM framework.</entry>
	</row>

	<row>
	  <entry>700046</entry>
	  <entry>June 11, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after updated 802.11 wireless
	    support.</entry>
	</row>

	<row>
	  <entry>700047</entry>
	  <entry>June 11, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after adding TCP LRO interface
	    capabilities.</entry>
	</row>

	<row>
	  <entry>700048</entry>
	  <entry>June 12, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after
	    RFC 3678 API support added to the IPv4 stack.
	    Legacy RFC 1724 behavior of the IP_MULTICAST_IF
	    ioctl has now been removed; 0.0.0.0/8 may no longer
	    be used to specify an interface index.
	    Use struct ipmreqn instead.</entry>
	</row>

	<row>
	  <entry>700049</entry>
	  <entry>July 3, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after importing pf from OpenBSD
	    4.1</entry>
	</row>

	<row>
	  <entry xml:lang="en">(not changed)</entry>
	  <entry/>
	  <entry xml:lang="en">7.0-CURRENT after adding IPv6 support for
	    FAST_IPSEC, deleting KAME IPSEC, and renaming
	    FAST_IPSEC to IPSEC.</entry>
	</row>

	<row>
	  <entry>700050</entry>
	  <entry>July 4, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after converting setenv/putenv/etc.
	    calls from traditional BSD to POSIX.</entry>
	</row>

	<row>
	  <entry>700051</entry>
	  <entry>July 4, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after adding new mmap/lseek/etc
	    syscalls.</entry>
	</row>

	<row>
	  <entry>700052</entry>
	  <entry>July 6, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after moving I4B headers to
	    include/i4b.</entry>
	</row>

	<row>
	  <entry>700053</entry>
	  <entry>September 30, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after the addition of support for
	    PCI domains</entry>
	</row>

	<row>
	  <entry>700054</entry>
	  <entry>October 25, 2007</entry>
	  <entry xml:lang="en">7.0-CURRENT after MFC of wide and single byte
	    ctype separation.</entry>
	</row>

	<row>
	  <entry>700055</entry>
	  <entry>October 28, 2007</entry>
	  <entry xml:lang="en">7.0-RELEASE, and 7.0-CURRENT after ABI backwards
	    compatibility to the FreeBSD 4/5/6 versions of the
	    PCIOCGETCONF, PCIOCREAD and PCIOCWRITE IOCTLs was
	    MFCed, which required the ABI of the PCIOCGETCONF
	    IOCTL to be broken again</entry>
	</row>

	<row>
	  <entry>700100</entry>
	  <entry>December 22, 2007</entry>
	  <entry xml:lang="en">7.0-STABLE after 7.0-RELEASE</entry>
	</row>

	<row>
	  <entry>700101</entry>
	  <entry>February 8, 2008</entry>
	  <entry xml:lang="en">7.0-STABLE after the MFC of m_collapse().</entry>
	</row>

	<row>
	  <entry>700102</entry>
	  <entry>March 30, 2008</entry>
	  <entry xml:lang="en">7.0-STABLE after the MFC of
	    kdb_enter_why().</entry>
	</row>

	<row>
	  <entry>700103</entry>
	  <entry>April 10, 2008</entry>
	  <entry xml:lang="en">7.0-STABLE after adding l_sysid to struct
	    flock.</entry>
	</row>

	<row>
	  <entry>700104</entry>
	  <entry>April 11, 2008</entry>
	  <entry xml:lang="en">7.0-STABLE after the MFC of procstat(1).</entry>
	</row>

	<row>
	  <entry>700105</entry>
	  <entry>April 11, 2008</entry>
	  <entry xml:lang="en">7.0-STABLE after the MFC of umtx
	    features.</entry>
	</row>

	<row>
	  <entry>700106</entry>
	  <entry>April 15, 2008</entry>
	  <entry xml:lang="en">7.0-STABLE after the MFC of <citerefentry><refentrytitle>write</refentrytitle><manvolnum>2</manvolnum></citerefentry> support
	    to <citerefentry><refentrytitle>psm</refentrytitle><manvolnum>4</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry>700107</entry>
	  <entry>April 20, 2008</entry>
	  <entry xml:lang="en">7.0-STABLE after the MFC of F_DUP2FD command
	    to <citerefentry><refentrytitle>fcntl</refentrytitle><manvolnum>2</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry>700108</entry>
	  <entry>May 5, 2008</entry>
	  <entry xml:lang="en">7.0-STABLE after some <citerefentry><refentrytitle>lockmgr</refentrytitle><manvolnum>9</manvolnum></citerefentry> changes,
	    which makes it necessary to include
	    <filename>sys/lock.h</filename> to use
	    <citerefentry><refentrytitle>lockmgr</refentrytitle><manvolnum>9</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry>700109</entry>
	  <entry>May 27, 2008</entry>
	  <entry xml:lang="en">7.0-STABLE after MFC of the
	    <function>memrchr</function> function.</entry>
	</row>

	<row>
	  <entry>700110</entry>
	  <entry>August 5, 2008</entry>
	  <entry xml:lang="en">7.0-STABLE after MFC of kernel NFS lockd
	    client.</entry>
	</row>

	<row>
	  <entry>700111</entry>
	  <entry>August 20, 2008</entry>
	  <entry xml:lang="en">7.0-STABLE after addition of physically
	    contiguous jumbo frame support.</entry>
	</row>

	<row>
	  <entry>700112</entry>
	  <entry>August 27, 2008</entry>
	  <entry xml:lang="en">7.0-STABLE after MFC of kernel DTrace
	    support.</entry>
	</row>

	<row>
	  <entry>701000</entry>
	  <entry>November 25, 2008</entry>
	  <entry>7.1-RELEASE</entry>
	</row>

	<row>
	  <entry>701100</entry>
	  <entry>November 25, 2008</entry>
	  <entry xml:lang="en">7.1-STABLE after 7.1-RELEASE.</entry>
	</row>

	<row>
	  <entry>701101</entry>
	  <entry>January 10, 2009</entry>
	  <entry xml:lang="en">7.1-STABLE after <function>strndup</function>
	    merge.</entry>
	</row>

	<row>
	  <entry>701102</entry>
	  <entry>January 17, 2009</entry>
	  <entry xml:lang="en">7.1-STABLE after cpuctl(4) support
	    added.</entry>
	</row>

	<row>
	  <entry>701103</entry>
	  <entry>February 7, 2009</entry>
	  <entry xml:lang="en">7.1-STABLE after the merge of
	    multi-/no-IPv4/v6 jails.</entry>
	</row>

	<row>
	  <entry>701104</entry>
	  <entry>February 14, 2009</entry>
	  <entry xml:lang="en">7.1-STABLE after the store of the suspension
	    owner in the struct mount, and introduction of
	    vfs_susp_clean method into the struct vfsops.</entry>
	</row>

	<row>
	  <entry>701105</entry>
	  <entry>March 12, 2009</entry>
	  <entry xml:lang="en">7.1-STABLE after the incompatible change
	    to the kern.ipc.shmsegs sysctl to allow allocating
	    larger SysV shared memory segments on 64bit
	    architectures.</entry>
	</row>

	<row>
	  <entry>701106</entry>
	  <entry>March 14, 2009</entry>
	  <entry xml:lang="en">7.1-STABLE after the merge of a fix for
	    POSIX semaphore wait operations.</entry>
	</row>

	<row>
	  <entry>702000</entry>
	  <entry>April 15, 2009</entry>
	  <entry>7.2-RELEASE</entry>
	</row>

	<row>
	  <entry>702100</entry>
	  <entry>April 15, 2009</entry>
	  <entry xml:lang="en">7.2-STABLE after 7.2-RELEASE.</entry>
	</row>

	<row>
	  <entry>702101</entry>
	  <entry>May 15, 2009</entry>
	  <entry xml:lang="en">7.2-STABLE after ichsmb(4) was changed to
	    use left-adjusted slave addressing to match other
	    SMBus controller drivers.</entry>
	</row>

	<row>
	  <entry>702102</entry>
	  <entry>May 28, 2009</entry>
	  <entry xml:lang="en">7.2-STABLE after MFC of the
	    <function>fdopendir</function> function.</entry>
	</row>

	<row>
	  <entry>702103</entry>
	  <entry>June 06, 2009</entry>
	  <entry xml:lang="en">7.2-STABLE after MFC of PmcTools.</entry>
	</row>

	<row>
	  <entry>702104</entry>
	  <entry>July 14, 2009</entry>
	  <entry xml:lang="en">7.2-STABLE after MFC of the
	    <function>closefrom</function> system call.</entry>
	</row>

	<row>
	  <entry>702105</entry>
	  <entry>July 31, 2009</entry>
	  <entry xml:lang="en">7.2-STABLE after MFC of the SYSVIPC ABI
	    change.</entry>
	</row>

	<row>
	  <entry>702106</entry>
	  <entry>September 14, 2009</entry>
	  <entry xml:lang="en">7.2-STABLE after MFC of the x86 PAT
	    enhancements and addition of d_mmap_single() and
	    the scatter/gather list VM object type.</entry>
	</row>

	<row>
	  <entry>703000</entry>
	  <entry>February 9, 2010</entry>
	  <entry>7.3-RELEASE</entry>
	</row>

	<row>
	  <entry>703100</entry>
	  <entry>February 9, 2010</entry>
	  <entry xml:lang="en">7.3-STABLE after 7.3-RELEASE.</entry>
	</row>

	<row>
	  <entry>704000</entry>
	  <entry>December 22, 2010</entry>
	  <entry>7.4-RELEASE</entry>
	</row>

	<row>
	  <entry>704100</entry>
	  <entry>December 22, 2010</entry>
	  <entry xml:lang="en">7.4-STABLE after 7.4-RELEASE.</entry>
	</row>

	<row>
	  <entry>800000</entry>
	  <entry>October 11, 2007</entry>
	  <entry xml:lang="en">8.0-CURRENT.  Separating wide and single byte
	    ctype.</entry>
	</row>

	<row>
	  <entry>800001</entry>
	  <entry>October 16, 2007</entry>
	  <entry xml:lang="en">8.0-CURRENT after libpcap 0.9.8 and tcpdump 3.9.8
	    import.</entry>
	</row>

	<row>
	  <entry>800002</entry>
	  <entry>October 21, 2007</entry>
	  <entry xml:lang="en">8.0-CURRENT after renaming kthread_create()
	    and friends to kproc_create() etc.</entry>
	</row>

	<row>
	  <entry>800003</entry>
	  <entry>October 24, 2007</entry>
	  <entry xml:lang="en">8.0-CURRENT after ABI backwards compatibility
	    to the FreeBSD 4/5/6 versions of the PCIOCGETCONF,
	    PCIOCREAD and PCIOCWRITE IOCTLs was added, which
	    required the ABI of the PCIOCGETCONF IOCTL to be
	    broken again</entry>
	</row>

	<row>
	  <entry>800004</entry>
	  <entry>November 12, 2007</entry>
	  <entry xml:lang="en">8.0-CURRENT after agp(4) driver moved from
	    src/sys/pci to src/sys/dev/agp</entry>
	</row>

	<row>
	  <entry>800005</entry>
	  <entry>December 4, 2007</entry>
	  <entry xml:lang="en">8.0-CURRENT after changes to the jumbo frame
	    allocator (rev <revnumber>174247</revnumber>).</entry>
	</row>

	<row>
	  <entry>800006</entry>
	  <entry>December 7, 2007</entry>
	  <entry xml:lang="en">8.0-CURRENT after the addition of callgraph
	    capture functionality to <citerefentry><refentrytitle>hwpmc</refentrytitle><manvolnum>4</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry>800007</entry>
	  <entry>December 25, 2007</entry>
	  <entry xml:lang="en">8.0-CURRENT after kdb_enter() gains a "why"
	    argument.</entry>
	</row>

	<row>
	  <entry>800008</entry>
	  <entry>December 28, 2007</entry>
	  <entry xml:lang="en">8.0-CURRENT after LK_EXCLUPGRADE option
	    removal.</entry>
	</row>

	<row>
	  <entry>800009</entry>
	  <entry>January 9, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after introduction of
	    <citerefentry><refentrytitle>lockmgr_disown</refentrytitle><manvolnum>9</manvolnum></citerefentry></entry>
	</row>

	<row>
	  <entry>800010</entry>
	  <entry>January 10, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the <citerefentry><refentrytitle>vn_lock</refentrytitle><manvolnum>9</manvolnum></citerefentry> prototype
	    change.</entry>
	</row>

	<row>
	  <entry>800011</entry>
	  <entry>January 13, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the <citerefentry><refentrytitle>VOP_LOCK</refentrytitle><manvolnum>9</manvolnum></citerefentry> and
	    <citerefentry><refentrytitle>VOP_UNLOCK</refentrytitle><manvolnum>9</manvolnum></citerefentry> prototype changes.</entry>
	</row>

	<row>
	  <entry>800012</entry>
	  <entry>January 19, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after introduction of
	    <citerefentry><refentrytitle>lockmgr_recursed</refentrytitle><manvolnum>9</manvolnum></citerefentry>, <citerefentry><refentrytitle>BUF_RECURSED</refentrytitle><manvolnum>9</manvolnum></citerefentry> and
	    <citerefentry><refentrytitle>BUF_ISLOCKED</refentrytitle><manvolnum>9</manvolnum></citerefentry> and the removal of
	    <function>BUF_REFCNT()</function>.</entry>
	</row>

	<row>
	  <entry>800013</entry>
	  <entry>January 23, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after introduction of the
	    <quote>ASCII</quote> encoding.</entry>
	</row>

	<row>
	  <entry>800014</entry>
	  <entry>January 24, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after changing the prototype of
	    <citerefentry><refentrytitle>lockmgr</refentrytitle><manvolnum>9</manvolnum></citerefentry> and removal of
	    <function>lockcount()</function> and
	    <function>LOCKMGR_ASSERT()</function>.</entry>
	</row>

	<row>
	  <entry>800015</entry>
	  <entry>January 26, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after extending the types
	    of the <citerefentry><refentrytitle>fts</refentrytitle><manvolnum>3</manvolnum></citerefentry> structures.</entry>
	</row>

	<row>
	  <entry>800016</entry>
	  <entry>February 1, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after adding an argument to
	    MEXTADD(9)</entry>
	</row>

	<row>
	  <entry>800017</entry>
	  <entry>February 6, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the introduction of
	    LK_NODUP and LK_NOWITNESS options in the
	    <citerefentry><refentrytitle>lockmgr</refentrytitle><manvolnum>9</manvolnum></citerefentry> space.</entry>
	</row>

	<row>
	  <entry>800018</entry>
	  <entry>February 8, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the addition of
	    m_collapse.</entry>
	</row>

	<row>
	  <entry>800019</entry>
	  <entry>February 9, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the addition of current
	    working directory, root directory, and jail
	    directory support to the kern.proc.filedesc
	    sysctl.</entry>
	</row>

	<row>
	  <entry>800020</entry>
	  <entry>February 13, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after introduction of
	    <citerefentry><refentrytitle>lockmgr_assert</refentrytitle><manvolnum>9</manvolnum></citerefentry> and
	    <function>BUF_ASSERT</function> functions.</entry>
	</row>

	<row>
	  <entry>800021</entry>
	  <entry>February 15, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after introduction of
	    <citerefentry><refentrytitle>lockmgr_args</refentrytitle><manvolnum>9</manvolnum></citerefentry> and LK_INTERNAL flag
	    removal.</entry>
	</row>

	<row>
	  <entry>800022</entry>
	  <entry xml:lang="en">(backed out)</entry>
	  <entry xml:lang="en">8.0-CURRENT after changing the default system ar
	    to BSD <citerefentry><refentrytitle>ar</refentrytitle><manvolnum>1</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry>800023</entry>
	  <entry>February 25, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after changing the prototypes of
	    <citerefentry><refentrytitle>lockstatus</refentrytitle><manvolnum>9</manvolnum></citerefentry> and <citerefentry><refentrytitle>VOP_ISLOCKED</refentrytitle><manvolnum>9</manvolnum></citerefentry>, more
	    specifically retiring the
	    <literal>struct thread</literal> argument.</entry>
	</row>

	<row>
	  <entry>800024</entry>
	  <entry>March 1, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after axing out the
	    <function>lockwaiters</function> and
	    <function>BUF_LOCKWAITERS</function> functions,
	    changing the return value of
	    <function>brelvp</function> from void to int and
	    introducing new flags for <citerefentry><refentrytitle>lockinit</refentrytitle><manvolnum>9</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry>800025</entry>
	  <entry>March 8, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after adding F_DUP2FD command
	    to <citerefentry><refentrytitle>fcntl</refentrytitle><manvolnum>2</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry>800026</entry>
	  <entry>March 12, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after changing the priority parameter
	    to cv_broadcastpri such that 0 means no
	    priority.</entry>
	</row>

	<row>
	  <entry>800027</entry>
	  <entry>March 24, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after changing the bpf monitoring ABI
	    when zerocopy bpf buffers were added.</entry>
	</row>

	<row>
	  <entry>800028</entry>
	  <entry>March 26, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after adding l_sysid to struct
	    flock.</entry>
	</row>

	<row>
	  <entry>800029</entry>
	  <entry>March 28, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after reintegration of the
	    <function>BUF_LOCKWAITERS</function> function and the
	    addition of <citerefentry><refentrytitle>lockmgr_waiters</refentrytitle><manvolnum>9</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry>800030</entry>
	  <entry>April 1, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the introduction of the
	    <citerefentry><refentrytitle>rw_try_rlock</refentrytitle><manvolnum>9</manvolnum></citerefentry> and <citerefentry><refentrytitle>rw_try_wlock</refentrytitle><manvolnum>9</manvolnum></citerefentry>
	    functions.</entry>
	</row>

	<row>
	  <entry>800031</entry>
	  <entry>April 6, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the introduction of the
	    <function>lockmgr_rw</function> and
	    <function>lockmgr_args_rw</function>
	    functions.</entry>
	</row>

	<row>
	  <entry>800032</entry>
	  <entry>April 8, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the implementation of the
	    openat and related syscalls, introduction of the
	    O_EXEC flag for the <citerefentry><refentrytitle>open</refentrytitle><manvolnum>2</manvolnum></citerefentry>, and providing the
	    corresponding linux compatibility syscalls.</entry>
	</row>

	<row>
	  <entry>800033</entry>
	  <entry>April 8, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after added <citerefentry><refentrytitle>write</refentrytitle><manvolnum>2</manvolnum></citerefentry> support for
	    <citerefentry><refentrytitle>psm</refentrytitle><manvolnum>4</manvolnum></citerefentry> in native operation level.  Now arbitrary
	    commands can be written to
	    <filename>/dev/psm%d</filename> and status can be
	    read back from it.</entry>
	</row>

	<row>
	  <entry>800034</entry>
	  <entry>April 10, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after introduction of the
	    <function>memrchr</function> function.</entry>
	</row>

	<row>
	  <entry>800035</entry>
	  <entry>April 16, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after introduction of the
	    <function>fdopendir</function> function.</entry>
	</row>

	<row>
	  <entry>800036</entry>
	  <entry>April 20, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after switchover of 802.11 wireless
	    to multi-bss support (aka vaps).</entry>
	</row>

	<row>
	  <entry>800037</entry>
	  <entry>May 9, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after addition of multi routing
	    table support (aka setfib(1), setfib(2)).</entry>
	</row>

	<row>
	  <entry>800038</entry>
	  <entry>May 26, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after removal of netatm and
	    ISDN4BSD.  Also, the addition of the
	    Compact C Type (CTF) tools.</entry>
	</row>

	<row>
	  <entry>800039</entry>
	  <entry>June 14, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after removal of sgtty.</entry>
	</row>

	<row>
	  <entry>800040</entry>
	  <entry>June 26, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT with kernel NFS lockd client.</entry>
	</row>

	<row>
	  <entry>800041</entry>
	  <entry>July 22, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after addition of arc4random_buf(3)
	    and arc4random_uniform(3).</entry>
	</row>

	<row>
	  <entry>800042</entry>
	  <entry>August 8, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after addition of cpuctl(4).</entry>
	</row>

	<row>
	  <entry>800043</entry>
	  <entry>August 13, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after changing bpf(4) to use a
	    single device node, instead of device cloning.</entry>
	</row>

	<row>
	  <entry>800044</entry>
	  <entry>August 17, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the commit of the first step of
	    the vimage project renaming global variables to be
	    virtualized with a V_ prefix with macros to map them
	    back to their global names.</entry>
	</row>

	<row>
	  <entry>800045</entry>
	  <entry>August 20, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the integration of the
	    MPSAFE TTY layer, including changes to various
	    drivers and utilities that interact with it.</entry>
	</row>

	<row>
	  <entry>800046</entry>
	  <entry>September 8, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the separation of the GDT
	    per CPU on amd64 architecture.</entry>
	</row>

	<row>
	  <entry>800047</entry>
	  <entry>September 10, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after removal of VSVTX, VSGID
	    and VSUID.</entry>
	</row>

	<row>
	  <entry>800048</entry>
	  <entry>September 16, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after converting the kernel NFS mount
	    code to accept individual mount options in the
	    nmount() iovec, not just one big
	    struct nfs_args.</entry>
	</row>

	<row>
	  <entry>800049</entry>
	  <entry>September 17, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the removal of <citerefentry><refentrytitle>suser</refentrytitle><manvolnum>9</manvolnum></citerefentry>
	    and <citerefentry><refentrytitle>suser_cred</refentrytitle><manvolnum>9</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry>800050</entry>
	  <entry>October 20, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after buffer cache API
	    change.</entry>
	</row>

	<row>
	  <entry>800051</entry>
	  <entry>October 23, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the removal of the
	    <citerefentry><refentrytitle>MALLOC</refentrytitle><manvolnum>9</manvolnum></citerefentry> and <citerefentry><refentrytitle>FREE</refentrytitle><manvolnum>9</manvolnum></citerefentry> macros.</entry>
	</row>

	<row>
	  <entry>800052</entry>
	  <entry>October 28, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the introduction of accmode_t
	    and renaming of VOP_ACCESS 'a_mode' argument
	    to 'a_accmode'.</entry>
	</row>

	<row>
	  <entry>800053</entry>
	  <entry>November 2, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the prototype change of
	    <citerefentry><refentrytitle>vfs_busy</refentrytitle><manvolnum>9</manvolnum></citerefentry> and the introduction of its
	    MBF_NOWAIT and MBF_MNTLSTLOCK flags.</entry>
	</row>

	<row>
	  <entry>800054</entry>
	  <entry>November 22, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the addition of buf_ring,
	    memory barriers and ifnet functions to facilitate
	    multiple hardware transmit queues for cards that
	    support them, and a lockless ring-buffer
	    implementation to enable drivers to more efficiently
	    manage queuing of packets.</entry>
	</row>

	<row>
	  <entry>800055</entry>
	  <entry>November 27, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the addition of Intel™
	    Core, Core2, and Atom support to
	    <citerefentry><refentrytitle>hwpmc</refentrytitle><manvolnum>4</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry>800056</entry>
	  <entry>November 29, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the introduction of
	    multi-/no-IPv4/v6 jails.</entry>
	</row>

	<row>
	  <entry>800057</entry>
	  <entry>December 1, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the switch to the
	    ath hal source code.</entry>
	</row>

	<row>
	  <entry>800058</entry>
	  <entry>December 12, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the introduction of
	    the VOP_VPTOCNP operation.</entry>
	</row>

	<row>
	  <entry>800059</entry>
	  <entry>December 15, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT incorporates the
	    new arp-v2 rewrite.</entry>
	</row>

	<row>
	  <entry>800060</entry>
	  <entry>December 19, 2008</entry>
	  <entry xml:lang="en">8.0-CURRENT after the addition of makefs.</entry>
	</row>

	<row>
	  <entry>800061</entry>
	  <entry>January 15, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after TCP Appropriate Byte
	    Counting.</entry>
	</row>

	<row>
	  <entry>800062</entry>
	  <entry>January 28, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after removal of minor(),
	    minor2unit(), unit2minor(), etc.</entry>
	</row>

	<row>
	  <entry>800063</entry>
	  <entry>February 18, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after GENERIC config change to use
	    the USB2 stack, but also the addition of
	    fdevname(3).</entry>
	</row>

	<row>
	  <entry>800064</entry>
	  <entry>February 23, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after the USB2 stack is moved to and
	    replaces dev/usb.</entry>
	</row>

	<row>
	  <entry>800065</entry>
	  <entry>February 26, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after the renaming of all functions
	    in libmp(3).</entry>
	</row>

	<row>
	  <entry>800066</entry>
	  <entry>February 27, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after changing USB devfs handling and
	    layout.</entry>
	</row>

	<row>
	  <entry>800067</entry>
	  <entry>February 28, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after adding getdelim(), getline(),
	    stpncpy(), strnlen(), wcsnlen(), wcscasecmp(), and
	    wcsncasecmp().</entry>
	</row>

	<row>
	  <entry>800068</entry>
	  <entry>March 2, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after renaming the ushub devclass to
	    uhub.</entry>
	</row>

	<row>
	  <entry>800069</entry>
	  <entry>March 9, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after libusb20.so.1 was renamed to
	    libusb.so.1.</entry>
	</row>

	<row>
	  <entry>800070</entry>
	  <entry>March 9, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after merging IGMPv3 and
	    Source-Specific Multicast (SSM) to the IPv4
	    stack.</entry>
	</row>

	<row>
	  <entry>800071</entry>
	  <entry>March 14, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after gcc was patched to use C99
	    inline semantics in c99 and gnu99 mode.</entry>
	</row>

	<row>
	  <entry>800072</entry>
	  <entry>March 15, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after the IFF_NEEDSGIANT flag has
	    been removed; non-MPSAFE network device drivers are no
	    longer supported.</entry>
	</row>

	<row>
	  <entry>800073</entry>
	  <entry>March 18, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after the dynamic string token
	    substitution has been implemented for rpath and needed
	    paths.</entry>
	</row>

	<row>
	  <entry>800074</entry>
	  <entry>March 24, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after tcpdump 4.0.0 and
	    libpcap 1.0.0 import.</entry>
	</row>

	<row>
	  <entry>800075</entry>
	  <entry>April 6, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after layout of structs vnet_net,
	    vnet_inet and vnet_ipfw has been changed.</entry>
	</row>

	<row>
	  <entry xml:lang="en">800076</entry>
	  <entry>April 9, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after adding delay profiles in
	    dummynet.</entry>
	</row>

	<row>
	  <entry>800077</entry>
	  <entry>April 14, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after removing VOP_LEASE() and
	    vop_vector.vop_lease.</entry>
	</row>

	<row>
	  <entry>800078</entry>
	  <entry>April 15, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after struct rt_weight fields have
	    been added to struct rt_metrics and struct
	    rt_metrics_lite, changing the layout of struct
	    rt_metrics_lite.  A bump to RTM_VERSION was made, but
	    backed out.</entry>
	</row>

	<row>
	  <entry>800079</entry>
	  <entry>April 15, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after struct llentry pointers are
	    added to struct route and struct route_in6.</entry>
	</row>

	<row>
	  <entry>800080</entry>
	  <entry>April 15, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after layout of struct inpcb has been
	    changed.</entry>
	</row>

	<row>
	  <entry>800081</entry>
	  <entry>April 19, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after the layout of struct
	    malloc_type has been changed.</entry>
	</row>

	<row>
	  <entry>800082</entry>
	  <entry>April 21, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after the layout of struct ifnet has
	    changed, and with if_ref() and if_rele() ifnet
	    refcounting.</entry>
	</row>

	<row>
	  <entry>800083</entry>
	  <entry>April 22, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after the implementation of a
	    low-level Bluetooth HCI API.</entry>
	</row>

	<row>
	  <entry>800084</entry>
	  <entry>April 29, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after IPv6 SSM and MLDv2
	    changes.</entry>
	</row>

	<row>
	  <entry>800085</entry>
	  <entry>April 30, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after enabling support for
	    VIMAGE kernel builds with one active image.</entry>
	</row>

	<row>
	  <entry>800086</entry>
	  <entry>May 8, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after adding support for input lines
	    of arbitrarily length in patch(1).</entry>
	</row>

	<row>
	  <entry>800087</entry>
	  <entry>May 11, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after some VFS KPI changes.  The
	    thread argument has been removed from the FSD parts of
	    the VFS.  <function>VFS_*</function> functions do not
	    need the context any more because it always refers to
	    <varname>curthread</varname>.  In some special cases,
	    the old behavior is retained.</entry>
	</row>

	<row>
	  <entry>800088</entry>
	  <entry>May 20, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after net80211 monitor mode
	    changes.</entry>
	</row>

	<row>
	  <entry>800089</entry>
	  <entry>May 23, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after adding UDP control block
	    support.</entry>
	</row>

	<row>
	  <entry>800090</entry>
	  <entry>May 23, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after virtualizing interface
	    cloning.</entry>
	</row>

	<row>
	  <entry>800091</entry>
	  <entry>May 27, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after adding hierarchical jails
	    and removing global securelevel.</entry>
	</row>

	<row>
	  <entry>800092</entry>
	  <entry>May 29, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after changing
	    <function>sx_init_flags()</function> KPI.  The
	    <constant>SX_ADAPTIVESPIN</constant> is retired and a
	    new <constant>SX_NOADAPTIVE</constant> flag is
	    introduced to handle the reversed
	    logic.</entry>
	</row>

	<row>
	  <entry>800093</entry>
	  <entry>May 29, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after adding mnt_xflag to
	    struct mount.</entry>
	</row>

	<row>
	  <entry>800094</entry>
	  <entry>May 30, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after adding
	    <citerefentry><refentrytitle>VOP_ACCESSX</refentrytitle><manvolnum>9</manvolnum></citerefentry>.</entry>
	</row>

	<row>
	  <entry>800095</entry>
	  <entry>May 30, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after changing the polling KPI.
	    The polling handlers now return the number of packets
	    processed.  A new
	    <constant>IFCAP_POLLING_NOCOUNT</constant> is also
	    introduced to specify that the return value is
	    not significant and the counting should be
	    skipped.</entry>
	</row>

	<row>
	  <entry>800096</entry>
	  <entry>June 1, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after updating to the new netisr
	    implementation and after changing the way we
	    store and access FIBs.</entry>
	  <!--
	    Had been 96 and 97 but were folded because we are
	    running out of numbers.
	  -->
	</row>

	<row>
	  <entry>800097</entry>
	  <entry>June 8, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after the introduction of vnet
	    destructor hooks and infrastructure.</entry>
	</row>

	<row>
	  <entry>800097</entry>
	  <entry>June 11, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after the introduction of netgraph
	    outbound to inbound path call detection and queuing,
	    which also changed the layout of struct
	    thread.</entry>
	</row>

	<row>
	  <entry>800098</entry>
	  <entry>June 14, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after OpenSSL 0.9.8k import.</entry>
	</row>

	<row>
	  <entry>800099</entry>
	  <entry>June 22, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after NGROUPS update and moving
	    route virtualization into its own VImage
	    module.</entry>
	</row>

	<row>
	  <entry>800100</entry>
	  <entry>June 24, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after SYSVIPC ABI change.</entry>
	</row>

	<row>
	  <entry>800101</entry>
	  <entry>June 29, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after the removal of the
	    /dev/net/* per-interface character
	    devices.</entry>
	</row>

	<row>
	  <entry>800102</entry>
	  <entry>July 12, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after padding was added to
	    struct sackhint, struct tcpcb, and struct
	    tcpstat.</entry>
	</row>

	<row>
	  <entry>800103</entry>
	  <entry>July 13, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after replacing struct tcpopt
	    with struct toeopt in the TOE driver interface
	    to the TCP syncache.</entry>
	</row>

	<row>
	  <entry>800104</entry>
	  <entry>July 14, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after the addition of the
	    linker-set based per-vnet allocator.</entry>
	</row>

	<row>
	  <entry>800105</entry>
	  <entry>July 19, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after version bump for all
	    shared libraries that do not have symbol versioning
	    turned on.</entry>
	</row>

	<row>
	  <entry>800106</entry>
	  <entry>July 24, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after introduction of OBJT_SG
	    VM object type.</entry>
	</row>

	<row>
	  <entry>800107</entry>
	  <entry>August 2, 2009</entry>
	  <entry xml:lang="en">8.0-CURRENT after making the newbus subsystem
	    Giant free by adding the newbus sxlock and
	    8.0-RELEASE.</entry>
	</row>

	<row>
	  <entry>800108</entry>
	  <entry>November 21, 2009</entry>
	  <entry xml:lang="en">8.0-STABLE after implementing EVFILT_USER kevent
	    filter.</entry>
	</row>

	<row>
	  <entry>800500</entry>
	  <entry>January 7, 2010</entry>
	  <entry xml:lang="en">8.0-STABLE after
	    <literal>__FreeBSD_version</literal> bump to make
	    <command>pkg_add -r</command> use
	    packages-8-stable.</entry>
	</row>

	<row>
	  <entry>800501</entry>
	  <entry>January 24, 2010</entry>
	  <entry xml:lang="en">8.0-STABLE after change of the
	    <function>scandir(3)</function> and
	    <function>alphasort(3)</function> prototypes to
	    conform to SUSv4.</entry>
	</row>

	<row>
	  <entry>800502</entry>
	  <entry>January 31, 2010</entry>
	  <entry xml:lang="en">8.0-STABLE after addition of
	    <function>sigpause(3)</function>.</entry>
	</row>

	<row>
	  <entry>800503</entry>
	  <entry>February 25, 2010</entry>
	  <entry xml:lang="en">8.0-STABLE after addition of SIOCGIFDESCR
	    and SIOCSIFDESCR ioctls to network interfaces.  These
	    ioctl can be used to manipulate interface description,
	    as inspired by OpenBSD.</entry>
	</row>

	<row>
	  <entry>800504</entry>
	  <entry>March 1, 2010</entry>
	  <entry xml:lang="en">8.0-STABLE after MFC of importing x86emu, a
	    software emulator for real mode x86 CPU from
	    OpenBSD.</entry>
	</row>

	<row>
	  <entry>800505</entry>
	  <entry>May 18, 2010</entry>
	  <entry xml:lang="en">8.0-STABLE after MFC of adding liblzma, xz,
	    xzdec, and lzmainfo.</entry>
	</row>

	<row>
	  <entry>801000</entry>
	  <entry>June 14, 2010</entry>
	  <entry>8.1-RELEASE</entry>
	</row>

	<row>
	  <entry>801500</entry>
	  <entry>June 14, 2010</entry>
	  <entry xml:lang="en">8.1-STABLE after 8.1-RELEASE.</entry>
	</row>

	<row>
	  <entry>801501</entry>
	  <entry>November 3, 2010</entry>
	  <entry xml:lang="en">8.1-STABLE after KBI change in struct sysentvec,
	    and implementation of PL_FLAG_SCE/SCX/EXEC/SI and
	    pl_siginfo for ptrace(PT_LWPINFO) .</entry>
	</row>

	<row>
	  <entry>802000</entry>
	  <entry>December 22, 2010</entry>
	  <entry>8.2-RELEASE</entry>
	</row>

	<row>
	  <entry>802500</entry>
	  <entry>December 22, 2010</entry>
	  <entry xml:lang="en">8.2-STABLE after 8.2-RELEASE.</entry>
	</row>

	<row>
	  <entry>802501</entry>
	  <entry>February 28, 2011</entry>
	  <entry xml:lang="en">8.2-STABLE after merging DTrace changes,
	    including support for userland tracing.</entry>
	</row>

	<row>
	  <entry>802502</entry>
	  <entry>March 6, 2011</entry>
	  <entry xml:lang="en">8.2-STABLE after merging log2 and log2f
	    into libm.</entry>
	</row>

	<row>
	  <entry>802503</entry>
	  <entry>May 1, 2011</entry>
	  <entry xml:lang="en">8.2-STABLE after upgrade of the gcc to the last
	    GPLv2 version from the FSF gcc-4_2-branch.</entry>
	</row>

	<row>
	  <entry>802504</entry>
	  <entry>May 28, 2011</entry>
	  <entry xml:lang="en">8.2-STABLE after introduction of the KPI and
	    supporting infrastructure for modular congestion
	    control.</entry>
	</row>

	<row>
	  <entry>802505</entry>
	  <entry>May 28, 2011</entry>
	  <entry xml:lang="en">8.2-STABLE after introduction of Hhook and Khelp
	    KPIs.</entry>
	</row>

	<row>
	  <entry>802506</entry>
	  <entry>May 28, 2011</entry>
	  <entry xml:lang="en">8.2-STABLE after addition of OSD to struct
	    tcpcb.</entry>
	</row>

	<row>
	  <entry>802507</entry>
	  <entry>June 6, 2011</entry>
	  <entry xml:lang="en">8.2-STABLE after ZFS v28 import.</entry>
	</row>

	<row>
	  <entry>802508</entry>
	  <entry>June 8, 2011</entry>
	  <entry xml:lang="en">8.2-STABLE after removal of the schedtail event
	    handler and addition of the sv_schedtail method to
	    struct sysvec.</entry>
	</row>

	<row>
	  <entry>802509</entry>
	  <entry>July 14, 2011</entry>
	  <entry xml:lang="en">8.2-STABLE after merging the SSSE3 support
	    into binutils.</entry>
	</row>

	<row>
	  <entry>802510</entry>
	  <entry>July 19, 2011</entry>
	  <entry xml:lang="en">8.2-STABLE after addition of
	    RFTSIGZMB flag for
	    <function>rfork(2)</function>.</entry>
	</row>

	<row>
	  <entry>802511</entry>
	  <entry>September 9, 2011</entry>
	  <entry xml:lang="en">8.2-STABLE after addition of automatic detection
	    of USB mass storage devices which do not support the
	    no synchronize cache SCSI command.</entry>
	</row>

	<row>
	  <entry>802512</entry>
	  <entry>September 10, 2011</entry>
	  <entry xml:lang="en">8.2-STABLE after merging of
	    re-factoring of auto-quirk.</entry>
	</row>

	<row>
	  <entry>802513</entry>
	  <entry>October 25, 2011</entry>
	  <entry xml:lang="en">8.2-STABLE after merging of the MAP_PREFAULT_READ
	    flag to <function>mmap(2)</function>.</entry>
	</row>

	<row>
	  <entry>802514</entry>
	  <entry>November 16, 2011</entry>
	  <entry xml:lang="en">8.2-STABLE after merging of
	    addition of posix_fallocate(2) syscall.</entry>
	</row>

	<row>
	  <entry>802515</entry>
	  <entry>January 6, 2012</entry>
	  <entry xml:lang="en">8.2-STABLE after merging of addition of the
	    posix_fadvise(2) system call.</entry>
	</row>

	<row>
	  <entry>802516</entry>
	  <entry>January 16, 2012</entry>
	  <entry xml:lang="en">8.2-STABLE after merging gperf 3.0.3</entry>
	</row>

	<row>
	  <entry>802517</entry>
	  <entry>February 15, 2012</entry>
	  <entry xml:lang="en">8.2-STABLE after introduction of the new
	    extensible sysctl(3) interface NET_RT_IFLISTL
	    to query address lists (rev
	    <revnumber>231769</revnumber>).</entry>
	</row>

	<row>
	  <entry>803000</entry>
	  <entry>March 3, 2012</entry>
	  <entry>8.3-RELEASE.</entry>
	</row>

	<row>
	  <entry>803500</entry>
	  <entry>March 3, 2012</entry>
	  <entry xml:lang="en">8.3-STABLE after branching releng/8.3
	    (RELENG_8_3).</entry>
	</row>

	<row>
	  <entry>804000</entry>
	  <entry>March 28, 2013</entry>
	  <entry>8.4-RELEASE.</entry>
	</row>

	<row>
	  <entry>804500</entry>
	  <entry>March 28, 2013</entry>
	  <entry>8.4-STABLE after 8.4-RELEASE.</entry>
	</row>

	<row>
	  <entry>804504</entry>
	  <entry>September 9, 2014</entry>
	  <entry xml:lang="en">8.4-STABLE after FreeBSD-SA-14:18
	    (rev <revnumber>271305</revnumber>).</entry>
	</row>

	<row>
	  <entry>804505</entry>
	  <entry>September 16, 2014</entry>
	  <entry xml:lang="en">8.4-STABLE after FreeBSD-SA-14:19
	    (rev <revnumber>271668</revnumber>).</entry>
	</row>

	<row>
	  <entry>804506</entry>
	  <entry>October 21, 2014</entry>
	  <entry xml:lang="en">8.4-STABLE after FreeBSD-SA-14:21
	    (rev <revnumber>273413</revnumber>).</entry>
	</row>

	<row>
	  <entry>804507</entry>
	  <entry>November 4, 2014</entry>
	  <entry xml:lang="en">8.4-STABLE after FreeBSD-SA-14:23, FreeBSD-SA-14:24,
	    and FreeBSD-SA-14:25 (rev
	    <revnumber>274162</revnumber>).</entry>
	</row>

	<row>
	  <entry>804508</entry>
	  <entry>February 25, 2015</entry>
	  <entry xml:lang="en">8-STABLE after FreeBSD-EN-15:01.vt,
	    FreeBSD-EN-15:02.openssl, FreeBSD-EN-15:03.freebsd-update,
	    FreeBSD-SA-15:04.igmp, and FreeBSD-SA-15:05.bind (rev
	    <revnumber>279287</revnumber>).</entry>
	</row>

	<row>
	  <entry>900000</entry>
	  <entry>August 22, 2009</entry>
	  <entry>9.0-CURRENT.</entry>
	</row>

	<row>
	  <entry>900001</entry>
	  <entry>September 8, 2009</entry>
	  <entry xml:lang="en">9.0-CURRENT after importing x86emu, a software
	    emulator for real mode x86 CPU from OpenBSD.</entry>
	</row>

	<row>
	  <entry>900002</entry>
	  <entry xml:lang="en">September 23, 2009</entry>
	  <entry xml:lang="en">9.0-CURRENT after implementing the EVFILT_USER
	    kevent filter functionality.</entry>
	</row>

	<row>
	  <entry>900003</entry>
	  <entry>December 2, 2009</entry>
	  <entry xml:lang="en">9.0-CURRENT after addition of
	    <function>sigpause(3)</function> and PIE
	    support in csu.</entry>
	</row>

	<row>
	  <entry>900004</entry>
	  <entry>December 6, 2009</entry>
	  <entry xml:lang="en">9.0-CURRENT after addition of libulog and its
	    libutempter compatibility interface.</entry>
	</row>

	<row>
	  <entry>900005</entry>
	  <entry>December 12, 2009</entry>
	  <entry>9.0-CURRENT after addition of <function>sleepq_sleepcnt()</function>, which can be used to query the number of waiters on a specific waiting queue.</entry>
	</row>

	<row>
	  <entry>900006</entry>
	  <entry>January 4, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after change of the
	    <function>scandir(3)</function> and
	    <function>alphasort(3)</function> prototypes to
	    conform to SUSv4.</entry>
	</row>

	<row>
	  <entry>900007</entry>
	  <entry>January 13, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after the removal of utmp(5) and
	    the addition of utmpx (see
	    <function>getutxent(3)</function>) for improved
	    logging of user logins and system events.</entry>
	</row>

	<row>
	  <entry>900008</entry>
	  <entry>January 20, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after the import of BSDL bc/dc and
	    the deprecation of GNU bc/dc.</entry>
	</row>

	<row>
	  <entry>900009</entry>
	  <entry>January 26, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after the addition of SIOCGIFDESCR
	    and SIOCSIFDESCR ioctls to network interfaces.  These
	    ioctl can be used to manipulate interface description,
	    as inspired by OpenBSD.</entry>
	</row>

	<row>
	  <entry>900010</entry>
	  <entry>March 22, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after the import of zlib
	    1.2.4.</entry>
	</row>

	<row>
	  <entry>900011</entry>
	  <entry>April 24, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after adding soft-updates
	    journalling.</entry>
	</row>

	<row>
	  <entry>900012</entry>
	  <entry>May 10, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after adding liblzma, xz, xzdec,
	    and lzmainfo.</entry>
	</row>

	<row>
	  <entry>900013</entry>
	  <entry>May 24, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after bringing in USB fixes for
	    linux(4).</entry>
	</row>

	<row>
	  <entry>900014</entry>
	  <entry>June 10, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after adding Clang.</entry>
	</row>

	<row>
	  <entry>900015</entry>
	  <entry>July 22, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after the import of BSD grep.</entry>
	</row>

	<row>
	  <entry>900016</entry>
	  <entry>July 28, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after adding mti_zone to
	    struct malloc_type_internal.</entry>
	</row>

	<row>
	  <entry>900017</entry>
	  <entry>August 23, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after changing back default grep to
	    GNU grep and adding WITH_BSD_GREP knob.</entry>
	</row>

	<row>
	  <entry>900018</entry>
	  <entry>August 24, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after the
	    <function>pthread_kill(3)</function> -generated signal
	    is identified as SI_LWP in si_code.  Previously,
	    si_code was SI_USER.</entry>
	</row>

	<row>
	  <entry>900019</entry>
	  <entry>August 28, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after addition of the
	    MAP_PREFAULT_READ flag to
	    <function>mmap(2)</function>.</entry>
	</row>

	<row>
	  <entry>900020</entry>
	  <entry>September 9, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after adding drain functionality
	    to sbufs, which also changed the layout of
	    struct sbuf.</entry>
	</row>

	<row>
	  <entry>900021</entry>
	  <entry>September 13, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after DTrace has grown support
	    for userland tracing.</entry>
	</row>

	<row>
	  <entry>900022</entry>
	  <entry>October 2, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after addition of the BSDL man
	    utilities and retirement of GNU/GPL man
	    utilities.</entry>
	</row>

	<row>
	  <entry>900023</entry>
	  <entry>October 11, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after updating xz to git 20101010
	    snapshot.</entry>
	</row>

	<row>
	  <entry>900024</entry>
	  <entry>November 11, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after libgcc.a was replaced
	    by libcompiler_rt.a.</entry>
	</row>

	<row>
	  <entry>900025</entry>
	  <entry>November 12, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after the introduction of the
	    modularised congestion control.</entry>
	</row>

	<row>
	  <entry>900026</entry>
	  <entry>November 30, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after the introduction of Serial
	    Management Protocol (SMP) passthrough and the
	    XPT_SMP_IO and XPT_GDEV_ADVINFO CAM CCBs.</entry>
	</row>

	<row>
	  <entry>900027</entry>
	  <entry>December 5, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after the addition of log2 to
	    libm.</entry>
	</row>

	<row>
	  <entry>900028</entry>
	  <entry>December 21, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after the addition of the Hhook
	    (Helper Hook), Khelp (Kernel Helpers) and Object
	    Specific Data (OSD) KPIs.</entry>
	</row>

	<row>
	  <entry>900029</entry>
	  <entry>December 28, 2010</entry>
	  <entry xml:lang="en">9.0-CURRENT after the modification of the TCP
	    stack to allow Khelp modules to interact with it via
	    helper hook points and store per-connection data in
	    the TCP control block.</entry>
	</row>

	<row>
	  <entry>900030</entry>
	  <entry>January 12, 2011</entry>
	  <entry xml:lang="en">9.0-CURRENT after the update of libdialog to
	    version 20100428.</entry>
	</row>

	<row>
	  <entry>900031</entry>
	  <entry>February 7, 2011</entry>
	  <entry xml:lang="en">9.0-CURRENT after the addition of
	    <function>pthread_getthreadid_np(3)</function>.</entry>
	</row>

	<row>
	  <entry>900032</entry>
	  <entry>February 8, 2011</entry>
	  <entry xml:lang="en">9.0-CURRENT after the removal of the uio_yield
	    prototype and symbol.</entry>
	</row>

	<row>
	  <entry>900033</entry>
	  <entry>February 18, 2011</entry>
	  <entry xml:lang="en">9.0-CURRENT after the update of binutils to
	    version 2.17.50.</entry>
	</row>

	<row>
	  <entry>900034</entry>
	  <entry>March 8, 2011</entry>
	  <entry xml:lang="en">9.0-CURRENT after the struct sysvec
	    (sv_schedtail) changes.</entry>
	</row>

	<row>
	  <entry>900035</entry>
	  <entry>March 29, 2011</entry>
	  <entry xml:lang="en">9.0-CURRENT after the update of base gcc and
	    libstdc++ to the last GPLv2 licensed revision.</entry>
	</row>

	<row>
	  <entry>900036</entry>
	  <entry>April 18, 2011</entry>
	  <entry xml:lang="en">9.0-CURRENT after the removal of libobjc and
	    Objective-C support from the base system.</entry>
	</row>

	<row>
	  <entry>900037</entry>
	  <entry>May 13, 2011</entry>
	  <entry xml:lang="en">9.0-CURRENT after importing the libprocstat(3)
	    library and fuser(1) utility to the base
	    system.</entry>
	</row>

	<row>
	  <entry>900038</entry>
	  <entry>May 22, 2011</entry>
	  <entry xml:lang="en">9.0-CURRENT after adding a lock flag argument to
	    VFS_FHTOVP(9).</entry>
	</row>

	<row>
	  <entry>900039</entry>
	  <entry>June 28, 2011</entry>
	  <entry xml:lang="en">9.0-CURRENT after importing pf from OpenBSD
	    4.5.</entry>
	</row>

	<row>
	  <entry>900040</entry>
	  <entry>July 19, 2011</entry>
	  <entry xml:lang="en">Increase default MAXCPU for FreeBSD to 64 on
	    amd64 and ia64 and to 128 for XLP (mips).</entry>
	</row>

	<row>
	  <entry>900041</entry>
	  <entry>August 13, 2011</entry>
	  <entry xml:lang="en">9.0-CURRENT after the implementation of Capsicum
	    capabilities; fget(9) gains a rights argument.</entry>
	</row>

	<row>
	  <entry>900042</entry>
	  <entry>August 28, 2011</entry>
	  <entry xml:lang="en">Bump shared libraries' version numbers for
	    libraries whose ABI has changed in preparation for
	    9.0.</entry>
	</row>

	<row>
	  <entry>900043</entry>
	  <entry>September 2, 2011</entry>
	  <entry xml:lang="en">Add automatic detection of USB mass storage
	    devices which do not support the no synchronize cache
	    SCSI command.</entry>
	</row>

	<row>
	  <entry>900044</entry>
	  <entry>September 10, 2011</entry>
	  <entry xml:lang="en">Re-factor auto-quirk.  9.0-RELEASE.</entry>
	</row>

	<!-- Note: at one point 900045 was documented as follows, even
	  though it was never committed:
	<row>
	  <entry>900045</entry>
	  <entry>Oct 13, 2011</entry>
	  <entry>All non-compatibility system call entry points
	    have been prefixed with sys_.</entry>
	</row>
	-->

	<row>
	  <entry>900045</entry>
	  <entry>January 2, 2012</entry>
	  <entry xml:lang="en">9-CURRENT after MFC of true/false from
	    1000002.</entry>
	</row>

	<row>
	  <entry>900500</entry>
	  <entry>January 2, 2012</entry>
	  <entry>9.0-STABLE.</entry>
	</row>

	<row>
	  <entry>900501</entry>
	  <entry>January 6, 2012</entry>
	  <entry xml:lang="en">9.0-STABLE after merging of addition of the
	    posix_fadvise(2) system call.</entry>
	</row>

	<row>
	  <entry>900502</entry>
	  <entry>January 16, 2012</entry>
	  <entry xml:lang="en">9.0-STABLE after merging gperf 3.0.3</entry>
	</row>

	<row>
	  <entry>900503</entry>
	  <entry>February 15, 2012</entry>
	  <entry xml:lang="en">9.0-STABLE after introduction of the new
	    extensible sysctl(3) interface NET_RT_IFLISTL
	    to query address lists (rev
	    <revnumber>231768</revnumber>).</entry>
	</row>

	<row>
	  <entry>900504</entry>
	  <entry>March 3, 2012</entry>
	  <entry xml:lang="en">9.0-STABLE after changes related to mounting
	    of filesystem inside a jail (rev
	    <revnumber>232728</revnumber>).</entry>
	</row>

	<row>
	  <entry>900505</entry>
	  <entry>March 13, 2012</entry>
	  <entry xml:lang="en">9.0-STABLE after introduction of new tcp(4)
	    socket options: TCP_KEEPINIT, TCP_KEEPIDLE,
	    TCP_KEEPINTVL, and TCP_KEEPCNT (rev
	    <revnumber>232945</revnumber>).</entry>
	</row>

	<row>
	  <entry>900506</entry>
	  <entry>May 22, 2012</entry>
	  <entry xml:lang="en">9.0-STABLE after introduction of the
	    <function>quick_exit</function> function and
	    related changes required for C++11 (rev
	    <revnumber>235786</revnumber>).</entry>
	</row>

	<row>
	  <entry>901000</entry>
	  <entry>August 5, 2012</entry>
	  <entry>9.1-RELEASE.</entry>
	</row>

	<row>
	  <entry>901500</entry>
	  <entry>August 6, 2012</entry>
	  <entry xml:lang="en">9.1-STABLE after branching releng/9.1
	    (RELENG_9_1).</entry>
	</row>

	<row>
	  <entry>901501</entry>
	  <entry>November 11, 2012</entry>
	  <entry xml:lang="en">9.1-STABLE after LIST_PREV() added to queue.h
	    (rev <revnumber>242893</revnumber>) and KBI change in USB
	    serial devices (rev
	    <revnumber>240659</revnumber>).</entry>
	</row>

	<row>
	  <entry>901502</entry>
	  <entry>November 28, 2012</entry>
	  <entry xml:lang="en">9.1-STABLE after USB serial jitter buffer
	    requires rebuild of USB serial device modules.</entry>
	</row>

	<row>
	  <entry>901503</entry>
	  <entry>February 21, 2013</entry>
	  <entry xml:lang="en">9.1-STABLE after USB moved to the driver
	    structure requiring a rebuild of all USB modules.
	    Also indicates the presence of nmtree.</entry>
	</row>

	<row>
	  <entry>901504</entry>
	  <entry>March 15, 2013</entry>
	  <entry xml:lang="en">9.1-STABLE after install gained -l, -M, -N and
	    related flags and cat gained the -l option.</entry>
	</row>

	<row>
	  <entry>901505</entry>
	  <entry>June 13, 2013</entry>
	  <entry xml:lang="en">9.1-STABLE after fixes in ctfmerge bootstrapping
	    (rev <revnumber>249243</revnumber>).</entry>
	</row>

	<row>
	  <entry>902001</entry>
	  <entry>August 3, 2013</entry>
	  <entry xml:lang="en"><literal>releng/9.2</literal> branched from
	    <literal>stable/9</literal>
	    (rev <revnumber>253912</revnumber>).</entry>
	</row>

	<row>
	  <entry>902501</entry>
	  <entry>August 2, 2013</entry>
	  <entry xml:lang="en">9.2-STABLE after creation of
	    <literal>releng/9.2</literal> branch
	    (rev <revnumber>253913</revnumber>).</entry>
	</row>

	<row>
	  <entry>902502</entry>
	  <entry>August 26, 2013</entry>
	  <entry xml:lang="en">9.2-STABLE after inclusion of the
	    <literal>PIM_RESCAN</literal> CAM path inquiry flag
	    (rev <revnumber>254938</revnumber>).</entry>
	</row>

	<row>
	  <entry>902503</entry>
	  <entry>August 27, 2013</entry>
	  <entry xml:lang="en">9.2-STABLE after inclusion of the
	    <literal>SI_UNMAPPED</literal> cdev flag
	    (rev <revnumber>254979</revnumber>).</entry>
	</row>

	<row>
	  <entry>902504</entry>
	  <entry>October 22, 2013</entry>
	  <entry xml:lang="en">9.2-STABLE after inclusion of support for
	    <quote>first boot</quote> <citerefentry><refentrytitle>rc</refentrytitle><manvolnum>8</manvolnum></citerefentry> scripts
	    (rev <revnumber>256917</revnumber>).</entry>
	</row>

	<row>
	  <entry>902505</entry>
	  <entry>December 12, 2013</entry>
	  <entry xml:lang="en">9.2-STABLE after Heimdal encoding fix
	    (rev <revnumber>259448</revnumber>).</entry>
	</row>

	<row>
	  <entry>902506</entry>
	  <entry>December 31, 2013</entry>
	  <entry xml:lang="en">9-STABLE after MAP_STACK fixes
	    (rev <revnumber>260082</revnumber>).</entry>
	</row>

	<row>
	  <entry>902507</entry>
	  <entry>March 5, 2014</entry>
	  <entry xml:lang="en">9-STABLE after upgrade of libc++ to 3.4 release
	    (rev <revnumber>262801</revnumber>).</entry>
	</row>

	<row>
	  <entry>902508</entry>
	  <entry>March 14, 2014</entry>
	  <entry xml:lang="en">9-STABLE after merge of the Radeon KMS driver
	    (rev <revnumber>263170</revnumber>).</entry>
	</row>

	<row>
	  <entry>902509</entry>
	  <entry>March 21, 2014</entry>
	  <entry xml:lang="en">9-STABLE after upgrade of llvm/clang to 3.4 release
	    (rev <revnumber>263509</revnumber>).</entry>
	</row>

	<row>
	  <entry>902510</entry>
	  <entry>March 27, 2014</entry>
	  <entry xml:lang="en">9-STABLE after merge of the vt(4) driver
	    (rev <revnumber>263818</revnumber>).</entry>
	</row>

	<row>
	  <entry>902511</entry>
	  <entry>March 27, 2014</entry>
	  <entry xml:lang="en">9-STABLE after FreeBSD-SA-14:06.openssl
	    (rev <revnumber>264289</revnumber>).</entry>
	</row>

	<row>
	  <entry>902512</entry>
	  <entry>April 30, 2014</entry>
	  <entry xml:lang="en">9-STABLE after FreeBSD-SA-14:08.tcp
	    (rev <revnumber>265123</revnumber>).</entry>
	</row>

	<row>
	  <entry>903000</entry>
	  <entry>June 20, 2014</entry>
	  <entry xml:lang="en">9-RC1 <literal>releng/9.3</literal> branch
	    (rev <revnumber>267656</revnumber>).</entry>
	</row>

	<row>
	  <entry>903500</entry>
	  <entry>June 20, 2014</entry>
	  <entry xml:lang="en">9.3-STABLE <literal>releng/9.3</literal> branch
	    (rev <revnumber>267657</revnumber>).</entry>
	</row>

	<row>
	  <entry>903501</entry>
	  <entry>July 8, 2014</entry>
	  <entry xml:lang="en">9-STABLE after FreeBSD-SA-14:17.kmem
	    (rev <revnumber>268433</revnumber>).</entry>
	</row>

	<row>
	  <entry>903502</entry>
	  <entry>August 19, 2014</entry>
	  <entry xml:lang="en">9-STABLE after <literal>SOCK_DGRAM</literal>
	    bug fix (rev <revnumber>269789</revnumber>).</entry>
	</row>

	<row>
	  <entry>903503</entry>
	  <entry>September 9, 2014</entry>
	  <entry xml:lang="en">9-STABLE after FreeBSD-SA-14:18
	    (rev <revnumber>269687</revnumber>).</entry>
	</row>

	<row>
	  <entry>903504</entry>
	  <entry>September 16, 2014</entry>
	  <entry xml:lang="en">9-STABLE after FreeBSD-SA-14:19
	    (rev <revnumber>271668</revnumber>).</entry>
	</row>

	<row>
	  <entry>903505</entry>
	  <entry>October 21, 2014</entry>
	  <entry xml:lang="en">9-STABLE after FreeBSD-SA-14:20, FreeBSD-SA-14:21,
	    and FreeBSD-SA-14:22 (rev
	    <revnumber>273412</revnumber>).</entry>
	</row>

	<row>
	  <entry>903506</entry>
	  <entry>November 4, 2014</entry>
	  <entry xml:lang="en">9-STABLE after FreeBSD-SA-14:23, FreeBSD-SA-14:24,
	    and FreeBSD-SA-14:25 (rev
	    <revnumber>274162</revnumber>).</entry>
	</row>

	<row>
	  <entry>903507</entry>
	  <entry>December 13, 2014</entry>
	  <entry xml:lang="en">9-STABLE after merging an important fix to the LLVM
	    vectorizer, which could lead to buffer overruns in some
	    cases (rev <revnumber>275742</revnumber>).</entry>
	</row>

	<row>
	  <entry>903508</entry>
	  <entry>February 25, 2015</entry>
	  <entry xml:lang="en">9-STABLE after FreeBSD-EN-15:01.vt,
	    FreeBSD-EN-15:02.openssl, FreeBSD-EN-15:03.freebsd-update,
	    FreeBSD-SA-15:04.igmp, and FreeBSD-SA-15:05.bind (rev
	    <revnumber>279287</revnumber>).</entry>
	</row>

	<row>
	  <entry>903509</entry>
	  <entry>February 29, 2016</entry>
	  <entry xml:lang="en">9-STABLE after bumping the default value of
	    <varname>compat.linux.osrelease</varname> to
	    <literal>2.6.18</literal> to support the linux-c6-* ports
	    out of the box (rev <revnumber>296219</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000000</entry>
	  <entry>September 26, 2011</entry>
	  <entry>10.0-CURRENT.</entry>
	</row>

	<row>
	  <entry>1000001</entry>
	  <entry>November 4, 2011</entry>
	  <entry xml:lang="en">10-CURRENT after addition of the posix_fadvise(2)
	    system call.</entry>
	</row>

	<row>
	  <entry>1000002</entry>
	  <entry>December 12, 2011</entry>
	  <entry xml:lang="en">10-CURRENT after defining boolean true/false in
	    sys/types.h, sizeof(bool) may have changed (rev
	    <revnumber>228444</revnumber>).  10-CURRENT after
	    xlocale.h was introduced (rev
	    <revnumber>227753</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000003</entry>
	  <entry>December 16, 2011</entry>
	  <entry xml:lang="en">10-CURRENT after major changes to carp(4),
	    changing size of struct in_aliasreq,
	    struct in6_aliasreq (rev
	    <revnumber>228571</revnumber>) and straitening arguments
	    check of SIOCAIFADDR (rev
	    <revnumber>228574</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000004</entry>
	  <entry>January 1, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after the removal of skpc(9) and the
	    addition of memcchr(9) (rev
	    <revnumber>229200</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000005</entry>
	  <entry>January 16, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after the removal of support for
	    SIOCSIFADDR, SIOCSIFNETMASK, SIOCSIFBRDADDR,
	    SIOCSIFDSTADDR ioctls (rev
	    <revnumber>230207</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000006</entry>
	  <entry>January 26, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after introduction of read capacity
	    data asynchronous notification in the cam(4) layer
	    (rev <revnumber>230590</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000007</entry>
	  <entry>February 5, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after introduction of new tcp(4)
	    socket options: TCP_KEEPINIT, TCP_KEEPIDLE,
	    TCP_KEEPINTVL, and TCP_KEEPCNT (rev
	    <revnumber>231025</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000008</entry>
	  <entry>February 11, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after introduction of the new
	    extensible sysctl(3) interface NET_RT_IFLISTL
	    to query address lists (rev
	    <revnumber>231505</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000009</entry>
	  <entry>February 25, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after import of libarchive 3.0.3
	    (rev <revnumber>232153</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000010</entry>
	  <entry>March 31, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after xlocale cleanup (rev
	    <revnumber>233757</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000011</entry>
	  <entry>April 16, 2012</entry>
	  <entry xml:lang="en">10-CURRENT import of LLVM/Clang 3.1 trunk r154661
	    (rev <revnumber>234353</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000012</entry>
	  <entry>May 2, 2012</entry>
	  <entry xml:lang="en">10-CURRENT jemalloc import
	    (rev <revnumber>234924</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000013</entry>
	  <entry>May 22, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after byacc import
	    (rev <revnumber>235788</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000014</entry>
	  <entry>June 27, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after BSD sort becoming the default
	    sort (rev <revnumber>237629</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000015</entry>
	  <entry>July 12, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after import of OpenSSL 1.0.1c
	    (rev <revnumber>238405</revnumber>).</entry>
	</row>

	<row>
	  <entry xml:lang="en">(not changed)</entry>
	  <entry>July 13, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after the fix for LLVM/Clang 3.1
	    regression (rev <revnumber>238429</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000016</entry>
	  <entry>August 8, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after KBI change in <citerefentry><refentrytitle>ucom</refentrytitle><manvolnum>4</manvolnum></citerefentry>
	    (rev <revnumber>239179</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000017</entry>
	  <entry>August 8, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after adding streams feature to the
	    USB stack (rev <revnumber>239214</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000018</entry>
	  <entry>September 8, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after major rewrite of <citerefentry><refentrytitle>pf</refentrytitle><manvolnum>4</manvolnum></citerefentry>
	    (rev <revnumber>240233</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000019</entry>
	  <entry>October 6, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after <citerefentry><refentrytitle>pfil</refentrytitle><manvolnum>9</manvolnum></citerefentry> KBI/KPI changed
	    to supply packets in net byte order to AF_INET
	    filter hooks (rev <revnumber>241245</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000020</entry>
	  <entry>October 16, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after the network interface cloning
	    KPI changed and struct if_clone becoming opaque (rev
	    <revnumber>241610</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000021</entry>
	  <entry>October 22, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after removal of support for
	    non-MPSAFE filesystems and addition of support for
	    FUSEFS (rev
	    <revnumber>241519</revnumber>,
	    <revnumber>241897</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000022</entry>
	  <entry>October 22, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after the entire IPv4 stack switched
	    to network byte order for IP packet header storage
	    (rev <revnumber>241913</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000023</entry>
	  <entry>November 5, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after jitter buffer in the common USB
	    serial driver code, to temporarily store characters
	    if the TTY buffer is full.  Add flow stop and start
	    signals when this happens (rev
	    <revnumber>242619</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000024</entry>
	  <entry>November 5, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after clang was made the default
	    compiler on i386 and amd64
	    (rev <revnumber>242624</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000025</entry>
	  <entry>November 17, 2012</entry>
	  <entry xml:lang="en">10-CURRENT after the sin6_scope_id member
	    variable in struct sockaddr_in6 was changed to being
	    filled by the kernel before passing the structure to
	    the userland via sysctl or routing socket.  This means
	    the KAME-specific embedded scope id in
	    sin6_addr.s6_addr[2] is always cleared in userland
	    application (rev <revnumber>243443</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000026</entry>
	  <entry>January 11, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after install gained the -N flag (rev
	    <revnumber>245313</revnumber>).  May also be used to
	    indicate the presence of nmtree.</entry>
	</row>

	<row>
	  <entry>1000027</entry>
	  <entry>January 29, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after cat gained the -l flag (rev
	    <revnumber>246083</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000028</entry>
	  <entry>February 13, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after USB moved to the driver
	    structure requiring a rebuild of all USB modules (rev
	    <revnumber>246759</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000029</entry>
	  <entry>March 4, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after the introduction of tickless
	    callout facility which also changed the layout of struct
	    callout (rev <revnumber>247777</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000030</entry>
	  <entry>March 12, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after KPI breakage introduced in the
	    VM subsystem to support read/write locking (rev
	    <revnumber>248084</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000031</entry>
	  <entry>April 26, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after the dst parameter of the
	    ifnet <function>if_output</function> method was
	    changed to take const qualifier (rev
	    <revnumber>249925</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000032</entry>
	  <entry>May 1, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after the introduction of the
	    <function>accept4</function> (rev
	    <revnumber>250154</revnumber>) and
	    <function>pipe2</function> (rev
	    <revnumber>250159</revnumber>) system calls.</entry>
	</row>

	<row>
	  <entry>1000033</entry>
	  <entry>May 21, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after flex 2.5.37 import (rev
	    <revnumber>250881</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000034</entry>
	  <entry>June 3, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after the addition of these
	    functions to libm: <function>cacos</function>,
	    <function>cacosf</function>,
	    <function>cacosh</function>,
	    <function>cacoshf</function>,
	    <function>casin</function>,
	    <function>casinf</function>,
	    <function>casinh</function>,
	    <function>casinhf</function>,
	    <function>catan</function>,
	    <function>catanf</function>,
	    <function>catanh</function>,
	    <function>catanhf</function>,
	    <function>logl</function>,
	    <function>log2l</function>,
	    <function>log10l</function>,
	    <function>log1pl</function>,
	    <function>expm1l</function> (rev
	    <revnumber>251294</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000035</entry>
	  <entry>June 8, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after the introduction of the
	    <function>aio_mlock</function> system call (rev
	    <revnumber>251526</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000036</entry>
	  <entry>July 9, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after the addition of a new function
	    to the kernel GSSAPI module's
	    function call interface (rev
	    <revnumber>253049</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000037</entry>
	  <entry>July 9, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after the migration of statistics
	    structures to PCPU counters.
	    Changed structures include: <literal>ahstat</literal>,
	    <literal>arpstat</literal>,
	    <literal>espstat</literal>,
	    <literal>icmp6_ifstat</literal>,
	    <literal>icmp6stat</literal>,
	    <literal>in6_ifstat</literal>,
	    <literal>ip6stat</literal>,
	    <literal>ipcompstat</literal>,
	    <literal>ipipstat</literal>,
	    <literal>ipsecstat</literal>,
	    <literal>mrt6stat</literal>,
	    <literal>mrtstat</literal>,
	    <literal>pfkeystat</literal>,
	    <literal>pim6stat</literal>,
	    <literal>pimstat</literal>,
	    <literal>rip6stat</literal>,
	    <literal>udpstat</literal> (rev
	    <revnumber>253081</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000038</entry>
	  <entry>July 16, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after making <literal>ARM
	      EABI</literal> the default ABI on arm,
	    armeb, armv6, and armv6eb architectures
	    (rev <revnumber>253396</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000039</entry>
	  <entry>July 22, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after <literal>CAM</literal>
	    and <citerefentry><refentrytitle>mps</refentrytitle><manvolnum>4</manvolnum></citerefentry> driver scanning changes
	    (rev <revnumber>253549</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000040</entry>
	  <entry>July 24, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after addition of libusb
	    pkgconf files (rev <revnumber>253638</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000041</entry>
	  <entry>August 5, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after change from
	    <function>time_second</function> to
	    <function>time_uptime</function>
	    in <literal>PF_INET6</literal>
	    (rev <revnumber>253970</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000042</entry>
	  <entry>August 9, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after VM subsystem change to unify
	    soft and hard busy mechanisms
	    (rev <revnumber>254138</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000043</entry>
	  <entry>August 13, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after <varname>WITH_ICONV</varname> is
	    enabled by default.  A new <citerefentry><refentrytitle>src.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry> option,
	    <varname>WITH_LIBICONV_COMPAT</varname> (disabled by
	    default) adds <function>libiconv_open</function> to
	    provide compatibility with the
	    <package>libiconv</package> port (rev
	    <revnumber>254273</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000044</entry>
	  <entry>August 15, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after <literal>libc.so</literal>
	    conversion to an <citerefentry><refentrytitle>ld</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	    script (rev
	    <revnumber>251668</revnumber>,
	    <revnumber>254358</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000045</entry>
	  <entry>August 15, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after devfs programming interface
	    change by replacing the cdevsw flag
	    <literal>D_UNMAPPED_IO</literal> with the struct cdev
	    flag <literal>SI_UNMAPPED</literal> (rev
	    <revnumber>254389</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000046</entry>
	  <entry>August 19, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after addition of
	    <literal>M_PROTO[9-12]</literal> and removal of
	    <literal>M_FRAG|M_FIRSTFRAG|M_LASTFRAG</literal>
	    mbuf flags (rev <revnumber>254524</revnumber>,
	    <revnumber>254526</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000047</entry>
	  <entry>August 21, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after <citerefentry><refentrytitle>stat</refentrytitle><manvolnum>2</manvolnum></citerefentry> update to allow
	    storing some Windows/DOS and CIFS file attributes
	    as <citerefentry><refentrytitle>stat</refentrytitle><manvolnum>2</manvolnum></citerefentry> flags (rev
	    <revnumber>254627</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000048</entry>
	  <entry>August 22, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after modification of structure
	    <literal>xsctp_inpcb</literal>
	    (rev <revnumber>254672</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000049</entry>
	  <entry>August 24, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after <citerefentry><refentrytitle>physio</refentrytitle><manvolnum>9</manvolnum></citerefentry> support for
	    devices that do not function properly with split
	    I/O, such as <citerefentry><refentrytitle>sa</refentrytitle><manvolnum>4</manvolnum></citerefentry> (rev
	    <revnumber>254760</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000050</entry>
	  <entry>August 24, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after modifications of structure
	    <literal>mbuf</literal> (rev
	    <revnumber>254780</revnumber>,
	    <revnumber>254799</revnumber>,
	    <revnumber>254804</revnumber>,
	    <revnumber>254807</revnumber>
	    <revnumber>254842</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000051</entry>
	  <entry>August 25, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after Radeon KMS driver import
	    (rev <revnumber>254885</revnumber>,
	    <revnumber>254887</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000052</entry>
	  <entry>September 3, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after import of NetBSD
	    <literal>libexecinfo</literal> is connected to the
	    build (rev <revnumber>255180</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000053</entry>
	  <entry>September 6, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after API and ABI changes to the
	    Capsicum framework (rev
	    <revnumber>255305</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000054</entry>
	  <entry>September 6, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after <literal>gcc</literal> and
	    <literal>libstdc++</literal> are no longer built by
	    default (rev <revnumber>255321</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000055</entry>
	  <entry>September 6, 2013</entry>
	  <entry xml:lang="en">10-CURRENT after addition of
	    <literal>MMAP_32BIT</literal> <citerefentry><refentrytitle>mmap</refentrytitle><manvolnum>2</manvolnum></citerefentry> flag
	    (rev <revnumber>255426</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000100</entry>
	  <entry>December 7, 2013</entry>
	  <entry xml:lang="en"><literal>releng/10.0</literal> branched from
	    <literal>stable/10</literal>
	    (rev <revnumber>259065</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000500</entry>
	  <entry>October 10, 2013</entry>
	  <entry xml:lang="en">10-STABLE after branch from <literal>head/</literal>
	    (rev <revnumber>256283</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000501</entry>
	  <entry>October 22, 2013</entry>
	  <entry xml:lang="en">10-STABLE after addition of first-boot <citerefentry><refentrytitle>rc</refentrytitle><manvolnum>8</manvolnum></citerefentry>
	    support (rev <revnumber>256916</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000502</entry>
	  <entry>November 20, 2013</entry>
	  <entry xml:lang="en">10-STABLE after removal of iconv symbols from
	    <literal>libc.so.7</literal>
	    (rev <revnumber>258398</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000510</entry>
	  <entry>December 7, 2013</entry>
	  <entry xml:lang="en"><literal>releng/10.0</literal> __FreeBSD_version
	    update to prevent the value from going backwards
	    (rev <revnumber>259067</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000700</entry>
	  <entry>December 7, 2013</entry>
	  <entry xml:lang="en">10-STABLE after <literal>releng/10.0</literal> branch
	    (rev <revnumber>259069</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000701</entry>
	  <entry>December 15, 2013</entry>
	  <entry xml:lang="en">10.0-STABLE after Heimdal encoding fix
	    (rev <revnumber>259447</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000702</entry>
	  <entry>December 31, 2013</entry>
	  <entry xml:lang="en">10-STABLE after MAP_STACK fixes
	    (rev <revnumber>260135</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000703</entry>
	  <entry>March 5, 2014</entry>
	  <entry xml:lang="en">10-STABLE after upgrade of libc++ to 3.4 release
	    (rev <revnumber>262801</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000704</entry>
	  <entry>March 7, 2014</entry>
	  <entry xml:lang="en">10-STABLE after MFC of the vt(4) driver
	    (rev <revnumber>262861</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000705</entry>
	  <entry>March 21, 2014</entry>
	  <entry xml:lang="en">10-STABLE after upgrade of llvm/clang to 3.4 release
	    (rev <revnumber>263508</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000706</entry>
	  <entry>April 6, 2014</entry>
	  <entry xml:lang="en">10-STABLE after GCC support for
	    <literal>__block</literal> definition (rev
	    <revnumber>264214</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000707</entry>
	  <entry>April 8, 2014</entry>
	  <entry xml:lang="en">10-STABLE after FreeBSD-SA-14:06.openssl (rev
	    <revnumber>264289</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000708</entry>
	  <entry>April 30, 2014</entry>
	  <entry xml:lang="en">10-STABLE after FreeBSD-SA-14:07.devfs,
	    FreeBSD-SA-14:08.tcp, and FreeBSD-SA-14:09.openssl (rev
	    <revnumber>265122</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000709</entry>
	  <entry>May 13, 2014</entry>
	  <entry xml:lang="en">10-STABLE after support for UDP-Lite protocol (RFC
	    3828) (rev <revnumber>265946</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000710</entry>
	  <entry>June 13, 2014</entry>
	  <entry xml:lang="en">10-STABLE after changes to <citerefentry><refentrytitle>strcasecmp</refentrytitle><manvolnum>3</manvolnum></citerefentry>, moving
	    <literal>strcasecmp_l()</literal> and
	    <literal>strncasecmp_l()</literal> from
	    <filename>&lt;string.h&gt;</filename> to
	    <filename>&lt;strings.h&gt;</filename> for POSIX 2008
	    compliance (rev <revnumber>267465</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000711</entry>
	  <entry>July 8, 2014</entry>
	  <entry xml:lang="en">10-STABLE after FreeBSD-SA-14:17.kmem
	    (rev <revnumber>268432</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000712</entry>
	  <entry>August 1, 2014</entry>
	  <entry xml:lang="en">10-STABLE after <citerefentry><refentrytitle>nfsd</refentrytitle><manvolnum>8</manvolnum></citerefentry> 4.1 merge
	    (rev <revnumber>269398</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000713</entry>
	  <entry>August 3, 2014</entry>
	  <entry xml:lang="en">10-STABLE after <citerefentry><refentrytitle>regex</refentrytitle><manvolnum>3</manvolnum></citerefentry> library update
	    to add <quote>&gt;</quote> and <quote>&lt;</quote>
	    delimiters (rev <revnumber>269484</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000714</entry>
	  <entry>August 3, 2014</entry>
	  <entry xml:lang="en">10-STABLE after <literal>SOCK_DGRAM</literal>
	    bug fix (rev <revnumber>269490</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000715</entry>
	  <entry>September 9, 2014</entry>
	  <entry xml:lang="en">10-STABLE after FreeBSD-SA-14:18
	    (rev <revnumber>269686</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000716</entry>
	  <entry>September 16, 2014</entry>
	  <entry xml:lang="en">10-STABLE after FreeBSD-SA-14:19
	    (rev <revnumber>271667</revnumber>).</entry>
	</row>

	<row>
	  <entry>1000717</entry>
	  <entry>September 18, 2014</entry>
	  <entry xml:lang="en">10-STABLE after i915 HW context support
	    (rev <revnumber>271816</revnumber>).</entry>
	</row>

	<row>
	  <entry>1001000</entry>
	  <entry>October 2, 2014</entry>
	  <entry xml:lang="en">10.1-RC1 after releng/10.1 branch
	    (rev <revnumber>272463</revnumber>).</entry>
	</row>

	<row>
	  <entry>1001500</entry>
	  <entry>October 2, 2014</entry>
	  <entry xml:lang="en">10-STABLE after releng/10.1 branch
	    (rev <revnumber>272464</revnumber>).</entry>
	</row>

	<row>
	  <entry>1001501</entry>
	  <entry>October 21, 2014</entry>
	  <entry xml:lang="en">10-STABLE after FreeBSD-SA-14:20, FreeBSD-SA-14:22,
	    and FreeBSD-SA-14:23 (rev
	    <revnumber>273411</revnumber>).</entry>
	</row>

	<row>
	  <entry>1001502</entry>
	  <entry>November 4, 2014</entry>
	  <entry xml:lang="en">10-STABLE after FreeBSD-SA-14:23, FreeBSD-SA-14:24,
	    and FreeBSD-SA-14:25 (rev
	    <revnumber>274162</revnumber>).</entry>
	</row>

	<row>
	  <entry>1001503</entry>
	  <entry>November 25, 2014</entry>
	  <entry xml:lang="en">10-STABLE after merging new libraries/utilities (dpv
	    and figpar) for data throughput visualization (rev
	    <revnumber>275040</revnumber>).</entry>
	</row>

	<row>
	  <entry>1001504</entry>
	  <entry>December 13, 2014</entry>
	  <entry xml:lang="en">10-STABLE after merging an important fix to the LLVM
	    vectorizer, which could lead to buffer overruns in some
	    cases (rev <revnumber>275742</revnumber>).</entry>
	</row>

	<row>
	  <entry>1001505</entry>
	  <entry>January 3, 2015</entry>
	  <entry xml:lang="en">10-STABLE after merging some arm constants in r276312
	    (rev <revnumber>276633</revnumber>).</entry>
	</row>

	<row>
	  <entry>1001506</entry>
	  <entry>January 12, 2015</entry>
	  <entry xml:lang="en">10-STABLE after merging max table size update for
	    yacc (rev <revnumber>277087</revnumber>).</entry>
	</row>

	<row>
	  <entry>1001507</entry>
	  <entry>January 27, 2015</entry>
	  <entry xml:lang="en">10-STABLE after changes to the UDP tunneling callback
	    to provide a context pointer and the source sockaddr (rev
	    <revnumber>277790</revnumber>).</entry>
	</row>

	<row>
	  <entry>1001508</entry>
	  <entry>February 18, 2015</entry>
	  <entry xml:lang="en">10-STABLE after addition of the
	    <literal>CDAI_TYPE_EXT_INQ</literal> request type (rev
	    <revnumber>278974</revnumber>).</entry>
	</row>

	<row>
	  <entry>1001509</entry>
	  <entry>February 25, 2015</entry>
	  <entry xml:lang="en">10-STABLE after FreeBSD-EN-15:01.vt,
	    FreeBSD-EN-15:02.openssl, FreeBSD-EN-15:03.freebsd-update,
	    FreeBSD-SA-15:04.igmp, and FreeBSD-SA-15:05.bind (rev
	    <revnumber>279287</revnumber>).</entry>
	</row>

	<row>
	  <entry>1001511</entry>
	  <entry>19 March, 2015</entry>
	  <entry xml:lang="en">10-STABLE after <filename>sys/capability.h</filename>
	    is renamed to <filename>sys/capsicum.h</filename> (rev
	    <revnumber>280224/</revnumber>).</entry>
	</row>

	<row>
	  <entry>1001512</entry>
	  <entry>24 March, 2015</entry>
	  <entry xml:lang="en">10-STABLE after addition of new mtio(4), sa(4) ioctls
	    (rev <revnumber>281954</revnumber>).</entry>
	</row>

	<row>
	  <entry>1001513</entry>
	  <entry>24 April, 2015</entry>
	  <entry xml:lang="en">10-STABLE after starting the process of removing the
	    use of the deprecated "M_FLOWID" flag from the network
	    code (rev <revnumber>281955</revnumber>).</entry>
	</row>

	<row>
	  <entry>1002000</entry>
	  <entry>24 July, 2015</entry>
	  <entry xml:lang="en"><literal>releng/10.2</literal> branched from
	    10-STABLE (rev <revnumber>285830</revnumber>).</entry>
	</row>

	<row>
	  <entry>1002500</entry>
	  <entry>24 July, 2015</entry>
	  <entry xml:lang="en">10-STABLE after <literal>releng/10.2</literal>
	    branched from 10-STABLE (rev
	    <revnumber>285831</revnumber>).</entry>
	</row>

	<row>
	  <entry>1002501</entry>
	  <entry>8 October, 2015</entry>
	  <entry xml:lang="en">10-STABLE after merge of ZFS changes that affected
	    the internal interface of zfeature_info structure (rev
	    <revnumber>28857</revnumber>).</entry>
	</row>


	<row>
	  <entry>1100000</entry>
	  <entry>October 10, 2013</entry>
	  <entry xml:lang="en">11.0-CURRENT
	    (rev <revnumber>256284</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100001</entry>
	  <entry>October 19, 2013</entry>

	  <entry xml:lang="en">11.0-CURRENT after addition of support for "first
	    boot" <filename>rc.d</filename> scripts, so ports can make
	    use of this (rev <revnumber>256776</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100002</entry>
	  <entry>November 5, 2013</entry>

	  <entry xml:lang="en">11.0-CURRENT after dropping support for historic
	    ioctls (rev <revnumber>257696</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100003</entry>
	  <entry>November 17, 2013</entry>
	  <entry xml:lang="en">11.0-CURRENT after iconv changes
	    (rev <revnumber>258284</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100004</entry>
	  <entry>December 15, 2013</entry>
	  <entry xml:lang="en">11.0-CURRENT after the behavior change of
	    <function>gss_pseudo_random</function> introduced in
	    r259286 (rev <revnumber>259424</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100005</entry>
	  <entry>December 28, 2013</entry>

	  <entry xml:lang="en">11.0-CURRENT after r259951 - Do not coalesce entries
	    in <function>vm_map_stack()</function> (rev
	    <revnumber>260010</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100006</entry>
	  <entry>January 28, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after upgrades of libelf and libdwarf
	    (rev <revnumber>261246</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100007</entry>
	  <entry>January 30, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after upgrade of libc++ to 3.4 release
	    (rev <revnumber>261283</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100008</entry>
	  <entry>February 14, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after libc++ 3.4 ABI compatibility fix
	    (rev <revnumber>261801</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100009</entry>
	  <entry>February 16, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after upgrade of llvm/clang to 3.4
	    release (rev <revnumber>261991</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100010</entry>
	  <entry>February 28, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after upgrade of ncurses to 5.9 release
	    (rev <revnumber>262629</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100011</entry>
	  <entry>March 13, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after ABI change in struct if_data
	    (rev <revnumber>263102</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100012</entry>
	  <entry>March 14, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after removal of Novell IPX protocol
	    support (rev <revnumber>263140</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100013</entry>
	  <entry>March 14, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after removal of AppleTalk protocol
	    support (rev <revnumber>263152</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100014</entry>
	  <entry>March 16, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after renaming
	    <filename>&lt;sys/capability.h&gt;</filename> to
	    <filename>&lt;sys/capsicum.h&gt;</filename> to avoid a
	    clash with similarly named headers in other operating
	    systems.  A compatibility header is left in place to limit
	    build breakage, but will be deprecated in due course
	    (rev <revnumber>263235</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100015</entry>
	  <entry>March 22, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after <literal>cnt</literal> rename to
	    <literal>vm_cnt</literal> (rev
	    <revnumber>263620</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100016</entry>
	  <entry>March 23, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after addition of
	    <literal>armv6hf</literal> <varname>TARGET_ARCH</varname>
	    (rev <revnumber>263660</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100017</entry>
	  <entry>April 4, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after GCC support for
	    <literal>__block</literal> definition (rev
	    <revnumber>264121</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100018</entry>
	  <entry>April 6, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after support for UDP-Lite protocol (RFC
	    3828) (rev <revnumber>264212</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100019</entry>
	  <entry>April 8, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after FreeBSD-SA-14:06.openssl (rev
	    <revnumber>264265</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100020</entry>
	  <entry>May 1, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after removing lindev in favor of having
	    /dev/full by default (rev
	    <revnumber>265212</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100021</entry>
	  <entry>May 6, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after <filename>src.opts.mk</filename>
	    changes, decoupling <citerefentry><refentrytitle>make.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry> from
	    <command>buildworld</command> (rev
	    <revnumber>265419</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100022</entry>
	  <entry>May 30, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after changes to <citerefentry><refentrytitle>strcasecmp</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
	    moving <literal>strcasecmp_l()</literal> and
	    <literal>strncasecmp_l()</literal> from
	    <filename>&lt;string.h&gt;</filename> to
	    <filename>&lt;strings.h&gt;</filename> for POSIX 2008
	    compliance (rev <revnumber>266865</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100023</entry>
	  <entry>June 13, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after the CUSE library and kernel module
	    have been attached to the build by default (rev
	    <revnumber>267440</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100024</entry>
	  <entry>June 27, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after <citerefentry><refentrytitle>sysctl</refentrytitle><manvolnum>3</manvolnum></citerefentry>
	    <acronym>API</acronym> change (rev
	    <revnumber>267992</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100025</entry>
	  <entry>June 30, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after <citerefentry><refentrytitle>regex</refentrytitle><manvolnum>3</manvolnum></citerefentry> library update
	    to add <quote>&gt;</quote> and <quote>&lt;</quote>
	    delimiters (rev <revnumber>268066</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100026</entry>
	  <entry>July 1, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after the internal interface between the
	    NFS modules, including the krpc, was changed by (rev
	    <revnumber>268115</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100027</entry>
	  <entry>July 8, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after FreeBSD-SA-14:17.kmem
	    (rev <revnumber>268431</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100028</entry>
	  <entry>July 21, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after <literal>hdestroy()</literal>
	    compliance fix changed <acronym>ABI</acronym> (rev
	    <revnumber>268945</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100029</entry>
	  <entry>August 3, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after <literal>SOCK_DGRAM</literal>
	    bug fix (rev <revnumber>269489</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100030</entry>
	  <entry>September 1, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after <literal>SOCK_RAW</literal>
	    sockets were changed to not modify packets at all (rev
	    <revnumber>270929</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100031</entry>
	  <entry>September 9, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after FreeBSD-SA-14:18.openssl
	    (rev <revnumber>269686</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100032</entry>
	  <entry>September 11, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after API changes to
	    <literal>ifa_ifwithbroadaddr</literal>,
	    <literal>ifa_ifwithdstaddr</literal>,
	    <literal>ifa_ifwithnet</literal>, and
	    <literal>ifa_ifwithroute</literal> (rev
	    <revnumber>271438</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100033</entry>
	  <entry>September 9, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after changing
	    <literal>access</literal>, <literal>eaccess</literal>, and
	    <literal>faccessat</literal> to validate the mode argument
	    (rev <revnumber>271657</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100034</entry>
	  <entry>September 16, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after FreeBSD-SA-14:19.tcp
	    (rev <revnumber>271666</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100035</entry>
	  <entry>September 17, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after i915 HW context support
	    (rev <revnumber>271705</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100036</entry>
	  <entry>September 17, 2014</entry>
	  <entry xml:lang="en">Version bump to have ABI note distinguish binaries
	    ready for strict <citerefentry><refentrytitle>mmap</refentrytitle><manvolnum>2</manvolnum></citerefentry> flags checking
	    (rev <revnumber>271724</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100037</entry>
	  <entry>October 6, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after addition of
	    <citerefentry><refentrytitle>explicit_bzero</refentrytitle><manvolnum>3</manvolnum></citerefentry> (rev
	    <revnumber>272673</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100038</entry>
	  <entry>October 11, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after cleanup of TCP wrapper headers
	    (rev <revnumber>272951</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100039</entry>
	  <entry>October 18, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after removal of
	    <literal>MAP_RENAME</literal> and
	    <literal>MAP_NORESERVE</literal> (rev
	    <revnumber>273250</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100040</entry>
	  <entry>October 21, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after FreeBSD-SA-14:23 (rev
	    <revnumber>273146</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100041</entry>
	  <entry>October 30, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after API changes to
	    <literal>syscall_register</literal>,
	    <literal>syscall32_register</literal>,
	    <literal>syscall_register_helper</literal> and
	    <literal>syscall32_register_helper</literal> (rev
	    <revnumber>273707</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100042</entry>
	  <entry>November 3, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after a change to <literal>struct
	      tcpcb</literal> (rev
	    <revnumber>274046</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100043</entry>
	  <entry>November 4, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after enabling <citerefentry><refentrytitle>vt</refentrytitle><manvolnum>4</manvolnum></citerefentry> by default
	    (rev <revnumber>274085</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100044</entry>
	  <entry>November 4, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after adding new libraries/utilities
	    (dpv and figpar) for data throughput visualization (rev
	    <revnumber>274116</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100045</entry>
	  <entry>November 4, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after FreeBSD-SA-14:23,
	    FreeBSD-SA-14:24, and FreeBSD-SA-14:25 (rev
	    <revnumber>274162</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100046</entry>
	  <entry>November 13, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after <literal>kern_poll</literal>
	    signature change (rev
	    <revnumber>274462</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100047</entry>
	  <entry>November 13, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after removal of no-at version
	    of VFS syscalls helpers, like <literal>kern_open</literal>
	    (rev <revnumber>274476</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100048</entry>
	  <entry>December 1, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after starting the process of removing
	    the use of the deprecated "M_FLOWID" flag from the network
	    code (rev <revnumber>275358</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100049</entry>
	  <entry>December 9, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after importing an important fix to the
	    LLVM vectorizer, which could lead to buffer overruns in
	    some cases (rev <revnumber>275633</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100050</entry>
	  <entry>December 12, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after adding AES-ICM and AES-GCM to
	    OpenCrypto (rev <revnumber>275732</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100051</entry>
	  <entry>December 23, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after removing old NFS client and server
	    code from the kernel (rev
	    <revnumber>276096</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100052</entry>
	  <entry>December 31, 2014</entry>
	  <entry xml:lang="en">11.0-CURRENT after upgrade of clang, llvm and lldb to
	    3.5.0 release (rev <revnumber>276479</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100053</entry>
	  <entry>January 7, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after MCLGET() gained a return value
	    (rev <revnumber>276750</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100054</entry>
	  <entry>January 15, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after rewrite of callout subsystem
	    (rev <revnumber>277213</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100055</entry>
	  <entry>January 22, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after reverting callout changes in
	    r277213 (rev <revnumber>277528</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100056</entry>
	  <entry>January 23, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after addition of
	    <literal>futimens</literal> and
	    <literal>utimensat</literal> system calls
	    (rev <revnumber>277610</revnumber>).</entry>

	</row>

	<row>
	  <entry>1100057</entry>
	  <entry>January 29, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after removal of d_thread_t
	    (rev <revnumber>277897</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100058</entry>
	  <entry>February 5, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after addition of support for probing
	    the SCSI VPD Extended Inquiry page (0x86)
	    (rev <revnumber>278228</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100059</entry>
	  <entry>February 9, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after import of xz 5.2.0,
	    which added multi-threaded compression and lzma
	    gained libthr dependency
	    (rev <revnumber>278433</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100060</entry>
	  <entry>February 16, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after forwarding
	    <literal>FBIO_BLANK</literal>
	    to framebuffer clients
	    (rev <revnumber>278846</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100061</entry>
	  <entry>February 18, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after <literal>CDAI_FLAG_NONE</literal>
	    addition (rev <revnumber>278964</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100062</entry>
	  <entry>February 23, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after <citerefentry><refentrytitle>mtio</refentrytitle><manvolnum>4</manvolnum></citerefentry> and <citerefentry><refentrytitle>sa</refentrytitle><manvolnum>4</manvolnum></citerefentry>
	    <acronym>API</acronym> and <citerefentry><refentrytitle>ioctl</refentrytitle><manvolnum>2</manvolnum></citerefentry> additions
	    (rev <revnumber>279221</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100063</entry>
	  <entry>March 7, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after adding mutex support to the
	    pps_ioctl() API in the kernel (rev
	    <revnumber>279728</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100064</entry>
	  <entry>March 7, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after adding PPS support to USB serial
	    drivers (rev <revnumber>279729</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100065</entry>
	  <entry>March 15, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after upgrading clang, llvm and lldb to
	    3.6.0 (rev <revnumber>280031</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100066</entry>
	  <entry>March 20, 2015</entry>

	  <entry xml:lang="en">11.0-CURRENT after removal of SSLv2 support from
	    OpenSSL (rev <revnumber>280306</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100067</entry>
	  <entry>March 25, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after removal of SSLv2 support from
	    <citerefentry><refentrytitle>fetch</refentrytitle><manvolnum>1</manvolnum></citerefentry> and <citerefentry><refentrytitle>fetch</refentrytitle><manvolnum>3</manvolnum></citerefentry> (rev
	    <revnumber>280630</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100068</entry>
	  <entry>April 6, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after change to net.inet6.ip6.mif6table
	    sysctl (rev <revnumber>281172</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100069</entry>
	  <entry>April 15, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after removal of const qualifier from
	    <citerefentry><refentrytitle>iconv</refentrytitle><manvolnum>3</manvolnum></citerefentry> (rev <revnumber>281550</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100071</entry>
	  <entry>April 29, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after API/ABI change to
	    <citerefentry><refentrytitle>smb</refentrytitle><manvolnum>4</manvolnum></citerefentry> (rev <revnumber>281985</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100072</entry>
	  <entry>May 1, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after adding <citerefentry><refentrytitle>reallocarray</refentrytitle><manvolnum>3</manvolnum></citerefentry> in
	    libc (rev <revnumber>282314</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100073</entry>
	  <entry>May 8, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after extending the maximum number of
	    allowed PCM channels in a PCM stream to 127 and decreasing
	    the maximum number of sub-channels to 1 (rev
	    <revnumber>282650</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100074</entry>
	  <entry>May 25, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after adding preliminary support for
	    x86-64 Linux binaries (rev <revnumber>283424</revnumber>),
	    and upgrading clang and llvm to 3.6.1 (rev
	    <revnumber>283526</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100075</entry>
	  <entry>May 27, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after dounmount() requiring a reference
	    on the passed struct mount (rev
	    <revnumber>283602</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100076</entry>
	  <entry>June 4, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after disabled generation of legacy
	    formatted password databases entries by default.  (rev
	    <revnumber>283983</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100077</entry>
	  <entry>June 10, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after API changes to
	    <literal>lim_cur</literal>,
	    <literal>lim_max</literal>, and
	    <literal>lim_rlimit</literal> (rev
	    <revnumber>284215</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100079</entry>
	  <entry>August 18, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after import of jemalloc 4.0.0
	    (rev <revnumber>286866</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100080</entry>
	  <entry>October 5, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after upgrading clang, llvm, lldb,
	    compiler-rt and libc++ to 3.7.0 (rev
	    <revnumber>288943</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100081</entry>
	  <entry>October 16, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after undating ZFS to support resumable
	    send/receive (rev <revnumber>r289362</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100085</entry>
	  <entry>October 30, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after import of OpenSSL 1.0.2d (rev
	    <revnumber>290207</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100088</entry>
	  <entry>November 7, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after string collation and locales
	    rework (rev <revnumber>290495</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100089</entry>
	  <entry>November 7, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after API change to
	    <citerefentry><refentrytitle>sysctl_add_oid</refentrytitle><manvolnum>9</manvolnum></citerefentry> (rev <revnumber>290475</revnumber>
	    and <revnumber>r290505</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100090</entry>
	  <entry>November 10, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after API change to callout_stop macro;
	    (rev <revnumber>290664</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100092</entry>
	  <entry>December 19, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after removal of vm_pageout_grow_cache
	    (rev <revnumber>292469</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100093</entry>
	  <entry>December 30, 2015</entry>
	  <entry xml:lang="en">11.0-CURRENT after removal of sys/crypto/sha2.h
	    (rev <revnumber>292782</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100094</entry>
	  <entry>January 15, 2016</entry>
	  <entry xml:lang="en">11.0-CURRENT after LinuxKPI PCI changes
	    (rev <revnumber>294086</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100095</entry>
	  <entry>January 19, 2016</entry>
	  <entry xml:lang="en">11.0-CURRENT after LRO optimizations
	    (rev <revnumber>294327</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100096</entry>
	  <entry>January 21, 2016</entry>
	  <entry xml:lang="en">11.0-CURRENT after LinuxKPI idr_* additions
	    (rev <revnumber>294505</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100097</entry>
	  <entry>January 26, 2016</entry>
	  <entry xml:lang="en">11.0-CURRENT after API change to dpv(3)
	    (rev <revnumber>294860</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100098</entry>
	  <entry>February 16, 2016</entry>
	  <entry xml:lang="en">11.0-CURRENT after API change to rman
	    (rev <revnumber>294883</revnumber>).</entry>
	</row>

	<row>
	  <entry>1100100</entry>
	  <entry>February 26, 2016</entry>
	  <entry xml:lang="en">11.0-CURRENT after bus_alloc_resource_anywhere() API
	    addition (rev <revnumber>296136</revnumber>).</entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <note>
    <para xml:lang="en">Note that 2.2-STABLE sometimes identifies itself as
      <quote>2.2.5-STABLE</quote> after the 2.2.5-RELEASE.  The
      pattern used to be year followed by the month, but we decided to
      change it to a more straightforward major/minor system starting
      from 2.2.  This is because the parallel development on several
      branches made it infeasible to classify the releases merely by
      their real release dates.  Do not worry about old -CURRENTs;
      they are listed here just for reference.</para>
  </note>
</chapter>

</book>
